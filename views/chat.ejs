<%- include('layout') %> 
<link rel="stylesheet" href="/styles/chat.css" />

<body>
    <div class="layout-container container">
      
      <aside class="left-sidebar">
        <div class="aside">
          <ul class="nav">
            <li class="nav-item current">
              <a href="/feeds">
                <i class="nav-icon fas fa-home"></i>
                <span class="nav-text">Home</span>
              </a>
            </li>
            <li class="nav-item">
              <a href="/chat">
                <i class="nav-icon fas fa-message"></i>
                <span class="nav-text">Chat</span>
              </a>
            </li>
            <button id="openSubmitForm" class="nav-item mid-post-1">
              <i class="nav-icon fas fa-plus-circle"></i>
            </button>
            <li class="nav-item">
              <a href="/profile">
                <i class="nav-icon fas fa-circle-user"></i>
                <span class="nav-text">My Profile</span>
              </a>
            </li>
            <li class="nav-item mid-post-2">
              <a  href="/submit"class="nav-text">Compose Gist</a>
              <i  class="nav-icon fas fa-circle-plus"></i>
            </li>
          </ul>
        </div>
        </aside>
  

        <main>

            <div id="chat-box">

                <div class="chat-box">
        <center><h2>Anonymous Chat Room <span>Connected Gossipas: <span class="users-count">0</span></span></h2></center>
                <div id="messages" style="overflow-y: auto; height: 200px;">
                    <div id="typing-indicator"></div>
                </div>
               
                <div id="input-container">
                    <input type="text" id="chat-input" placeholder="Type your message here..." />
                    <button id="send-chat">Send</button>
                    <button id="emoji-btn">😀</button>
                    <div id="emoji-picker" style="display:none;">
                        <span>😀</span><span>😂</span><span>😍</span><span>🥳</span><span>👍</span>
                    </div>
                  </div>
                </div>
                <button class="message-button"><i class="fas fa-message fa-2x"></i> <span class="message-count"></span></button>
            </div>
        </main>
        <aside class="right-sidebar">

          <div class="aside premium-aside">
            <div class="premium-card">
              <div class="crown-icon sparkle">👑</div>
          
              <h3 class="premium-title">Become a Top Gossipa</h3>
              <p class="premium-text">Stand out in the World of anonymity. Get Known. Remain unseen.</p>
          
              <div class="trending-stats">
                <span>🔥 Trending Now: <strong>152</strong> Gissipas</span>
              </div>
          
              <div class="avatar-hint">
                <img src="/img/avatars/thumbs/dog.jpg" alt="Anonymous" class="blur-avatar" />
                <p>You’re 1 step from <strong>trending</strong>…</p>
              </div>
          
              <a href="/subscribe" class="premium-btn">Unlock Premium</a>
            </div>
          </div>
          
       
           <div class="aside aside-2">
          <center>
              <h4 class="user-count">Active Gossipas: <span id="activeCount">0</span></h4>
          </center>
          <ul class="nav user-list">
          </ul>
          <ul id="systemMessage">
            
          </ul>
        </div>

        </aside>
       
    </div>

    <script>
      const connectedUsersMap = new Map();
      const userList = document.querySelector(".user-list");
      const userCountDisplay = document.getElementById("activeCount");
    
      function updateUserCount() {
        userCountDisplay.textContent = connectedUsersMap.size;
      }
    
      function userConnected(user) {
        if (connectedUsersMap.has(user.id)) return;
    
        const userBox = document.createElement("li");
        userBox.className = "connected-user nav-item enter";
        userBox.id = `user-${user.id}`;
        userBox.innerHTML = `
          <div class="user-card" style="display: flex; align-items: center; gap: 10px;">
            <img src="${user.profile_picture}" alt="Avatar" class="profile-pic" style="width: 32px; height: 32px; border-radius: 50%;">
            <p>@amebo${user.id}</p>
          </div>
        `;
    
        userList.appendChild(userBox);
        connectedUsersMap.set(user.id, userBox);
        updateUserCount();
    
        // Trigger reflow for entry animation
        requestAnimationFrame(() => {
          userBox.classList.add("enter");
        });
      }
    
      function userDisconnected(userId) {
        const userBox = connectedUsersMap.get(userId);
        if (userBox) {
          userBox.classList.add("exit");
          userBox.classList.remove("enter");
          setTimeout(() => {
            userBox.remove();
            connectedUsersMap.delete(userId);
            updateUserCount();
          }, 400); // CSS transition match
        }
      }
    
      socket.on("userJoined", async (userId) => {
        try {
          const res = await fetch(`/user/${userId}`);
          const user = await res.json();
          userConnected(user);
        } catch (err) {
          console.error("Failed to fetch user data:", err);
        }
      });
    
      socket.on("userLeft", (userId) => {
        userDisconnected(userId);
      });
    
      // Load current active users on first load
      fetch("/active-users")
        .then(res => res.json())
        .then(users => {
          users.forEach(user => userConnected(user));
        })
        .catch(console.error);
    </script>

    <script>
    
    // Store username in localStorage (on page load)
    localStorage.setItem('userId', '<%= userId %>');
</script>
    <script>
        document.getElementById('emoji-btn').addEventListener('click', () => {
    const picker = document.getElementById('emoji-picker');
    picker.style.display = picker.style.display === 'none' ? 'block' : 'none';
});

// Append selected emoji to input
document.querySelectorAll('#emoji-picker span').forEach(emoji => {
    emoji.addEventListener('click', () => {
        chatInput.value += emoji.textContent;
        picker.style.display = 'none';
    });
});

    </script>
   
   <script>

// const socket = io('http://localhost:4000', { query: { userId: localStorage.getItem('userId') } });
const chatInput = document.getElementById('chat-input');
const sendChat = document.getElementById('send-chat');
const messagesDiv = document.getElementById('messages');
const userCount = document.querySelector('.users-count');
const typingIndicator = document.getElementById('typing-indicator');

const user = localStorage.getItem('userId'); // Assume user ID is stored in localStorage

// Function to get current timestamp
function getCurrentTimestamp() {
    return new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}

function updateGossipaCount() {
        userCount.textContent = connectedUsersMap.size;
      }

// Load chat history from localStorage
function loadChatHistory() {
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];
    chatHistory.forEach((msg) => {
        appendMessage(msg.message, msg.type, new Date(msg.timestamp).toLocaleTimeString());
    });
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
    updateGossipaCount();
}

// Save message with type to localStorage
function saveMessage(message, type, user) {
    let chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];
    chatHistory.push({ user, message, type, timestamp: new Date().toISOString() });
    localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
}

// Append message to the chat UI
function appendMessage( message, type, user, timestamp = getCurrentTimestamp()) {
    const msgDiv = document.createElement('div');
    const timeSpan = document.createElement('span');
    const msgUser = document.createElement('span');
    msgUser.className = "user"
    msgDiv.textContent = message;
    msgUser.textContent = `~~amebo${user}~~`
    timeSpan.textContent = ` (${timestamp})`;
    msgDiv.classList.add(type);
    msgDiv.appendChild(timeSpan);
    msgDiv.appendChild(msgUser);
    messagesDiv.appendChild(msgDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

// Typing indicator timeout
let typingTimeout;

// Send "typing" event when user types
chatInput.addEventListener('input', () => {
    socket.emit('typing', { user });

    clearTimeout(typingTimeout);
    typingTimeout = setTimeout(() => {
        socket.emit('stoppedTyping', { user });
    }, 2000);
});

// Check if it's the first connection after page reload
let count = 0
if (!sessionStorage.getItem('hasJoined')) {
    socket.on('userJoined', (message) => {
        appendSystemMessage(message);
       userCount.innerHTML = count++
    });

    // Mark that the user has joined
    sessionStorage.setItem('hasJoined', 'true');
}

window.addEventListener('beforeunload', () => {
    sessionStorage.removeItem('hasJoined'); // Remove 'hasJoined' flag when the user is about to leave
    
});

socket.on('userLeft', (message) => {
    if (sessionStorage.getItem('hasJoined')) {
        appendSystemMessage(message);
        // userCount.innerHTML = count--
    }
});


function appendSystemMessage(message) {
    const msgDiv = document.createElement('div');
    msgDiv.textContent = message;
    msgDiv.classList.add('system-message'); // Add a CSS class for styling
    messagesDiv.appendChild(msgDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}


// Handle incoming messages
socket.on('message', (data) => {
    appendMessage(data.text, data.user === user ? 'sent' : 'received', new Date(data.timestamp).toLocaleTimeString());
    saveMessage(data.text, data.user === user ? 'sent' : 'received');
});

// Handle typing indicator
socket.on('typing', (data) => {
    typingIndicator.textContent = ` ~~gossipa${data.user}~~ is typing...`;
});

socket.on('stoppedTyping', () => {
    typingIndicator.textContent = '';
});

// Send message when "Send" button is clicked
sendChat.addEventListener('click', () => {
    const message = chatInput.value.trim();
    if (message) {
        // appendMessage(message, 'sent');
        // saveMessage(message, 'sent');
        socket.emit('message', { user, text: message });
        chatInput.value = '';
    }
});

chatInput.addEventListener('keyup', (e) => {
  if(e.key === 'Enter'){
    const message = chatInput.value.trim();
    if (message) {
        // appendMessage(message, 'sent');
        // saveMessage(message, 'sent');
        socket.emit('message', { user, text: message });
        chatInput.value = '';
    }
  }
})

// Load chat history on page load
window.onload = loadChatHistory;

// Handle WebSocket errors
socket.on('connect_error', (error) => {
    console.error('Socket.IO Connection Error:', error);
});

</script>

<script>
  window.addEventListener("DOMContentLoaded", () => {
    const modal = document.getElementById("submitModal");

    if (modal && modal.style.display !== "none") {
      const script = document.createElement("script");
      script.src = "/js/shareModal.js";
      document.body.appendChild(script);
    }
  });
</script>


<script src="/js/defaultTheme.js"></script>
<script src="/js/app.js"></script>
</body>