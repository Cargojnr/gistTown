<%- include('layout') %> 
<link rel="stylesheet" href="/styles/chat.css" />
<style>
  #messages {
  overflow-y: auto; 
  height: 200px;
  }
</style>

<body>
    <div class="layout-container container">
      
      <aside class="left-sidebar">
        <div class="aside">
          <ul class="nav">
            <li class="nav-item current">
              <a href="/feeds">
                <i class="nav-icon fas fa-home"></i>
                <span class="nav-text">Home</span>
              </a>
            </li>
            <li class="nav-item">
              <a href="/chat">
                <div class="nav-main">
                  <p>
                    <i class="nav-icon fas fa-comments"></i>
                    <span class="nav-text">ChatRoom</span>       
                  </p>
                  
                <span class="nav-tag">New</span>
              </div>
              </a>
            </li>
            <li class="nav-item mid-post-1">
              <button id="openSubmitForm" >
                <i class="nav-icon fas fa-plus-circle"></i>
              </button>
            </li>
           <li class="nav-item">
              <a href="/profile">
                <i class="nav-icon fas fa-circle-user"></i>
                <span class="nav-text">My Profile</span>
              </a>
            </li>
            <li class="nav-item blur">
              <a aria-disabled="true">
                <div class="nav-main">
                  <p>
                    <i class="nav-icon fab fa-modx"></i>
                    <span class="nav-text">Explore</span>       
                  </p>
                  
                <span class="nav-tag">Soon</span>
              </div>
              </a>
            </li>
            <li class="nav-item mid-post-2">
              <a  href="/submit"class="nav-text">Compose Gist</a>
              <i  class="nav-icon fas fa-circle-plus"></i>
            </li>
          </ul>
        </div>
        </aside>
  

        <main>

          <div id="chat-box">
            <div class="chat-box">
              <center>
                <h2> Connected Gossipas: 
                  <span class="connected">
                   <span class="users-count">0</span>
                  </span>
                </h2>
              </center>
          
              <div id="messages">
                <div id="typing-indicator"></div>
              </div>
          
              <div id="input-container">
                <input type="text" id="chat-input" placeholder="Type your message..." />
                <button id="send-chat"><i class="fas fa-paper-plane"></i></button>
                <button id="emoji-btn">üòÄ</button>
                <div id="emoji-picker">
                  <span>üòÄ</span><span>üòÇ</span><span>üòç</span><span>ü•≥</span><span>üëç</span>
                </div>
              </div>
            </div>
        
          </div>
                  </main>
                  <aside class="right-sidebar">
                    <div class="aside premium-aside">
                        <div class="premium-card">
                          <div class="crown-icon sparkle">üëë</div>
                      
                          <h3 class="premium-title">Become a Chief Gossipa</h3>
                          <p class="premium-text">Stand out in the World of anonymity. Get Heard. Remain unknown.</p>
                      
                          <div class="trending-stats">
                            <span>üî• Trending Now: <strong>152</strong> Gissipas</span>
                          </div>
                      
                          <div class="avatar-hint">
                            <img src="/img/avatars/thumbs/dog.jpg" alt="Anonymous" class="blur-avatar" />
                            <p>You‚Äôre 1 step from <strong>trending</strong>‚Ä¶</p>
                          </div>
                      
                          <a href="/subscribe" class="premium-btn">Unlock Premium</a>
                        </div>
                      </div>
                        
                      <div class="aside aside-2">
                        <center>
                          <h4 class="user-count"><button class="dot active animate-ping-once" data-slide="0"></button>&nbsp;Active Gossipas: <span id="activeCount">0</span></h4>
                        </center>
                        <ul class="nav user-list">
                        </ul>
                
                      </div>
                
                  </aside>
                
                </div>
                
                <script>
                    const connectedUsersMap = new Map();
                    const userList = document.querySelector(".user-list");
                    const userCountDisplay = document.getElementById("activeCount");
                
                    function updateUserCount() {
                      userCountDisplay.textContent = connectedUsersMap.size;
                    }
                
                    function userConnected(user) {
                      if (connectedUsersMap.has(user.id)) return;
                
                      const userBox = document.createElement("li");
                      userBox.className = "connected-user nav-item enter";
                      userBox.id = `user-${user.id}`;
                      const verifiedBadge = `${user.verified}`
    ? `<img src="/img/badge.png" alt="Verified Badge" class="verified-badge" style="width: 16px; height: 16px;">`
    : "";

        userBox.innerHTML = `
          <div class="user-card" style="display: flex; align-items: center; gap: 10px;">
            <img src="${user.profile_picture}" alt="Avatar" class="profile-pic" style="width: 32px; height: 32px; border-radius: 50%;">
            <p>
              @amebo${user.id}
             ${verifiedBadge}
              </p>
          </div>
        `;
                
                      userList.appendChild(userBox);
                      connectedUsersMap.set(user.id, userBox);
                      updateUserCount();
                
                      // Trigger reflow for entry animation
                      requestAnimationFrame(() => {
                        userBox.classList.add("enter");
                      });
                    }
                
                    function userDisconnected(userId) {
                      const userBox = connectedUsersMap.get(userId);
                      if (userBox) {
                        userBox.classList.add("exit");
                        userBox.classList.remove("enter");
                        setTimeout(() => {
                          userBox.remove();
                          connectedUsersMap.delete(userId);
                          updateUserCount();
                        }, 400); // CSS transition match
                      }
                    }
                
                    socket.on("userJoined", async (userId) => {
                      try {
                        const res = await fetch(`/user/${userId}`);
                        const user = await res.json();
                        userConnected(user);
                      } catch (err) {
                        console.error("Failed to fetch user data:", err);
                      }
                    });
                
                    socket.on("userLeft", (userId) => {
                      userDisconnected(userId);
                    });
                
                    // Load current active users on first load
                    fetch("/active-users")
                      .then(res => res.json())
                      .then(users => {
                        users.forEach(user => userConnected(user));
                      })
                      .catch(console.error);
                  </script>
                
                    <script>
                        const header = document.querySelector('header');
                        const nextSection = document.querySelector('body').querySelector('section:not(.active)');
                        const logo = document.getElementById('logo')
                
                        window.addEventListener('scroll', function () {
                            const scrolled = window.scrollY > 0;
                            if (scrolled) {
                                let body = document.querySelector('body');
                                body.style.overflowY = 'scroll';
                                header.classList.add('scrolled');
                            } else {
                                header.classList.remove('scrolled');
                            }
                        });
                
                        window.onload = function () {
                            const textArea = document.querySelector('textarea')
                            textArea.blur();
                        }
                
                
                        function changeBg(event) {
                            event.target.style.background = "var(--secondary-color)"
                            event.target.style.border = "1px solid var(--primary-color)"
                        }
                
                    </script>

    <script>
    
    // Store username in localStorage (on page load)
    localStorage.setItem('userId', '<%= userId %>');
</script>
    <script>
        document.getElementById('emoji-btn').addEventListener('click', () => {
    const picker = document.getElementById('emoji-picker');
    picker.style.display = picker.style.display === 'none' ? 'block' : 'none';
});

// Append selected emoji to input
document.querySelectorAll('#emoji-picker span').forEach(emoji => {
    emoji.addEventListener('click', () => {
        chatInput.value += emoji.textContent;
        picker.style.display = 'none';
    });
});

    </script>
   
   <script>

// const socket = io('http://localhost:4000', { query: { userId: localStorage.getItem('userId') } });
const chatInput = document.getElementById('chat-input');
const sendChat = document.getElementById('send-chat');
const messagesDiv = document.getElementById('messages');
const userCount = document.querySelector('.users-count');
const typingIndicator = document.getElementById('typing-indicator');

const user = parseInt(localStorage.getItem('userId'), 10); // Ensure numeric ID


// Function to get current timestamp
function getCurrentTimestamp() {
    return new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}

function updateGossipaCount() {
        userCount.textContent = connectedUsersMap.size;
      }

// Load chat history from localStorage
function loadChatHistory() {
    const chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];
    chatHistory.forEach((msg) => {
        appendMessage(msg.message, msg.type, new Date(msg.timestamp).toLocaleTimeString());
    });
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
    updateGossipaCount();
}

// Save message with type to localStorage
function saveMessage(message, type, user) {
    let chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];
    chatHistory.push({ user, message, type, timestamp: new Date().toISOString() });
    localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
}

function appendMessage(message, type, userId, timestamp = new Date()) {
  const dateObj = new Date(timestamp);
    const dateStr = dateObj.toLocaleDateString(undefined, { month: 'short', day: 'numeric' });

    // Add date divider if needed
    const lastDate = messagesDiv.getAttribute('data-last-date');
    if (lastDate !== dateStr) {
        const dateDivider = document.createElement('div');
        dateDivider.className = 'date-divider';
        dateDivider.textContent = dateStr;
        messagesDiv.appendChild(dateDivider);
        messagesDiv.setAttribute('data-last-date', dateStr);
    }

    const msgDiv = document.createElement('div');
    msgDiv.className = "message"
    const timeSpan = document.createElement('span');
    const msgUser = document.createElement('span');

    msgUser.className = "user";
    msgDiv.textContent = message;
    msgUser.textContent = `gossipa${user}`;
    timeSpan.textContent = ` (${new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })})`;

    msgDiv.classList.add(type);
    msgDiv.appendChild(timeSpan);
    msgDiv.appendChild(msgUser);
    messagesDiv.appendChild(msgDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}


// Typing indicator timeout
let typingTimeout;

// Send "typing" event when user types
chatInput.addEventListener('input', () => {
    socket.emit('typing', { user });

    clearTimeout(typingTimeout);
    typingTimeout = setTimeout(() => {
        socket.emit('stoppedTyping', { user });
    }, 2000);
});

// Check if it's the first connection after page reload
let count = 0;
socket.on('userJoined', (userId) => {
    appendSystemMessage(`üëã gossipa${userId} joined the chat`);
    
    // Only count new join if not already marked
    if (!sessionStorage.getItem('hasJoined')) {
        count++;
        userCount.innerHTML = count;
        sessionStorage.setItem('hasJoined', 'true');
    }
});



window.addEventListener('beforeunload', () => {
    sessionStorage.removeItem('hasJoined'); // Remove 'hasJoined' flag when the user is about to leave
    
});

socket.on('userLeft', (userId) => {
    appendSystemMessage(`‚ùå gossipa${userId} left the chat`);
    count = Math.max(0, count - 1); // avoid negative count
    userCount.innerHTML = count;
});



function appendSystemMessage(message) {
    const msgDiv = document.createElement('div');
    msgDiv.textContent = message;
    msgDiv.classList.add('system-message'); // Add a CSS class for styling
    messagesDiv.appendChild(msgDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}


// Handle incoming messages
socket.on('message', (data) => {
  const type = data.user === user ? 'sent' : 'received';
    appendMessage(data.text, type, data.user, data.timestamp); // pass raw timestamp string
    saveMessage(data.text, type, data.user);

    // Clear typing if they sent a message
    if (data.user === currentTypingUser) {
        typingIndicator.textContent = '';
        currentTypingUser = null;
    }
});


// Track who is typing
let currentTypingUser = null;

socket.on('typing', (data) => {
    if (data.user !== user) {
        typingIndicator.textContent = `üìù gossipa${data.user} is typing...`;
        currentTypingUser = data.user;
    }
});

socket.on('stoppedTyping', () => {
    if (currentTypingUser) {
        typingIndicator.textContent = '';
        currentTypingUser = null;
    }
});



socket.on('stoppedTyping', () => {
    typingIndicator.textContent = '';
});

// Send message when "Send" button is clicked
sendChat.addEventListener('click', () => {
    const message = chatInput.value.trim();
    if (message) {
        socket.emit('message', { user, text: message });
        chatInput.value = '';
    }
});

chatInput.addEventListener('keyup', (e) => {
  if(e.key === 'Enter'){
    const message = chatInput.value.trim();
    if (message) {

        socket.emit('message', { user, text: message });
        chatInput.value = '';
    }
  }
})

// Load chat history on page load
window.onload = loadChatHistory;

// Handle WebSocket errors
socket.on('connect_error', (error) => {
    console.error('Socket.IO Connection Error:', error);
});

</script>

<script>
  window.addEventListener("DOMContentLoaded", () => {
    const modal = document.getElementById("submitModal");

    if (modal && modal.style.display !== "none") {
      const script = document.createElement("script");
      script.src = "/js/shareModal.js";
      document.body.appendChild(script);
    }
  });
</script>


<script src="/js/defaultTheme.js"></script>
<script src="/js/app.js"></script>
</body>