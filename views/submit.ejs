<%- include('layout') %>
    <style>
        #recordContainer {
            background: linear-gradient(135deg, #1e3c72, #2a5298);
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            height: 40vh;
            text-align: center;
            /* background: rgba(255, 255, 255, 0.1); */
            padding: 30px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            margin: 1rem auto;
        }

        h1 {
            margin-bottom: 20px;
            font-size: 24px;
            color: var(--text-color) !important;
        }

        .or {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            gap: 20px;
        }

        .or h4 {
            font-size: 20px;
        }

        .or hr {
            opacity: 0.3;
            width: 100%;
        }

        .mic-button {
            background: #ff5f6d;
            /* background: var(--secondary-color); */
            border: none;
            color: white;
            width: 80px;
            height: 80px;
            border-radius: 50%;
            font-size: 24px;
            cursor: pointer;
            transition: background 0.3s ease;
            position: relative;
        }


        .lottie-wrapper {
            position: absolute;
            top: 50%;
            left: 50%;
            width: 80px;
            height: 80px;
            transform: translate(-50%, -50%);
            pointer-events: none;
            z-index: 0;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .mic-button.recording .lottie-wrapper {
            opacity: 1;
            animation: orbit 2s linear infinite;
        }

        @keyframes orbit {
            0% {
                transform: translate(-50%, -50%) rotate(0deg) scale(1);
            }

            50% {
                transform: translate(-50%, -50%) rotate(180deg) scale(1.1);
            }

            100% {
                transform: translate(-50%, -50%) rotate(360deg) scale(1);
            }
        }

        .mic-button:active {
            background: #ff3b4a;
        }

        .mic-button.recording {
            animation: glow 1.5s infinite;
        }

        @keyframes glow {
            0% {
                box-shadow: 0 0 10px #ff5f6d, 0 0 20px #ff5f6d, 0 0 30px #ff5f6d;
            }

            50% {
                box-shadow: 0 0 20px #ff5f6d, 0 0 30px #ff5f6d, 0 0 40px #ff5f6d;
            }

            100% {
                box-shadow: 0 0 10px #ff5f6d, 0 0 20px #ff5f6d, 0 0 30px #ff5f6d;
            }
        }

        #actionButtons {
            display: none;
            margin-top: 20px;
        }

        #actionButtons button {
            background: var(--primary-color);
            color: var(--text-color);
            padding: .5rem .75rem;
            border-radius: 5px;
            border: none;
        }

        audio {
            margin-top: 20px;
            width: 100%;
            max-width: 600px;
        }
    </style>
    <body>

    <div class="layout-container container">

        <aside class="left-sidebar">
        <div class="aside">
            <ul class="nav">
              <li class="nav-item active">
                <i class="nav-icon fas fa-home"></i>
                <a href="/feeds" class="nav-text">Home</a>
              </li>
              <li class="nav-item">
                <i class="nav-icon fas fa-message"></i>
                <a href="/chat" class="nav-text">Chat</a>
              </li>
              <button id="openSubmitForm" class="nav-item mid-post-1 current">
                <i class="nav-icon fas fa-plus-circle"></i>
              </button>
              <li class="nav-item">
                <i class="nav-icon fas fa-circle-user"></i>
                <a href="/profile" class="nav-text">My Profile</a>
              </li>
              <li class="nav-item mid-post-2 current">
                <a  href="/submit"class="nav-text">Compose Gist</a>
                <i  class="nav-icon fas fa-circle-plus"></i>
              </li>
            </ul>
          </div>
          </aside>
         

        <main>      
           
        <% if (locals.secret) { %>
            <div class="form-container">
                
       
                <form action="/update" method="POST" id="share">
                    <input type="hidden" name="id" value="<%= secret.id %>" class="form-control">
                    <div class="form-group">
                        <textarea class="form-control" name="secret"><%= secret.secret %></textarea>
                    </div>

                   
                      
                    <div class="form-group category-section">
                        <label for="category" class="category-label">Choose a category</label>
                        <select id="category"
                            style="background : var(--secondary-color); border : 1px solid var(--primary-color);"
                            name="category" class="form-control category-dropdown">
                            <option value="<%= secret.category%>" selected>
                                <%= secret.category %>
                            </option>
                            <option value="confession">Confession</option>
                            <option value="advice">Advice</option>
                            <option value="funny">Funny</option>
                            <option value="random">Random</option>
                            <option value="vent">Vent</option>
                            <option value="love">Love</option>
                        </select>
                    </div>

                    <button type="submit" class="btn btn-dark secret-btn">
                        <%= submit %>
                    </button>

                </form>
            </div>
            <% } else { %>

                <div class="form-container">
                    <form method="POST" action="/share" id="share">

                        <div class="avatar-profile">
                            <img src="<%= profilePicture %>" class="profile-pic " alt="Avatar Profile">
                          </div> 
                        <div class="form-group category-section">
                            <label for="category" class="category-label">Choose a category</label>
                            <select id="category" onchange="changeBg(event)" name="category"
                                class="form-control category-dropdown">
                                <option value="" disabled selected>Select a category</option>
                                <option value="confession">Confession</option>
                                <option value="advice">Advice</option>
                                <option value="funny">Funny</option>
                                <option value="random">Random</option>
                                <option value="vent">Vent</option>
                                <option value="love">Love</option>
                            </select>
                        </div>


                        <div class="form-group">
                            <textarea class="form-control" id="input" name="secret"
                                placeholder="Hey <%= username %> What's on your mind today!"></textarea>
                        </div>


                        <button type="submit" id="submit" class="btn btn-dark secret-btn">
                            <%= submit %>
                        </button>

                    </form>

                    <div class="or">
                        <hr>
                        <h4>OR</h4>
                        <hr>
                    </div>

                    <div id="recordContainer">
                        <h1>Record a Voice Note</h1>
                        <button id="micButton" class="mic-button" tabindex="0">
                            <div class="lottie-wrapper"></div>
                            <i class="fas fa-microphone"></i>
                        </button>

                        <!-- Canvas for waveform visualization -->
                        <!-- <canvas id="waveform"></canvas> -->

                        <!-- Action buttons (discard/share) -->
                        <div id="actionButtons">
                            <button id="discardRecording">Discard</button>
                            <button id="submitRecording">Share</button>
                        </div>

                        <!-- Audio player for playback after recording -->
                        <audio id="audioPlayer" controls style="display:none;"></audio>
                    </div>



                    <div id="notification"
                        style="position: absolute !important; top: 10px !important; left: 0 !important; right: 0 !important; z-index: 1000;">
                    </div>

                    <script>

                        // Handle form submission via Fetch API
                        document.getElementById('share').addEventListener('submit', async (event) => {
                            event.preventDefault(); // Prevent form's default redirect behavior

                            const secretInput = document.getElementById('input');
                            const categoryDropdown = document.getElementById('category');
                            const secret = secretInput.value;
                            const category = categoryDropdown.value;

                            if (!category) {
                                alert('Please select a category before sharing!');
                                return;
                            }

                            try {
                                const response = await fetch('/share', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        secret,
                                        category,
                                        contentType: 'text' // Indicate that this is a text submission
                                    }),
                                });

                                const data = await response.json();

                                if (data.success) {
                                    alert('Secret shared successfully!');
                                    secretInput.value = ''; // Clear the input field
                                } else {
                                    alert('Failed to share the secret. Please try again.');
                                }
                            } catch (error) {
                                console.error('Error:', error);
                                alert('An error occurred. Please try again later.');
                            }
                        });
                    </script>
                </div>
                <audio id="post-sound" src="/sounds/whoosh-6316.mp3" preload="auto"></audio>
                <% } %>

                    
                            <hr>
                            <br>
                           
                        </div>
</main>

<aside class="right-sidebar">
    <div class="aside">
    <ul class="nav">
      <li class="nav-item">Moohe</li>
      <li class="nav-item">Homeem</li>
      <li class="nav-item">Homeem</li>
      <li class="nav-item">Homeem</li>
      <li class="nav-item">Homeem</li>
    </ul>
    </div>
    <div class="aside aside-2">
      <center><h4>Active Gossips</h4></center>
    <ul class="nav">
      <li class="nav-item">Moohe</li>
      <li class="nav-item">Homeem</li>
      <li class="nav-item">Homeem</li>
      <li class="nav-item">Homeem</li>
      <li class="nav-item">Homeem</li>
    </ul>
  </div>
  </aside>

    </div>


    <script>
        const header = document.querySelector('header');
        const nextSection = document.querySelector('body').querySelector('section:not(.active)');
        const logo = document.getElementById('logo')

        window.addEventListener('scroll', function () {
            const scrolled = window.scrollY > 0;
            if (scrolled) {
                let body = document.querySelector('body');
                body.style.overflowY = 'scroll';
                header.classList.add('scrolled');
            } else {
                header.classList.remove('scrolled');
            }
        });

        window.onload = function () {
            const textArea = document.querySelector('textarea')
            textArea.blur();
        }


        function changeBg(event) {
            event.target.style.background = "var(--secondary-color)"
            event.target.style.border = "1px solid var(--primary-color)"
        }

    </script>
    <script>
        // Prevent scrolling while holding the microphone button
        document.body.addEventListener('touchmove', (e) => {
            if (isRecording) {
                e.preventDefault();
            }
        }, { passive: false });

        let mediaRecorder;
        let audioChunks = [];
        let audioBlob;
        let audioUrl;
        // let analyser, canvas, canvasCtx, bufferLength, dataArray;
        let isRecording = false;

        const micButton = document.getElementById('micButton');
        const discardButton = document.getElementById('discardRecording');
        const submitButton = document.getElementById('submitRecording');
        const audioPlayer = document.getElementById('audioPlayer');
        // const waveformCanvas = document.getElementById('waveform');
        const actionButtons = document.getElementById('actionButtons');
        const type = micButton.getAttribute('data-type');
        const wrapper = micButton.querySelector('.lottie-wrapper');

        const animations = {
            mic: "./img/lottie/mic.json"
        };


        // Start recording on mousedown or touchstart
        micButton.addEventListener('mousedown', startRecording);
        micButton.addEventListener('touchstart', (e) => {
            e.preventDefault();
            console.log('Touch Start');
            startRecording();
        });

        // Stop recording on mouseup or touchend
        micButton.addEventListener('mouseup', stopRecording);
        micButton.addEventListener('touchend', (e) => {
            e.preventDefault();
            console.log('Touch End');
            stopRecording();
        });

        // Prevent default behavior for touch events
        micButton.addEventListener('touchmove', (e) => {
            e.preventDefault();
        });

        // Prevent context menu on long press
        micButton.addEventListener('contextmenu', (e) => {
            e.preventDefault();
        });


        let micLottieInstance;

        // Start recording function
        function startRecording() {
            if (isRecording) return;
            // Request permission to access the user's microphone
            navigator.mediaDevices.getUserMedia({ audio: true })
                .then(stream => {

                    micLottieInstance = lottie.loadAnimation({
                        container: wrapper,
                        renderer: 'svg',
                        loop: true,
                        autoplay: true,
                        path: animations.mic
                    });

                    // Create MediaRecorder instance
                    mediaRecorder = new MediaRecorder(stream);

                    // Start recording
                    mediaRecorder.start();

                    // Capture audio data during recording
                    mediaRecorder.ondataavailable = event => {
                        audioChunks.push(event.data); // Collect audio chunks
                    };

                    // When recording stops, create the audio blob and URL
                    mediaRecorder.onstop = () => {
                        audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                        audioUrl = URL.createObjectURL(audioBlob);
                        audioPlayer.src = audioUrl;

                        // Show the action buttons after recording is stopped
                        actionButtons.style.display = 'block';
                        audioPlayer.style.display = 'block'; // Show the audio player for playback
                    };

                })
                .catch(error => {
                    console.error('Error accessing microphone:', error);
                });

            isRecording = true;
            micButton.classList.add('recording');
        }

        // Stop recording function
        function stopRecording() {
            if (mediaRecorder && isRecording) {
                mediaRecorder.stop(); // Stop recording
                isRecording = false;
                micButton.classList.remove('recording');

                if (micLottieInstance) {
                    micLottieInstance.destroy(); // Clean up Lottie
                }

                const wrapper = document.querySelector('.lottie-wrapper');
                wrapper.innerHTML = ''; // Clear SVG from DOM
            }
        }

        // Discard the recording
        discardButton.addEventListener('click', () => {
            audioPlayer.src = ''; // Reset the audio player
            actionButtons.style.display = 'none'; // Hide the action buttons
            audioPlayer.style.display = 'none'; // Hide the audio player
            audioChunks = []; // Clear the audio chunks
        });

        // Submit the recording (share it)
        // Submit the recording (share it)
        submitButton.addEventListener('click', async () => {
            const categoryDropdown = document.getElementById('category');
            const category = categoryDropdown.value;

            if (!category) {
                alert('Please select a category before sharing!');
                return;
            }

            try {
                // Create a FormData object to send the audio file and category
                const formData = new FormData();
                formData.append('audio', audioBlob, 'voice-note.wav');
                formData.append('category', category);
                formData.append('contentType', 'audio'); // Indicate that this is an audio submission

                // Send the audio file to the server
                const response = await fetch('/share', {
                    method: 'POST',
                    body: formData,
                });

                const data = await response.json();

                if (data.success) {
                    alert('Recording shared successfully!');
                    // Reset the UI
                    audioPlayer.src = '';
                    actionButtons.style.display = 'none';
                    audioPlayer.style.display = 'none';
                    audioChunks = [];
                } else {
                    alert('Failed to share the recording. Please try again.');
                }
            } catch (error) {
                console.error('Error sharing recording:', error);
                alert('An error occurred. Please try again later.');
            }
        });
    </script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/bodymovin/5.12.2/lottie.min.js"></script>

<script>
    window.addEventListener("DOMContentLoaded", () => {
      const modal = document.getElementById("submitModal");
  
      if (modal && modal.style.display !== "none") {
        const script = document.createElement("script");
        script.src = "/js/shareModal.js";
        document.body.appendChild(script);
      }
    });
  </script>
<script src="/js/defaultTheme.js"></script>
    <script src="/js/app.js"></script>     
</body>