<style>
      .wrapper {
    z-index: 0 !important;
  }


  .wave-canvas {
    width: 100%;
  }

  .waveform,
  .wave-canvas {
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
  }

  .waveform.ready,
  .wave-canvas.ready {
    opacity: 1;
  }

  .wave-canvas.playing {
  filter: drop-shadow(0 0 12px rgba(127, 90, 240, 0.7));
  transition: filter 0.3s ease;
}


  .wave-play-btn {
    background: var(--card-bg);
    border: none;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.wave-play-btn.playing {
  animation: pulseGlow 1.2s infinite;
  box-shadow: 0 0 12px rgba(127, 90, 240, 0.8); /* matches your theme color */
  border-radius: 50%;
  transform: scale(1.1); /* slight pop */
}

@keyframes pulseGlow {
  0% {
    box-shadow: 0 0 6px rgba(127, 90, 240, 0.6),
                0 0 12px rgba(127, 90, 240, 0.4);
  }
  50% {
    box-shadow: 0 0 14px rgba(127, 90, 240, 0.9),
                0 0 24px rgba(127, 90, 240, 0.6);
  }
  100% {
    box-shadow: 0 0 6px rgba(127, 90, 240, 0.6),
                0 0 12px rgba(127, 90, 240, 0.4);
  }
}

    .shimmer-container {
        max-width: 900px !important;
        margin-top: 1rem;
    }

    .shimmer-wrapper {
        max-width: 900px !important;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        /* padding: 1rem; */
    }

    .shimmer-card {
        width: 100%;
        display: flex;
        background: var(--container-bg);
        border-radius: 10px;
        overflow: hidden;
        animation: pulse 1.5s infinite;
    }

    .shimmer-avatar {
        width: 50px;
        height: 50px;
        background: var(--body-bg);
        border-radius: 50%;
        margin: 1rem;
    }



    .shimmer-lines {
        flex: 1;
        padding: 1rem 0;
    }

    .shimmer-line {
        height: 10px;
        background: var(--body-bg);
        margin: 8px 0;
        border-radius: 5px;
    }

    .shimmer-line.short {
        width: 50%;
    }

    .shimmer-footer {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
    }

    .shimmer-btn {
        width: 40px;
        height: 20px;
        background: var(--body-bg);
        border-radius: 5px;
    }

    @keyframes pulse {
        0% {
            background-color: var(--container-bg);
        }

        50% {
            background-color: var(--body-bg);
        }

        100% {
            background-color: var(--container-bg);
        }
    }

    .shimmer {
        background: linear-gradient(90deg, var(--container-bg) 25%, var(--body-bg) 50%, var(--container-bg) 75%);
        background-size: 200% 100%;
        animation: shimmer 1.5s infinite;
    }

    @keyframes shimmer {
        0% {
            background-position: -200% 0;
        }

        100% {
            background-position: 200% 0;
        }
    }

    
  .share-modal {
    display: none;
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(5px);
    color: #fff;
    justify-content: center;
    align-items: center;
    z-index: 2 !important;
  }

  .share-modal .modal-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: .5rem;
    margin-top: -1rem;
  }


  .share-link {
    padding: .5rem;
    width: auto;
    font-size: 1rem;
    color: #fff;
    font-weight: 300;
    background: var(--secondary-color);
    border: none;
  }

  .socials {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    margin: .5rem;
  }

  .socials .share-whatsApp {
    color: green !important;
  }

  .socials .share-messenger {
    color: royalblue !important;
    }

  .socials .share-snapchat {
    color: yellow !important;
  }

  .socials .share-twitter {
    color: var(--text-color) !important;
  }

  .close-share-modal,
  .copy-link {
    color: #fff !important;
  }
</style>

<div id="main">
    <section class="main">
        <div class="jumbotron text-center">
            <div class="container">
                <div id="feeds">

                    <div id="topOverlay"></div>
                    <div id="bottomOverlay"></div>

                    <div id="shimmer-container" class="shimmer-container full-width">
                        <ul>
                            <% for (let i=0; i < savedFeeds.length; i++) { %>
                                <li class="secret shimmer-placeholder">
                                    <div class="card">
                                        <div class="shimmer-wrapper">
                                            <div class="shimmer-card">
                                                <div class="shimmer-avatar"></div>
                                                <div class="shimmer-lines">
                                                    <div class="shimmer-line short"></div>
                                                    <div class="shimmer-line"></div>
                                                    <div class="shimmer-line"></div>
                                                    <div class="shimmer-footer">
                                                        <div class="shimmer-btn"></div>
                                                        <div class="shimmer-btn"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                                <% } %>
                        </ul>
                    </div>

                    <div id="real-secrets" style="display: none;">
                        <ul id="secrets">
                            <% if (savedFeeds.length > 0) { %>

                            <% savedFeeds.forEach((post)=> { %>
                                <% if (post.type==='text' ) { %>

                                    <div id="pinned" class="pinned-secret">
                                        <div id="countdown"
                                            style="margin-top: 20px; font-weight: bold; text-align: center;"></div>
                                    </div>


                                    <li class=" secret text full-width" data-type="text" id="secret<%= post.id %>">

                                        <div class="card">
                                            <div class="card-header">
                                                <div class="user-details header<%= post.user_id %>">
                                                    <a href=<%=post.user_id===userId ? '/profile' : '/profile/amebo/' +
                                                        post.user_id %>
                                                        class="avatar-profile"><img oncontextmenu="return false;"
                                                            src="<%= post.profile_picture %>" alt="Profile Picture"
                                                            class="profile-pic"></a>
                                                    <div class="user-info">
                                                        <a href=<%=post.user_id===userId ? '/profile'
                                                            : '/profile/amebo/' + post.user_id %>>
                                                            <p class="username user<%= post.user_id %>">
                                                                <span class="user">@voice<%= post.user_id %></span>
                                                                <% if(post.verified===true) {%>
                                                                    <abbr title="Exclusive Membership"> <img
                                                                            oncontextmenu="return false;"
                                                                            src="../../img/gossipa3.png" alt=""
                                                                            class="verified-badge"></abbr>
                                                                    <% } else {%>

                                                                        <% } %>
                                                            </p>

                                                        </a>
                                                        <span class="timestamp" data-raw="<%= post.timestamp %>"></span>
                                                    </div>
                                                    <span class="you-live-badge hidden">üéôÔ∏èLive</span>
                                                    <span id="streamEndedNotice" class="badge ended hidden">Stream Ended
                                                        ‚úì</span>
                                                </div>
                                                <% if(userId !==post.user_id) {%>
                                                    <button data-targetid="<%= post.user_id %>" class="listen"><i
                                                            class="fas fa-ear-deaf"></i>&nbsp;<span>Resonate</span></button>
                                                    <% } else { %>
                                                        <a class="listen listening" href="/profile">Go to Profile</a>
                                                        <% } %>
                                            </div>

                                            <div class="card-content">
                                                <p>
                                                    <span class="content">
                                                        <% if (post.secret.split(" ").length > 150) { %>
                <%= post.secret.substring(0, 250) + " ..." %>
                                                            <% } else { %>
                                                                <%= post.secret %>
                                                                    <% } %>
                                                    </span>
                                                    <% if (post.secret.split(" ").length > 150) { %>
            
                    <button
                      class=" read" data-full="<%= post.secret %>"
                                                        data-truncated="<%= post.secret.substring(0, 250) + '...' %>">
                                                        Read More
                                                        </button>


                                                        <% } %>
                                                </p>
                                            </div>


                                            <div class="comment-section" data-post-id="<%= post.id %>"
                                                data-type="<%= post.type %>">

                                                <div class="reactions sleek">
                                                    <div class="first-action">
                                                        <div class="secret-card" data-id="<%= post.id %>">
                                                            <div class="reaction">
                                                                <button class="reaction-btn " data-type="hot">
                                                                    <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                                                    <img oncontextmenu="return false;"
                                                                        src="../../img/premium-reaction.png" alt="üî•"
                                                                        class="premium-reaction">

                                                                    <div class="reaction-class-wrapper">
                                                                        <span class="reaction-count none">
                                                                            <%= post.reactions.hot ?
                                                                                post.reactions.hot.count : 0 %>
                                                                        </span>
                                                                    </div>
                                                                </button>

                                                                <button class="reaction-btn " data-type="like">
                                                                    <!-- <div id="like-animation" class="lottie-animation"></div> -->
                                                                    üëç
                                                                    <div class="reaction-class-wrapper">


                                                                        <span class="reaction-count none">
                                                                            <%= post.reactions.like ?
                                                                                post.reactions.like.count : 0 %>
                                                                        </span>
                                                                    </div>
                                                                </button>

                                                                <button class="reaction-btn " data-type="laugh">
                                                                    <!-- <div id="laugh-animation" class="lottie-animation"></div> -->

                                                                    üòÇ
                                                                    <div class="reaction-class-wrapper">

                                                                        <span class="reaction-count none">
                                                                            <%= post.reactions.laugh ?
                                                                                post.reactions.laugh.count : 0 %>
                                                                        </span>
                                                                    </div>

                                                                </button>

                                                                <!-- <button class="reaction-btn " data-type="cry">

                                                    üò¢
                                                    <div class="reaction-class-wrapper">

                                                    <span class="reaction-count none">
                                                      <%= post.reactions.cry ? post.reactions.cry.count : 0 %>
                                                    </span>
                                                    </div>
                                                    
                                                  </button> -->

                                                                <button class="reaction-btn " data-type="gasp">
                                                                    <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                                                    üò±
                                                                    <div class="reaction-class-wrapper">

                                                                        <span class="reaction-count none">
                                                                            <%= post.reactions.gasp ?
                                                                                post.reactions.gasp.count : 0 %>
                                                                        </span>
                                                                    </div>

                                                                </button>

                                                            </div>

                                                        </div>

                                                        <button id="commentButton"><i class="fas fa-comment"></i><span
                                                                class="comment-count"></span>
                                                        </button>
                                                    </div>

                                                    <ul class="second-action">
                                                        <li>
                                                            <abbr title="Bookmark">
                                                                <button class="bookmark-btn" data-id="<%= post.id %>"
                                                                    data-type="<%= post.type %>">
                                                                    <i class="fas fa-bookmark"></i>
                                                                </button>
                                                            </abbr>
                                                        </li>

                                                        <li>
                                                            <button class="share-btn ">
                                                              <abbr title="Share"><i class="fas fa-upload"></i></abbr>
                                                            </button>
                                                          </li>
                        
                        
                                                          <!-- Share Modal -->
                                                          <div class="share-modal" class="modal hidden">
                                                            <div class="modal-content">
                                                              <h2>Spread the Gossip üê¶‚ú®</h2>
                                                              <p>Share this gist with your crew and keep the buzz alive!</p>
                        
                                                              <div class="link-box">
                                                                <input class="share-link" type="text" readonly>
                                                                <button class="copy-link">Copy</button>
                                                              </div>
                        
                                                              <ul class="socials">
                                                                <li>
                                                                  <a class="share-twitter" target="_blank"><i class="fab fa-twitter fa-2x"></i>
                                                                  </a>
                                                                </li>
                                                                <li>
                                                                  <a class="share-whatsApp" target="_blank"><i
                                                                      class="fab fa-whatsapp fa-2x"></i></a>
                                                                </li>
                                                                <li>
                                                                  <a class="share-snapchat" target="_blank"><i
                                                                      class="fab fa-snapchat fa-2x"></i></a>
                                                                </li>
                                                                <li>
                                                                  <a class="share-messenger" target="_blank"><i
                                                                      class="fab fa-facebook fa-2x"></i>
                                                                  </a>
                                                                </li>
                        
                                                              </ul>
                        
                                                              <button class="close-share-modal">Close</button>
                                                            </div>
                                                          </div>
                        
                                                    </ul>

                                                </div>

                                                <div class="comment-dropdown" id="commentDropdown">
                                                    <form class="comment-display" method="POST" id="commentDisplay">
                                                        <p class="total">Share your thoughts</p>
                                                        <ul id="comments" class="comments-list"></ul>
                                                    </form>

                                                    <form action="/comment" method="POST" id="comment-form">
                                                        <input type="hidden" name="id" id="secretId"
                                                            value="<%= post.id %>" />
                                                        <input type="hidden" name="secretUserId"
                                                            value="<%= post.user_id %>" />
                                                        <input type="hidden" name="commentUserId"
                                                            value="<%= userId %>" />
                                                        <textarea id="commentInput" placeholder="Write a comment..."
                                                            name="comment"></textarea>
                                                        <!-- <input type="text" id="commentInput" placeholder="Write a comment" name="comment"> -->
                                                        <button id="postCommentButton">
                                                            <!-- Post -->
                                                            <i class="fas fa-paper-plane"></i>
                                                        </button>
                                                        <% if (locals.message) { %>
                                                            <small>
                                                                <%= message %>
                                                            </small>
                                                            <% } %>
                                                    </form>

                                                </div>
                                            </div>


                                            <div class="card-menu">
                                                <button class="card-toggle-btn"><i class="fas fa-ellipsis-vertical"></i></button>
                                                <% if (userId === post.user_id) { %>
                                                  <form method="post" id="update" class="card-menu-content" style="display: none;" >
                                                    <input type="hidden" name="id" id="audioId" value="<%= post.id %>" />
                      
                                                    <button class="delete" type="click">
                                                      <abbr title="Delete your post">
                                                        Delete&nbsp;<i class="fas fa-trash"></i>
                                                      </abbr>
                                                    </button>
                      
                                                  </form>
                                                <% } else {%>
                                                <ul class="card-menu-content" style="display: none;">
                                                  <li>
                                                    <button class="report-btn" data-id="<%= post.id %>">
                                                      <abbr title="Report a post">
                                                      <i class="fa-regular fa-flag"></i>&nbsp;Report
                                                      </abbr>
                                                    </button>
                                                  </li>
                                                </ul>
                                                <% } %>
                                              </div>
                
                

                                        </div>
                                    </li>

                                    <% } else if (post.type==='audio' ) { %>
                                        <!-- Audio post UI -->
                                        <li class="secret audio full-width" data-type="audio">
                                            <div class="card ">
                                                <div class="card-header">
                                                    <div class="user-details header<%= post.user_id %>">
                                                        <a href="/profile/amebo/<%= post.user_id %>"
                                                            class="avatar-profile"><img oncontextmenu="return false;"
                                                                src="<%= post.profile_picture %>" alt="Profile Picture"
                                                                class="profile-pic"></a>
                                                        <div class="user-info">
                                                            <a href="/profile/amebo/<%= post.user_id %>">
                                                                <p class="username user<%= post.user_id %>">
                                                                    <span class="user">@voice<%= post.user_id %>
                                                                    </span>
                                                                    <% if(post.verified===true) {%>
                                                                        <abbr title="Exclusive Membership"> <img
                                                                                oncontextmenu="return false;"
                                                                                src="../../img/gossipa3.png" alt=""
                                                                                class="verified-badge"></abbr>
                                                                        <% } else {%>

                                                                            <% } %>
                                                                </p>

                                                            </a>
                                                            <span class="timestamp"
                                                                data-raw="<%= post.timestamp %>"></span>
                                                        </div>
                                                        <span class="you-live-badge hidden">üéôÔ∏èLive</span>
                                                        <span id="streamEndedNotice" class="badge ended hidden">Stream
                                                            Ended ‚úì</span>
                                                    </div>
                                                    <% if(userId !==post.user_id) {%>
                                                        <butto data-targetid="<%= post.user_id %>" class="listen"><i
                                                                class="fas fa-ear-deaf"></i>&nbsp;<span>Resonate</span></button>
                                                            <% } else { %>
                                                                <a class="listen listening" href="/profile">Go to Profile</a>
                                                                <% } %>
                                                </div>

                                                <div class="waveform-wrapper">
                                                    <div id="waveform-<%= post.id %>"></div>
                                                    <canvas id="visualizer-<%= post.id %>" class="wave-canvas"></canvas>
                                                    <button class="wave-play-btn" data-id="<%= post.id %>">‚ñ∂Ô∏è</button>
                                                </div>

                                                <div class="comment-section" data-post-id="<%= post.id %>"
                                                    data-type="audio">

                                                    <div class="reactions sleek">
                                                        <div class="first-action">
                                                            <div class="secret-card" data-id="<%= post.id %>">
                                                                <div class="reaction">
                                                                    <button class="reaction-btn " data-type="hot">
                                                                        <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                                                        <img oncontextmenu="return false;"
                                                                            src="../../img/premium-reaction.png"
                                                                            alt="Premium exclusive fire, hot reaction"
                                                                            class="premium-reaction">

                                                                        <div class="reaction-class-wrapper">
                                                                            <span class="reaction-count none">
                                                                                <%= post.reactions.hot ?
                                                                                    post.reactions.hot.count : 0 %>
                                                                            </span>
                                                                        </div>
                                                                    </button>

                                                                    <button class="reaction-btn " data-type="like">
                                                                        <!-- <div id="like-animation" class="lottie-animation"></div> -->
                                                                        üëç
                                                                        <div class="reaction-class-wrapper">


                                                                            <span class="reaction-count none">
                                                                                <%= post.reactions.like ?
                                                                                    post.reactions.like.count : 0 %>
                                                                            </span>
                                                                        </div>
                                                                    </button>

                                                                    <button class="reaction-btn " data-type="laugh">
                                                                        <!-- <div id="laugh-animation" class="lottie-animation"></div> -->

                                                                        üòÇ
                                                                        <div class="reaction-class-wrapper">

                                                                            <span class="reaction-count none">
                                                                                <%= post.reactions.laugh ?
                                                                                    post.reactions.laugh.count : 0 %>
                                                                            </span>
                                                                        </div>

                                                                    </button>

                                                                    <!-- <button class="reaction-btn " data-type="cry">

                                                      üò¢
                                                      <div class="reaction-class-wrapper">

                                                      <span class="reaction-count none">
                                                        <%= post.reactions.cry ? post.reactions.cry.count : 0 %>
                                                      </span>
                                                      </div>
                                                      
                                                    </button> -->

                                                                    <button class="reaction-btn " data-type="gasp">
                                                                        <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                                                        üò±
                                                                        <div class="reaction-class-wrapper">

                                                                            <span class="reaction-count none">
                                                                                <%= post.reactions.gasp ?
                                                                                    post.reactions.gasp.count : 0 %>
                                                                            </span>
                                                                        </div>

                                                                    </button>

                                                                </div>

                                                            </div>

                                                            <button id="commentButton"><i
                                                                    class="fas fa-comment"></i><span
                                                                    class="comment-count"></span>
                                                            </button>
                                                        </div>

                                                        <ul class="second-action">
                                                            <li>
                                                                <abbr title="Bookmark">
                                                                    <button class="bookmark-btn"
                                                                        data-id="<%= post.id %>"
                                                                        data-type="<%= post.type %>">
                                                                        <i class="fas fa-bookmark"></i>
                                                                    </button>
                                                                </abbr>
                                                            </li>

                                                        </ul>

                                                    </div>

                                                    <div class="comment-dropdown" id="commentDropdown">
                                                        <form class="comment-display" method="POST" id="commentDisplay">
                                                            <p class="total">Share your thoughts</p>
                                                            <ul id="comments" class="comments-list"></ul>
                                                        </form>

                                                        <form action="/comment" method="POST" id="comment-form">
                                                            <input type="hidden" name="audioId" id="audioId"
                                                                value="<%= post.id %>" />
                                                            <input type="hidden" name="secretUserId"
                                                                value="<%= post.user_id %>" />
                                                            <input type="hidden" name="commentUserId"
                                                                value="<%= userId %>" />
                                                            <textarea id="commentInput" placeholder="Write a comment..."
                                                                name="comment"></textarea>
                                                            <!-- <input type="text" id="commentInput" placeholder="Write a comment" name="comment"> -->
                                                            <button id="postCommentButton">
                                                                <!-- Post -->
                                                                <i class="fas fa-paper-plane"></i>
                                                            </button>
                                                            <% if (locals.message) { %>
                                                                <small>
                                                                    <%= message %>
                                                                </small>
                                                                <% } %>
                                                        </form>

                                                    </div>
                                                </div>



                                                <div class="card-menu">
                                                    <button class="card-toggle-btn"><i class="fas fa-ellipsis-vertical"></i></button>
                                                    <% if (userId === post.user_id) { %>
                                                      <form method="post" id="update" class="card-menu-content" style="display: none;" >
                                                        <input type="hidden" name="id" id="audioId" value="<%= post.id %>" />
                          
                                                        <button class="delete" type="click">
                                                          <abbr title="Delete your post">
                                                            Delete&nbsp;<i class="fas fa-trash"></i>
                                                          </abbr>
                                                        </button>
                          
                                                      </form>
                                                    <% } else {%>
                                                    <ul class="card-menu-content" style="display: none;">
                                                      <li>
                                                        <button class="report-btn" data-id="<%= post.id %>">
                                                          <abbr title="Report a post">
                                                          <i class="fa-regular fa-flag"></i>&nbsp;Report
                                                          </abbr>
                                                        </button>
                                                      </li>
                                                    </ul>
                                                    <% } %>
                                                  </div>
                    
                    

                                            </div>
                                        </li>
                                        <% } %>
                                            <% }) %>

                                    <%} else { %>
                                     <p>No echoes saved yet...head back to the voices to save some echoes that may interest you</p>
                                    <%  } %>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <script src="https://unpkg.com/wavesurfer.js"></script>
        <script src="https://unpkg.com/lottie-web@5.10.0/build/player/lottie.min.js"></script>
        <!-- Load Day.js and the plugin via CDN -->
        <script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>

        <script>
            const audioPosts = <%- JSON.stringify(savedAudios) %>; // This is now an array on the client
        </script>

       
<script>
    let activeWave = null; // track the currently playing WaveSurfer instance
    let activeBtn = null;  // keep track of which button belongs to active audio
  
    // Function to set up the audio visualizer
    function setupVisualizer(audioElement, canvas, waveInstance) {
      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
      const analyser = audioCtx.createAnalyser();
      const source = audioCtx.createMediaElementSource(audioElement);
      const ctx = canvas.getContext("2d");
  
      source.connect(analyser);
      analyser.connect(audioCtx.destination);
      analyser.fftSize = 256;
  
      const bufferLength = analyser.frequencyBinCount;
      const dataArray = new Uint8Array(bufferLength);
      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;
  
      const width = canvas.width;
      const height = canvas.height;
      const barWidth = width / bufferLength;
  
      function draw() {
        requestAnimationFrame(draw);
        analyser.getByteFrequencyData(dataArray);
        ctx.clearRect(0, 0, width, height);
  
        dataArray.forEach((value, i) => {
          const barHeight = (value / 255) * height;
          const hue = (i / bufferLength) * 360; // rainbow gradient
          ctx.fillStyle = `hsl(${hue}, 75%, 55%)`;
          ctx.shadowBlur = 20; // glow intensity
  ctx.shadowColor = `hsl(${hue}, 70%, 55%)`; // glow color same as bar
          ctx.fillRect(i * barWidth, height - barHeight, barWidth - 1, barHeight);
        });
      }
  
      const startDrawing = () => {
        audioCtx.resume();
        draw();
      };
  
      waveInstance.on("play", startDrawing);
    }
  
    // Initialize feeds audio players
    document.querySelectorAll(".waveform-wrapper").forEach(wrapper => {
      const postId = wrapper.querySelector(".wave-play-btn").dataset.id;
      const waveformElement = wrapper.querySelector(`#waveform-${postId}`);
      const canvas = document.getElementById(`visualizer-${postId}`);
      const audioPost = audioPosts.find(f => f.id == postId);
      const audioUrl = audioPost?.url;
  
      if (waveformElement && canvas && audioUrl) {
        const wave = WaveSurfer.create({
          container: waveformElement,
          waveColor: "#bbb",
          progressColor: "#7f5af0", // matches theme
          height: 40,
          responsive: true,
          barWidth: 2,
          barGap: 2,
          normalize: true
        });
  
        wave.load(audioUrl);
  
        const playBtn = document.querySelector(`.wave-play-btn[data-id='${postId}']`);
        if (playBtn) {
          playBtn.addEventListener("click", () => {
            // Stop previously active audio
            if (activeWave && activeWave !== wave) {
              activeWave.pause();
               if (activeBtn) {
                activeBtn.innerText = "‚ñ∂Ô∏è"; 
                activeBtn.classList.remove("playing")
               }
            }
            wave.playPause();
          });
  
          // Update button state
          wave.on("play", () => {
            activeWave = wave;
            activeBtn = playBtn;
            playBtn.innerText = "‚è∏Ô∏è";
            playBtn.classList.add("playing"); // üî• add pulsing effect
            canvas.classList.add("playing"); // üî• glow canvas too
          });
  
          wave.on("pause", () => {
    playBtn.innerText = "‚ñ∂Ô∏è";
    playBtn.classList.remove("playing"); // remove pulse
    canvas.classList.remove("playing");
  });
  
  wave.on("finish", () => {
    playBtn.innerText = "‚ñ∂Ô∏è";
    playBtn.classList.remove("playing"); // reset when done
    canvas.classList.remove("playing");
  });
          
        }
  
  
  
        // Hook up visualizer when audio ready
        wave.on("ready", () => {
          const audio = wave.media;
          setupVisualizer(audio, canvas, wave);
          waveformElement.classList.add("ready");
          canvas.classList.add("ready");
        });
      } else {
        console.warn("Missing waveform, canvas, or audio URL for post:", postId);
      }
    });
  </script>

        <center class="bottom-message" id="scrollEndMessage">
            <p>Reached the bottom. Scroll back to top </p>
        </center>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const scrollEndMessage = document.getElementById('scrollEndMessage');

                window.addEventListener('scroll', () => {
                    const scrollPosition = window.scrollY + window.innerHeight;
                    const pageHeight = document.body.offsetHeight;

                    if (scrollPosition >= pageHeight - 50) {
                        // User reached near bottom
                        scrollEndMessage.style.opacity = '1';
                        scrollEndMessage.style.zIndex = '100'
                    } else {
                        scrollEndMessage.style.opacity = '0';
                    }
                });
            });
        </script>
        <script>
            // ‚úÖ Restore bookmarks on page load
            window.addEventListener("DOMContentLoaded", () => {
                const saved = JSON.parse(localStorage.getItem("bookmarkedPosts") || "[]");

                document.querySelectorAll(".bookmark-btn").forEach((btn) => {
                    const postId = btn.getAttribute("data-id");
                    if (saved.includes(postId)) {
                        btn.classList.add("bookmarked");
                    }
                });
            });
        </script>


        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const cards = document.querySelectorAll('#secrets .card');

                const observer = new IntersectionObserver((entries, obs) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add('visible');
                            obs.unobserve(entry.target); // STOP observing after it becomes visible
                        }
                    });
                }, {
                    threshold: 0.5,
                    rootMargin: '-50px 0px -60px 0px'
                });

                cards.forEach(card => observer.observe(card));
            });

        </script>




        <script>
            function fetchComment(){
             fetch("/api/comment-counts")
             .then(res => res.json())
             .then(counts => {
               document.querySelectorAll(".comment-section").forEach(section => {
                 const id = section.dataset.postId;
                 const type = section.dataset.type;
                 const key = `${type}-${id}`;
                 const countEl = section.querySelector(".comment-count");
                 const count = counts[key];
                 if (countEl && countEl.textContent !== String(count ?? 0)) {
                   countEl.textContent = count ?? 0;
                 }
               });
             })
             .catch(err => console.error("Failed to fetch comment counts", err));
           }
        </script>
        
          <script>
            document.addEventListener("DOMContentLoaded", () => {
            fetchComment()
            });
          </script>
        
        
            <script>
                async function initEavedropStatus() {
                    try {
                        const eavedroppingIds = await fetch("/my-eavedrops").then(res => res.json());
                        eavedroppingIds.forEach(id => {
                            const eavedropBtn = document.querySelectorAll(`.listen[data-targetid="${id}"]`);
                            eavedropBtn.forEach(btn => {
                                btn.classList.add("listening");
                                btn.querySelector("span").textContent = "Resonating";
                                btn.querySelector("i").className = "fas fa-ear-listen";
                            });
                        });
                    } catch (err) {
                        console.error("Error loading eavedrop state", err);
                    }
                }
        
                document.addEventListener("DOMContentLoaded", initEavedropStatus);
        
            </script>
        
            <script>
                document.addEventListener("click", async (e) => {
                    const eavedropBtn = e.target.closest(".listen");
                    if (!eavedropBtn) return;
        
                    const span = eavedropBtn.querySelector("span");
                    const icon = eavedropBtn.querySelector("i");
                    const targetId = eavedropBtn.dataset.targetid;
        
                    eavedropBtn.disabled = true;
                    eavedropBtn.querySelector("i").innerHTML = `<div class="button-spinner"></div>`;
                    eavedropBtn.querySelector("i").className = ''
        
                    try {
                        const res = await fetch("/eavedrop", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ targetId }),
                        });
        
        
                        const data = await res.json();
        
                        const eavedropBtn = document.querySelector(`.listen[data-targetid="${targetId}"]`);
                        const sp = eavedropBtn.querySelector("span");
                        const ic = eavedropBtn.querySelector("i");
        
                        eavedropBtn.disabled = false;
                        eavedropBtn.querySelector("i").innerHTML = ``;
        
        
                        if (data.status === "added") {
                            eavedropBtn.classList.add("listening");
                            sp.textContent = "Resonating";
                            ic.className = "fas fa-ear-listen";
                        } else if (data.status === "removed") {
                            eavedropBtn.classList.remove("listening");
                            sp.textContent = "Resonate";
                            ic.className = "fas fa-ear-deaf";
                        }
                    } catch (err) {
                        console.error("Resonate failed", err);
                    }
                });
            </script>
        
        <script>
            function formatCount(num) {
            if (num >= 1_000_000_000) return (num / 1_000_000_000).toFixed(1).replace(/\.0$/, "") + "b";
            if (num >= 1_000_000) return (num / 1_000_000).toFixed(1).replace(/\.0$/, "") + "m";
            if (num >= 1_000) return (num / 1_000).toFixed(1).replace(/\.0$/, "") + "k";
            return num.toString();
          }
          
          </script>
        
        <script>
            document.querySelector("#real-secrets").addEventListener("click", async (e) => {
        
              if (e.target.closest(".reaction-btn")) {
                const button = e.target.closest(".reaction-btn")
        
                const animations = {
                  like: './img/lottie/like.json',
                  laugh: './img/lottie/laugh.json',
                  cry: './img/lottie/cry.json',
                  gasp: './img/lottie/gasp.json',
                  hot: './img/lottie/hot.json'
                };
        
        
                const btn = event.target.closest(".reaction-btn");
                const type = btn.getAttribute("data-type");
                const secretCard = btn.closest(".secret-card");
                const secretId = secretCard.getAttribute("data-id");
        
                const emojiChar = btn.querySelector(".reaction-icon")?.alt || btn.textContent.trim().split('\n')[0];
        
                const card = btn.closest('.secret');
                const isAudio = card.dataset.type === "audio";
                const endpoint = isAudio ? `/audio/${secretId}/react` : `/secret/${secretId}/react`;
        
                // const floatingContainer = card.querySelector('.floating-lottie');
                const floating = document.createElement('div');
                floating.className = 'floating-lottie-animated';
                card.appendChild(floating);
        
        
                // === 1. EMOJI BURST AROUND BUTTON ===
                triggerEmojiBurst(btn, emojiChar);
        
                // === 2. 3D EXTRAS AROUND BUTTON ===
                if (type === 'cry') {
                  const tear = document.createElement('span');
                  tear.className = 'emoji-particle';
                  tear.innerText = 'üíß';
                  tear.style.setProperty('--x', '0px');
                  tear.style.setProperty('--y', '50px');
                  button.appendChild(tear);
                  setTimeout(() => tear.remove(), 800);
                }
        
                if (type === 'gasp') {
                  const puff = document.createElement('span');
                  puff.className = 'emoji-particle';
                  puff.innerText = 'üí®';
                  puff.style.setProperty('--x', '-10px');
                  puff.style.setProperty('--y', '0px');
                  button.appendChild(puff);
                  setTimeout(() => puff.remove(), 800);
                }
        
        
                try {
                  const response = await fetch(endpoint, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ type }),
                  });
        
                  const data = await response.json();
        
                  const isHot = type === "hot";
        
                  const animation = lottie.loadAnimation({
                    container: floating,
                    renderer: 'svg',
                    loop: false,
                    autoplay: true,
                    path: animations[type]
                  });
        
                  // Get button to card offset
                  const buttonRect = button.getBoundingClientRect();
                  const cardRect = card.getBoundingClientRect();
        
                  const startX = buttonRect.left - cardRect.left + buttonRect.width / 2;
                  const startY = buttonRect.top - cardRect.top + buttonRect.height / 2;
        
                  floating.style.left = `${startX}px`;
                  floating.style.top = `${startY}px`;
        
                  if (isHot) {
                    floating.classList.add('no-spin');
                  } else {
        
                    // üéá TRAIL PARTICLES WHILE MOVING
                    const trailEmojis = ['‚ú®', 'üí•', 'üí®'];
                    let trailInterval = setInterval(() => {
        
                      const trail = document.createElement('span');
                      trail.className = 'trail-particle';
                      trail.innerText = trailEmojis[Math.floor(Math.random() * trailEmojis.length)];
        
                      // Offset from Lottie position
                      const offsetX = (Math.random() - 0.5) * 60;
                      const offsetY = (Math.random() - 0.5) * 60;
        
                      trail.style.left = `${floating.offsetLeft}px`;
                      trail.style.top = `${floating.offsetTop}px`;
                      trail.style.setProperty('--trail-x', `${offsetX}px`);
                      trail.style.setProperty('--trail-y', `${offsetY}px`);
        
                      card.appendChild(trail);
                      setTimeout(() => trail.remove(), 600);
                    }, 100);
        
                    // üéØ Animate to center
                    setTimeout(() => {
                      floating.classList.add('to-center');
                    }, 50);
        
                    // üëã Animate back and remove
                    setTimeout(() => {
                      floating.classList.remove('to-center');
                      floating.classList.add('to-button');
                      clearInterval(trailInterval);
                    }, 1200);
        
                    setTimeout(() => {
                      floating.remove();
                    }, 1800);
                  }
        
                  if (data.success) {
                    const countSpan = btn.querySelector(".reaction-count");
                    const newCount = data.reactions[type].count || 0;
                    animateCountBump(countSpan, newCount);
                    btn.classList.add("bounce");
                    setTimeout(() => btn.classList.remove("bounce"), 300);
        
                    // Use updated count from server
                  } else {
                    console.error("Failed to update reactions:", data.error);
                  }
                } catch (error) {
                  console.error("Error updating reactions:", error);
                }
        
                function animateCountBump(countSpan, newCount) {
                  const temp = document.createElement("span");
                  temp.className = "reaction-count";
                  temp.textContent = newCount;
                  temp.style.position = "absolute";
                  temp.style.transform = "translateY(100%)";
                  temp.style.transition = "transform 0.3s ease";
        
                  const wrapper = countSpan.parentElement;
                  wrapper.appendChild(temp);
        
                  requestAnimationFrame(() => {
                    countSpan.style.transform = "translateY(-100%)";
                    temp.style.transform = "translateY(0%)";
                  });
        
                  setTimeout(() => {
                    countSpan.remove();
                  }, 300);
                }
        
        
        
                function triggerEmojiBurst(container, emojiChar) {
                  const burstCount = 20;
        
                  for (let i = 0; i < burstCount; i++) {
                    const particle = document.createElement('span');
                    particle.classList.add('emoji-particle');
                    particle.innerText = emojiChar;
        
                    const angle = Math.random() * 2 * Math.PI;
                    const distance = Math.random() * 40 + 20;
                    const x = Math.cos(angle) * distance + 'px';
                    const y = Math.sin(angle) * distance + 'px';
        
                    particle.style.setProperty('--x', x);
                    particle.style.setProperty('--y', y);
        
                    container.appendChild(particle);
                    setTimeout(() => particle.remove(), 800);
                  }
        
                  container.classList.add('pop-animate');
                  setTimeout(() => container.classList.remove('pop-animate'), 300);
                }
              }
        
              if (e.target.closest(".card-toggle-btn")) {
                const button = e.target.closest(".card-toggle-btn")
                button.addEventListener("click", (e) => {
                  const menuContent = e.target.closest(".card-menu").querySelector(".card-menu-content");
                  const isVisible = menuContent.style.display === "block";
        
                  // Hide all others
                  document.querySelectorAll(".card-menu-content").forEach((menu) => {
                    menu.style.display = "none";
                  });
        
                  // Toggle this one
                  menuContent.style.display = isVisible ? "none" : "block";
        
                  e.stopPropagation(); // Prevent auto-close
                });
        
              }
        
              const shareBtn = e.target.closest(".share-btn");
        
              if (shareBtn) {
                const card = shareBtn.closest(".card");
                const username = "<%= username %>";
                const link = `https://gossipa.app/gist/abc123?ref=${encodeURIComponent(username)}`;
                const shareModal = card.querySelector(".share-modal")
        
                card.querySelector(".share-link").value = link;
                card.querySelector(".share-twitter").href =
                  `https://twitter.com/intent/tweet?text=${encodeURIComponent("Check out this gist on Gossipa! " + link)}`;
                card.querySelector(".share-whatsApp").href =
                  `https://wa.me/?text=${encodeURIComponent("üî• Check this gist: " + link)}`;
                card.querySelector(".share-snapchat").href =
                  `https://snapchat.com/scan?attachmentUrl=${encodeURIComponent("üî• Check this gist: " + link)}`
                card.querySelector(".share-messenger").href =
                  `fb-messenger://share?link=${encodeURIComponent(link)}`;
        
                shareModal.style.display = "flex";
              }
        
              const closeBtn = e.target.closest(".close-share-modal")
        
              if (closeBtn) {
                const card = closeBtn.closest(".card");
                const shareModal = card.querySelector(".share-modal")
                shareModal.style.display = "none";
              }
        
        
              const shareLink = e.target.closest(".copy-link");
        
              if (shareLink) {
                const notice = document.getElementById("notification")
                const card = shareLink.closest(".card");
                const input = card.querySelector(".share-link");
                input.select();
                document.execCommand("copy");
                const btn = card.querySelector(".copy-link");
                btn.textContent = "Copied ‚úÖ";
                btn.disabled = true;
                notice.innerHTML = `<div class="toast">Link copied! üéØ Now share it!</div>`;
                setTimeout(() => {
                  notice.innerHTML = ""
                  btn.textContent = "Copy"
                  btn.disabled = false;
        
                }, 2000);
              }
        
        
        
        
              const saveToLocal = (postId) => {
                const saved = JSON.parse(localStorage.getItem("bookmarkedPosts") || "[]");
                if (!saved.includes(postId)) {
                  saved.push(postId);
                  localStorage.setItem("bookmarkedPosts", JSON.stringify(saved));
                }
              };
        
              const removeFromLocal = (postId) => {
                let saved = JSON.parse(localStorage.getItem("bookmarkedPosts") || "[]");
                saved = saved.filter(id => id !== postId);
                localStorage.setItem("bookmarkedPosts", JSON.stringify(saved));
              };
        
        
        
              const bookmarkBtn = e.target.closest(".bookmark-btn")
        
              if (bookmarkBtn) {
                const postId = bookmarkBtn.getAttribute("data-id");
                const postType = bookmarkBtn.getAttribute("data-type");
                const notice = document.getElementById("notification");
        
                try {
                  const res = await fetch("/bookmark", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ postId, postType })
                  });
        
                  const data = await res.json();
                  if (data.success) {
        
                    bookmarkBtn.classList.add("bookmarked");
                    saveToLocal(postId);
        
                    if (notice) {
                      notice.innerHTML = `<div class="toast">${data.message}</div>`;
                      setTimeout(() => (notice.innerHTML = ""), 3000);
                    }
        
                  } else {
                    if (notice) {
                      notice.innerHTML = `<div class="toast">${data.message}</div>`;
                      setTimeout(() => (notice.innerHTML = ""), 3000);
                    }
                  }
                } catch {
                  if (notice) {
                    notice.innerHTML = `<div class="toast">Failed to bookmark. Try again later.</div>`;
                    setTimeout(() => (notice.innerHTML = ""), 3000);
                  }
                }
              }
        
        
              if (e.target.closest(".card-menu-content")) {
                e.stopPropagation();
              }
        
        
              if (e.target.closest(".report-btn")) {
                const btn = e.target.closest(".report-btn")
                const notice = document.getElementById("notification");
        
                e.stopPropagation(); // Prevent closing menu before prompt
        
                const secretId = e.target.closest(".report-btn").getAttribute('data-id');
                const reason = prompt('Why are you reporting this content?');
        
                if (reason) {
                  try {
                    const response = await fetch(`/report/secret/${secretId}`, {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ reason })
                    });
        
                    const data = await response.json();
                    if (data.success) {
                      if (notice) {
                        notice.innerHTML = `<div class="toast">Thank you for reporting. We will review it shortly.</div>`;
                        setTimeout(() => (notice.innerHTML = ""), 3000);
                      }
        
                      document.querySelectorAll(".card-menu-content").forEach((menu) => {
                        menu.style.display = "none";
                      });
                    } else {
                      if (notice) {
                        notice.innerHTML = `<div class="toast">Error reporting content</div>`;
                        setTimeout(() => (notice.innerHTML = ""), 3000);
                      }
                    }
                  } catch (error) {
                    console.error('Error reporting:', error);
                  }
                }
              }
        
              const deleteBtn = e.target.closest(".delete");
        
        if (deleteBtn) {
          e.preventDefault();
        
          const secretCard = deleteBtn.closest(".secret")
          const card = secretCard.querySelector(".card");
          const postIdEl = secretCard.querySelector("#secId") || secretCard.querySelector("#audioId");
          const postId = postIdEl ? postIdEl.value : null;
          const notice = document.getElementById("notification");
          
        
          const postType = secretCard.dataset.type;
          console.log(postType)
        let endpoint;
        if (postType === "text") {
          endpoint = "/delete";
        } else if (postType === "audio") {
          endpoint = "/audio-delete";
        } else {
          console.error("Unknown post type:", postType);
          return;
        }
        
        
          if (confirm("Are you sure you want to delete this gist?")) {
            try {
        
              const response = await fetch(endpoint, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ postId })
              });
        
              const data = await response.json();
        
              console.log(data)
        
              if (data.success) {
                if (notice) {
                  notice.innerHTML = data.message;
                  setTimeout(() => (notice.innerHTML = ""), 3000);
                }
                secretCard.remove()
              } else {
                if (notice) {
                  notice.innerHTML = data.error;
                  setTimeout(() => (notice.innerHTML = ""), 3000);
                }
              }
            } catch (error) {
              console.error('Error deleting gist', error);
            }
          } else {
            e.preventDefault();
          }
        
        }
        
        
              if (e.target.closest(".read")) {
                const button = e.target.closest(".read")
        
                const contentSpan = e.target.previousElementSibling;
                const isTruncated = e.target.textContent === "Read More";
        
                if (isTruncated) {
                  // Show full content
                  contentSpan.textContent = e.target.dataset.full;
                  e.target.textContent = "See Less";
                } else {
                  // Reapply truncated content
                  contentSpan.textContent = e.target.dataset.truncated;
                  e.target.textContent = "Read More";
                }
        
              }
            })
        
        
        
            // Hide all menus on body click
            document.addEventListener("click", () => {
              document.querySelectorAll(".card-menu-content").forEach((menu) => {
                menu.style.display = "none";
              });
            });
          </script>
        
        <script>
                
            window.currentUserId = "<%= userId %>";
           window.socket = io({ query: { userId: window.currentUserId } });
         
                   socket.on("comment-updated", (data) => {
             const { postId, type, totalComments } = data;
             const section = document.querySelector(`.comment-section[data-post-id="${postId}"][data-type="${type}"]`);
             
             if (section) {
               const countEl = section.querySelector(".comment-count");
               if (countEl && countEl.textContent !== String(totalComments)) {
                 countEl.textContent = totalComments;
               }
             }
           });
               </script>
         
         
               <script>
                 document.addEventListener("DOMContentLoaded", () => {
                   const parent = document.querySelector("#real-secrets");
         
                   // Bubble for clicks (toggle comment dropdown + translate)
                   parent.addEventListener("click", async (e) => {
                     // Toggle comment dropdown
                     if (e.target.closest("#commentButton")) {
                        const section = e.target.closest(".comment-section");
        const postType = section.closest(".secret").dataset.type;
        const postId = section.querySelector("#secretId")?.value || section.querySelector("#audioId")?.value;
        const dropdown = section.querySelector(".comment-dropdown");

        const display = section.querySelector(".comment-display");
        const commentList = display.querySelector(".comments-list");
        const totalcomments = display.querySelector("total");
        const count = section.querySelector(".comment-count");

        dropdown.classList.toggle("active");

        if (dropdown.classList.contains("active")) {
          // üëâ Show shimmer while fetching
          commentList.innerHTML = `
      <ul class="shimmer-comments">
        ${Array(3).fill(0).map(() => `
          <li class="comment-item shimmer-bubble">
            <div class="avatar shimmer-circle"></div>
            <div class="bubble shimmer-rect"></div>
          </li>
        `).join("")}
      </ul>
    `;


          try {
            const commentsRes = await fetch(`/comment/${postType}/${postId}`);
            const data = await commentsRes.json();
            const comments = data.comments || [];

            const commentHead = data.totalComments > 0
              ? `<p class="total">All comments: <span class="total-count">${data.totalComments} </span></p>`
              : `<p class="total">Share your thought</p>`;

              display.querySelector(".total")?.remove();
              display.insertAdjacentHTML("afterbegin", commentHead);
           
             commentList.innerHTML = comments.map(comment =>
              `
        <li class="comment-item">
            <img src="${comment.profile_picture}" class="profile-pic thumb"/>
            <div>
            <small class="user">
              <strong>${comment.stealth_mode ? '@voice' + comment.user_id : comment.username}</strong>
              </small>
            <p class="comment">${comment.comment}</p>
            <button type="button" class="translate-btn" data-id="${comment.id}" data-text="${comment.comment}">Translate to english</button>
          <p class="translated-text" id="translated-${postId}-${comment.id}"></p>
          </div>
        </li>
      `).join("");

      // display.innerHTML = commentHead + commentList
            count.textContent = data.totalComments;
          } catch (err) {
            console.error("Error loading comments:", err);
            display.innerHTML = `<p class="total">Failed to load comments</p>`;
          }

        }

         
                       const icon = section.querySelector("#commentButton i");
                       icon.className = dropdown.classList.contains("active")
                         ? "fas fa-comment-slash"
                         : "fas fa-comment";
                     }
         
                     // Handle Translate Button
                     if (e.target.classList.contains("translate-btn")) {
                       const btn = e.target;
                       const section = btn.closest(".comment-section");
                       const postId = section.dataset.postId;
                       const text = btn.dataset.text;
                       const id = btn.dataset.id;
                       const output = section.querySelector(`#translated-${postId}-${id}`);
         
                       output.innerText = "Translating...";
         
                       try {
                         const res = await fetch("/translate", {
                           method: "POST",
                           headers: { "Content-Type": "application/json" },
                           body: JSON.stringify({ text, targetLang: "en" }),
                         });
                         const result = await res.json();
                         output.innerText = result.translated || "Translation failed.";
                       } catch (err) {
                         output.innerText = "Error translating comment.";
                       }
                     }
                   });
         
                   // Bubble for comment form submission
                   parent.addEventListener("submit", async (e) => {
                     if (e.target.closest("#comment-form")) {
                       e.preventDefault();
                       const form = e.target;
                       const section = form.closest(".comment-section");
                       const postType = section.closest(".secret").dataset.type;
                       const postId = section.querySelector("#secretId")?.value || section.querySelector("#audioId")?.value;
         
                       const secretUserId = form.querySelector('[name="secretUserId"]').value;
                       const commentUserId = form.querySelector('[name="commentUserId"]').value;
                       const commentInput = form.querySelector("#commentInput").value;
         
                       const display = section.querySelector(".comment-display");
                       const commentList = display.querySelector(".comments-list");
                       const totalPgrh = section.querySelector(".total")
                       const count = section.querySelector(".comment-count");
                       const notice = document.getElementById("notification")
         
                       try {
                         const res = await fetch(`/comment/${postType}`, {
                           method: "POST",
                           headers: { "Content-Type": "application/json" },
                           body: JSON.stringify({
                             id: postId,
                             secretUserId,
                             commentUserId,
                             comment: commentInput
                           }),
                         });
         
                         const result = await res.json();
         
                         if (result.success) {
                           const commentsRes = await fetch(`/comment/${postType}/${postId}`);
                           const data = await commentsRes.json();
                           const comments = data.comments || [];
         
                           const commentHead = `<p class="total">All comments: <span class="total-count">${data.totalComments}</span></p>`;
         
                           display.querySelector(".total")?.remove();
                       display.insertAdjacentHTML("afterbegin", commentHead);
         
                           commentList.innerHTML += comments.map(comment => `
                   <li class="comment-item">
                     <img src="${comment.profile_picture}" class="profile-pic thumb"/>
                     <div>
                     <small class="user">
                       <strong>${comment.stealth_mode ? '@voice' + comment.user_id : comment.username }</strong>
                       </small>
                     <p class="comment">${comment.comment}</p>
                     <button type="button" class="translate-btn" data-id="${comment.id}" data-text="${comment.comment}">Translate to english</button>
                     <p class="translated-text" id="translated-${postId}-${comment.id}"></p>
                   </div>
                   </li>
                 `).join("");
         
                           count.textContent = data.totalComments;
                           form.querySelector("#commentInput").value = "";
         
         
         
           socket.on("comment-updated", (data) => {
             const { postId, type, totalComments } = data;
             const section = document.querySelector(`.comment-section[data-post-id="${postId}"][data-type="${type}"]`);
             
             if (section) {
               const countEl = section.querySelector(".comment-count");
               const commentTotal = section.querySelector(".total-count")
               if (countEl && countEl.textContent !== String(totalComments)) {
                 countEl.textContent = totalComments;
                 commentTotal.textContent = totalComments;
               }
             }
           });
         
           socket.on("new-comment", (comment) => {
           const { postId, type, username, stealthMode, profilePicture, user_id, comment: text, id } = comment;
           const section = document.querySelector(`.comment-section[data-post-id="${postId}"][data-type="${type}"]`);
           const display = section?.querySelector(".comment-display");
           const commentList = display.querySelector(".comments-list");
         
         
           if (display && section.querySelector(".comment-dropdown").classList.contains("active")) {
         
             const li = document.createElement("li");
         li.classList.add("comment-item");
             li.innerHTML= `
                 <img src="${comment.profilePicture}" class="profile-pic thumb"/>
                 <div>
                   <small class="user">
                     ${comment.stealth_mode ? '@voice' + comment.user_id : comment.username}
                     </small>
                   <p class="comment">${text}</p>
                 <button type="button" class="translate-btn" data-id="${id}" data-text="${text}">Translate to english</button>
                 <p class="translated-text" id="translated-${postId}-${id}"></p>
                 </div>
             `;
         
             commentList.prepend(li); // ‚úÖ prepend to top
           }
         });
         
                         } else {
                           if (notice) {
                             notice.innerHTML = `<div class="toast">${result.message}</div>`;
                             setTimeout(() => (notice.innerHTML = ""), 3000);
                           }
                         }
                       } catch (err) {
                         console.error(err);
                         if (notice) {
                           notice.innerHTML = `<div class="toast">Error posting comment</div>`;
                           setTimeout(() => (notice.innerHTML = ""), 3000);
                         }
                       }
                     }
                   });
                 });
               </script>
         

    </section>
    <aside class="right-sidebar">
<div id="aside">

        <div class="premium-aside">
            <div class="premium-card">
                <div class="crown-icon sparkle">üëë</div>

                <h3 class="premium-title">Become a Chief Gossipa</h3>
                <p class="premium-text">Stand out in the World of anonymity. Get Heard. Remain Unknown.</p>

                <div class="trending-stats">
                    <span>üî• Trending Now: <strong>152</strong> Gissipas</span>
                </div>

                <div class="avatar-hint">
                    <img src="/img/avatars/thumbs/dog.jpg" alt="Anonymous" class="blur-avatar" />
                    <p>You‚Äôre 1 step from <strong>trending</strong>‚Ä¶</p>
                </div>

                <a href="/subscribe" class="premium-btn">Unlock Exclusive</a>
            </div>
        </div>

        <div class="aside">
            <center>
                <h4 class="user-count"><button class="dot active animate-ping-once" data-slide="0"></button>&nbsp;Meet
                    The
                    Chiefs
                    :<span id="activeCount">0</span></h4>
            </center>
            <ul class="nav user-list">
            </ul>

        </div>

        <div class="inpage-footer">
          <span>Privacy Policy</span>&nbsp;.
          &nbsp;<span>Terms of use</span> &nbsp;.
          &nbsp;<span>Community guidelines</span> &nbsp;.
          <br><br>
          &nbsp;<span>&copy; <%= new Date().getFullYear() %>, &commat;<span class="text-gradient">Echoes</span> Co. All
              rights reserved</span>
          <span class="motto">Motto: <span class="motto-content">"Your privacy is our priority."</span></span>
        </div>
    </div>
    </aside>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const connectedUsersMap = new Map();
            const userList = document.querySelector(".user-list");
            const userCountDisplay = document.getElementById("activeCount");

            function updateUserCount() {
                if (userCountDisplay) userCountDisplay.textContent = connectedUsersMap.size;
            }

            function userConnected(user) {
                if (connectedUsersMap.has(user.id)) return;

                const userBox = document.createElement("li");
                userBox.className = "connected-user nav-item enter";
                userBox.id = `user-${user.id}`;

                const verifiedBadge = user.verified
                    ? `<img oncontextmenu="return false;" src="/img/gossipa3.png" alt="Verified Badge" class="verified-badge">`
                    : "";

                userBox.innerHTML = `
                  <div class="user-card" style="display: flex; align-items: center; gap: 10px;">
                    <img oncontextmenu="return false;" src="${user.profile_picture}" alt="Avatar" class="profile-pic" style="width: 32px; height: 32px; border-radius: 50%;">
                    <p class="username">
                      <span class="user">@voice${user.id}</span>
                      ${verifiedBadge}
                    </p>
                  </div>
                `;

                userList?.appendChild(userBox);
                connectedUsersMap.set(user.id, userBox);
                updateUserCount();

                requestAnimationFrame(() => userBox.classList.add("enter"));
            }

            function userDisconnected(userId) {
                const userBox = connectedUsersMap.get(userId);
                if (userBox) {
                    userBox.classList.add("exit");
                    userBox.classList.remove("enter");
                    setTimeout(() => {
                        userBox.remove();
                        connectedUsersMap.delete(userId);
                        updateUserCount();
                    }, 400);
                }
            }

            if (window.socket) {
                window.socket.on("userJoined", async (userId) => {
                    try {
                        const res = await fetch(`/user/${userId}`);
                        const user = await res.json();
                        userConnected(user);
                    } catch (err) {
                        console.error("Failed to fetch user data:", err);
                    }
                });

                window.socket.on("userLeft", (userId) => {
                    userDisconnected(userId);
                });
            } else {
                console.warn("Socket.io not initialized on this page.");
            }

            // Load currently active users
            fetch("/active-users")
                .then(res => res.json())
                .then(users => users.forEach(userConnected))
                .catch(console.error);
        });
    </script>


    <script>
        dayjs.extend(window.dayjs_plugin_relativeTime);

        document.querySelectorAll('.timestamp').forEach((timeElem) => {
            const rawTimestamp = timeElem.getAttribute('data-raw');
            if (rawTimestamp) {
                const formatted = dayjs(rawTimestamp).fromNow();
                timeElem.textContent = formatted;
            }
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Simulate a short loading delay (optional)
            setTimeout(() => {
                // Hide shimmer placeholder
                document.querySelectorAll(".shimmer-container").forEach(shimmer => {
                    shimmer.style.display = "none";
                })
                // Show real secrets
                document.getElementById("real-secrets").style.display = "block";
            }, 1000); // 1s delay ‚Äì tweak as needed
        });
    </script>

</div>

<script src="js/app.js"></script>