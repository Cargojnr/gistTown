<%- include('layout') %>
  <style>
    #tutorial-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      z-index: 99;
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
      visibility: visible;
      opacity: 1;
      pointer-events: auto;
      margin: auto;
      /* Enable interactions */
    }


    /* Tutorial container: Show without opacity transitions */
    #tutorial-container {
      opacity: 1;
      /* Ensure it's visible immediately */
      pointer-events: auto;
      /* Allow interactions */
    }

    /* Remove the transition on tutorial step */
    .tutorial-step {
      font-family: "Gloria Hallelujah", cursive;
      opacity: 1;
      /* Make sure it's visible immediately */
      color: #fff;
    }

    /* Tutorial Step: No transition, just show it directly */
    .tutorial-step.hidden {
      opacity: 0;
    }

    .highlight {
      border: 3px solid #ffdd00;
      /* Yellow highlight */
      box-shadow: 0 0 10px rgba(255, 221, 0, 0.7);
      /* Glowing effect */
    }


    button.skip-btn {
      background: #ff4444;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 10px 15px;
      cursor: pointer;
      margin-top: 10px;
    }

    button#next-step {
      padding: 10px 20px;
      font-size: 18px;
      background: linear-gradient(90deg, #ffcc00, #ff9900);
      border: none;
      border-radius: 10px;
      color: #222;
      cursor: pointer;
      margin: 10px;
      transition: transform 0.3s ease-in-out;
    }

    button.skip-btn:hover {
      background: #ff2222;
    }



    #tutorial-overlay.hidden {
      display: none;
    }

    #progress-bar-container {
      width: 100%;
      background-color: #e0e0e0;
      border-radius: 5px;
      margin: 10px auto;
    }

    #progress-bar {
      width: 0%;
      height: 5px;
      /* background-color: #76c7c0; */
      background: var(--primary-color);
      border-radius: 5px;
      transition: width 0.3s;
    }

    .highlight {
      border: 3px solid #ffdd00;
      /* Yellow highlight */
      box-shadow: 0 0 10px rgba(255, 221, 0, 0.7);
      /* Glowing effect */
    }

    .tooltip {
      position: absolute;
      /* bottom: 5rem; */
      /* z-index: 100; */
      background-color: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 5px 10px;
      border-radius: 5px;
      font-size: 12px;
      visibility: hidden;
      opacity: 0;
      transition: opacity 0.3s ease-in-out;
    }

    /* Show Tooltip on Hover */
    .tooltip.show {
      visibility: visible;
      opacity: 1;
    }


    /* Mobile responsiveness */
    @media (max-width: 768px) {
      .modal-content {
        width: 100%;
        height: 100%;
        max-width: none;
        border-radius: 0;
      }
    }

    #brand-logo-container {
      animation: fadeIn 0.7s ease-in-out;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }

      to {
        opacity: 1;
      }
    }

    .shimmer-container {
      margin-top: 1rem;
    }

    .shimmer-wrapper {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      /* padding: 1rem; */
    }

    .shimmer-card {
      display: flex;
      background: var(--container-bg);
      border-radius: 10px;
      overflow: hidden;
      animation: pulse 1.5s infinite;
    }

    .shimmer-avatar {
      width: 50px;
      height: 50px;
      background: var(--body-bg);
      border-radius: 50%;
      margin: 1rem;
    }



    .shimmer-lines {
      flex: 1;
      padding: 1rem 0;
    }

    .shimmer-line {
      height: 10px;
      background: var(--body-bg);
      margin: 8px 0;
      border-radius: 5px;
    }

    .shimmer-line.short {
      width: 50%;
    }

    .shimmer-footer {
      display: flex;
      gap: 1rem;
      margin-top: 1rem;
    }

    .shimmer-btn {
      width: 40px;
      height: 20px;
      background: var(--body-bg);
      border-radius: 5px;
    }

    @keyframes pulse {
      0% {
        background-color: var(--container-bg);
      }

      50% {
        background-color: var(--body-bg);
      }

      100% {
        background-color: var(--container-bg);
      }
    }

    .shimmer {
      background: linear-gradient(90deg, var(--container-bg) 25%, var(--body-bg) 50%, var(--container-bg) 75%);
      background-size: 200% 100%;
      animation: shimmer 1.5s infinite;
    }

    @keyframes shimmer {
      0% {
        background-position: -200% 0;
      }

      100% {
        background-position: 200% 0;
      }
    }


    .sections-container {
      padding: 2rem;
      background: var(--card-bg);
      border-radius: 20px;
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
      margin-top: 2rem;
      animation: fadeIn 0.6s ease-in;
    }

    .sections-title {
      font-size: 1.75rem;
      margin-bottom: 0.25rem;
    }

    .sections-subtext {
      font-size: 1rem;
      color: var(--text-muted);
      margin-bottom: 1.5rem;
      text-align: center;
    }

    .sections-scroll {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(230px, 1fr));
      gap: 1.25rem;
    }

    .section-card {
      background: var(--glass-bg);
      border-radius: 16px;
      padding: 1.25rem;
      text-align: center;
      transition: transform 0.2s ease, box-shadow 0.3s ease;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      color: var(--text-primary);
    }

    .section-card:hover {
      transform: translateY(-6px);
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
      background: var(--highlight-bg);
    }

    .icon-circle {
      background: var(--primary-faded);
      width: 60px;
      height: 60px;
      border-radius: 50%;
      margin: 0 auto 1rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }


    /* Glass Card Base */
    .glass-card {
      background: var(--glass);
      border-radius: 20px;
      backdrop-filter: var(--blur);
      -webkit-backdrop-filter: var(--blur);
      border: 1px solid rgba(255, 255, 255, 0.1);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
      padding: 1.5rem;
      margin-bottom: 2rem;
      animation: fadeInUp 0.5s ease;
    }

    /* Profile Header */
    .profile-header {
      display: flex;
      gap: 1rem;
      align-items: center;
      flex-wrap: wrap;
      background: var(--container-bg);
      padding: 1rem;
      border-radius: 30px;
    }

    #pinned-secret {
      width: 100% !important;
    }

    .pin-card .card {
      padding: .5rem !important;
    }

    .avatar-profile img:hover {
      transform: scale(1.05);
    }

    .profile-info h2 {
      margin: 0;
      font-size: 1.8rem;
    }

    .profile-info .tagline {
      color: var(--text-muted);
      font-style: italic;
      margin-bottom: 1rem;
    }

    .quick-stats {
      display: flex;
      gap: 1.5rem;
      margin: 1rem 0;
    }

    .stat {
      text-align: center;
    }

    .stat strong {
      font-size: 1.2rem;
      color: var(--primary);
    }

    /* Buttons */
    .edit-profile-btn,
    .edit,
    .delete,
    .read-more,
    .edit-comment,
    .delete-comment {
      background: var(--primary);
      color: var(--text);
      border: none;
      border-radius: 8px;
      padding: 0.5rem 1rem;
      margin-top: 0.5rem;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .edit-profile-btn:hover,
    .read-more:hover,
    .edit-comment:hover,
    .delete-comment:hover {
      background: var(--secondary);
    }


    .card-actions {
      margin-top: 1rem;
      display: flex;
      gap: 0.5rem;
    }

    .card-actions button {
      font-size: 0.9rem;
    }

    /* Reactions */
    .reaction-info,
    .reaction-counters {
      margin-top: 1rem;
      display: flex;
      gap: 1rem;
      font-size: 1.1rem;
    }

    .reaction-counters .counter {
      background: var(--highlight);
      padding: 0.5rem 1rem;
      border-radius: 12px;
    }


    /* Followers */
    .follow-stats {
      display: flex;
      gap: 2rem;
      font-size: 1rem;
    }

    .followers,
    .following {
      background: var(--highlight);
      padding: 0.75rem 1.25rem;
      border-radius: 10px;
    }

    /* Animations */
    @keyframes fadeInUp {
      0% {
        transform: translateY(16px);
        opacity: 0;
      }

      100% {
        transform: translateY(0);
        opacity: 1;
      }
    }

    /* Responsive */
    @media (max-width: 768px) {
      .profile-header {
        flex-direction: column;
        align-items: flex-start;
      }

      .sections-scroll {
        flex-direction: column;
      }
    }

    @media (max-width: 768px) {
      .stack-wrapper {
        position: relative;
        height: 420px;
        /* Adjust height as needed */
        overflow: hidden;
      }

      .section-card.sand {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        opacity: 0;
        pointer-events: none;
        transform: scale(0.95) translateY(20px);
        transition: all 0.4s ease;
        z-index: 0;
      }

      .section-card.sand.active {
        opacity: 1;
        pointer-events: auto;
        transform: scale(1) translateY(0);
        z-index: 10;
        box-shadow: 0 12px 20px rgba(0, 0, 0, 0.2);
      }

      .stack-indicator {
        text-align: center;
        margin-top: 10px;
      }

      .stack-next-btn {
        background: #333;
        color: white;
        padding: 6px 18px;
        border: none;
        border-radius: 999px;
        font-size: 0.9rem;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
      }
    }

    .badge {
      background: #444;
      color: #ffd54f;
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 0.75rem;
      text-transform: capitalize;
    }

    /* Live Stream Bar */
    #live-stream-bar {
      display: flex;
      overflow-x: auto;
      padding: 5px 2px;
      gap: 12px;
      /* background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); */
      border-radius: 0 0 18px 18px;
      position: sticky;
      top: 0;
      z-index: 10;
      margin-top: 1.2rem;
    }

    #live-stream-bar::-webkit-scrollbar {
      display: none;
    }

    /* Sticky Start Button */
    #startStreamBtn {
      flex: 0 0 auto;
      min-width: 110px;
      height: 150px;
      position: sticky;
      left: 0;
      background: linear-gradient(135deg, #ec4899, #8b5cf6);
      color: white;
      border-radius: 20px;
      font-weight: 600;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      border: none;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      z-index: 10;
      cursor: pointer;
    }

    #startStreamBtn:hover {
      transform: scale(1.05);
    }

    .streaming {
      animation: glow 1.5s infinite;
      border-radius: 20px;
    }

    @keyframes glow {
      0% {
        box-shadow: 0 0 5px var(--secondary-color), 0 0 10px var(--primary-color), 0 0 15px var(--secondary-color);
      }

      50% {
        box-shadow: 0 0 10px var(--secondary-color), 0 0 15px var(--primary-color), 0 0 20px var(--secondary-color);
      }

      100% {
        box-shadow: 0 0 5px var(--secondary-color), 0 0 10px, var(--primary-color), 0 0 15px var(--secondary-color);
      }
    }

    /* Live Stream Cards */
    .live-stream-scroll {
      display: flex;
      gap: 12px;
    }

    .stream-card {
      flex: 0 0 auto;
      min-width: 100px;
      max-width: 110px;
      height: 150px;
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      border-radius: 18px;
      padding: 10px;
      position: relative;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      cursor: pointer;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
      transition: all 0.2s ease;
      border: 2px solid transparent;
    }

    .stream-card.active {
      border: 2px solid #8b5cf6;
      /* background: linear-gradient(145deg, #f3e8ff, #fdf4ff); */
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    }


    .stream-card:hover {
      transform: scale(1.05);
    }

    .stream-card.ended {
      opacity: 0.7;
      /* pointer-events: none; */
    }


    .gist-snippet {
      font-size: 13px;
      color: #333;
      font-weight: 500;
      overflow: hidden;
      text-overflow: ellipsis;
      max-height: 80px;
      line-height: 1.4;
    }

    .stream-avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      position: absolute;
      bottom: 8px;
      right: 8px;
      border: 2px solid #fff;
    }

    /* Modal Overlay */
    #streamModal {
      position: fixed;
      inset: 0;
      background: rgba(0, 0, 0, 0.6);
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 200;
    }

    .hidden {
      display: none !important;
    }


    .modal-content h2 {
      margin-bottom: 8px;
    }

    #listenerCount {
      font-size: 14px;
      color: #555;
      margin-bottom: 10px;
    }

    .gist-input-wrapper {
      margin-bottom: 16px;
    }

    #liveGistInput {
      width: 100%;
      height: 70% !important;
      padding: 12px;
      font-size: 16px;
      border-radius: 12px;
      border: 1px solid #ccc;
      resize: none;
    }

    .reaction-footer {
      display: flex;
      align-items: center;
      justify-content: space-between;
      font-size: 14px;
      margin-top: 12px;
    }

    #reactionCount {
      font-weight: bold;
      color: #ec4899;
    }


    #streamDisplay {
      position: fixed;
      inset: 0;
      background: rgba(0, 0, 0, 0.4);
      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 300;
      animation: fadeIn 0.3s ease;
    }

    .stream-box {
      background: var(--container-bg);
      border-radius: 20px;
      width: 90%;
      max-width: 500px;
      padding: 20px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
      display: flex;
      flex-direction: column;
      gap: 12px;
      animation: popIn 0.3s ease;
    }

    .stream-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      font-weight: 600;
      font-size: 16px;
      color: #8b5cf6;
    }

    .user {
      margin-bottom: 0;
    }

    .stream-body {
      background: var(--body-bg);
      border-radius: 12px;
      padding: 16px;
      font-size: 15px;
      line-height: 1.6;
      white-space: pre-wrap;
      color: var(--text-muted);
      max-height: 200px;
      overflow-y: auto;
    }

    .stream-footer {
      display: flex;
      justify-content: space-between;
      font-size: 14px;
      color: #666;
    }


    .listeners {
      display: flex;
      align-items: center;
      gap: .5rem;
    }

    @keyframes popIn {
      from {
        transform: scale(0.96);
        opacity: 0;
      }

      to {
        transform: scale(1);
        opacity: 1;
      }
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }

      to {
        opacity: 1;
      }
    }



    .listener-avatar {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      margin-right: 5px;
      border: 2px solid white;
      animation: popIn 0.4s ease;
      transform: scale(0.5);
      transition: transform 0.3s ease, opacity 0.5s ease;
    }

    .listener-avatar.pop-in {
      transform: scale(1);
      opacity: 1;
    }

    .listener-avatar.fade-out {
      opacity: 0;
      transform: scale(0.5);
    }

    #listenerCount {
      margin: 0 !important;
    }


    @keyframes popIn {
      from {
        transform: scale(0.5);
        opacity: 0;
      }

      to {
        transform: scale(1);
        opacity: 1;
      }
    }

    #floatingReactions {
      position: absolute;
      bottom: 100px;
      left: 50%;
      transform: translateX(-50%);
      pointer-events: none;
    }

    .floating-reaction {
      position: absolute;
      font-size: 24px;
      animation: floatUp 1.5s ease forwards;
    }

    @keyframes floatUp {
      0% {
        transform: translateY(0) scale(1);
        opacity: 1;
      }

      100% {
        transform: translateY(-150px) scale(1.4);
        opacity: 0;
      }
    }


    .stream-ended-label {
      font-size: 0.9rem;
      color: #888;
      margin-bottom: 0.5rem;
      font-style: italic;
    }

    .typed-stream {
      /* font-family: 'Courier New', monospace; */
      white-space: pre-wrap;
      font-size: 0.95rem;
      font-weight: 500;
      line-height: 1.6;
      padding: 10px;
      animation: fadeIn 0.3s ease-in;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(4px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .fade-in {
      opacity: 0;
      animation: fadeIn 0.4s ease forwards;
    }

    .fade-out {
      opacity: 1;
      animation: fadeOut 0.4s ease forwards;
    }

    @keyframes fadeIn {
      to {
        opacity: 1;
      }
    }

    @keyframes fadeOut {
      to {
        opacity: 0;
        pointer-events: none;
      }
    }

    .hide {
      display: none !important;
    }

    #endStreamModal.visible {
      display: flex;
      animation: popIn 0.3s ease;
    }

    @keyframes popIn {
      from {
        transform: scale(0.9);
        opacity: 0;
      }

      to {
        transform: scale(1);
        opacity: 1;
      }
    }

    .gossipa-toast {
      position: fixed;
      bottom: 2rem;
      left: 50%;
      transform: translateX(-50%);
      background: #222;
      color: #fff;
      padding: 0.75rem 1.5rem;
      border-radius: 12px;
      z-index: 1000;
      animation: fadeIn 0.3s ease;
    }

    #postContainer {
      padding: .75rem 1rem;
      position: relative;
      width: 100%;
      height: 150px;
      border: 3px solid var(--primary-color);
      background: var(--container-bg);
      border-radius: 30px !important;
    }

    #postContainer textarea {
      padding: 1rem;
      width: 100%;
      height: 95px !important;
      overflow: hidden;
      outline: none;
      border: none;
      color: var(--text-color);
      background: var(--container-bg);
      font-size: 1rem;
      border-radius: 30px !important;
    }

    #postContainer .submit {
      position: absolute;
      right: -1%;
      bottom: -5%;
      border: none;
      background: transparent;
      color: var(--secondary-color);
      padding: .75rem 1rem;
      font-size: 2.75rem !important;
    }


    .actions button {
      color: var(--text-color);
      background: none;
      border: none;
      font-size: 1.2rem;

    }


    .ghost-hint {
      color: var(--glass-bg);
      font-size: 0.8em;
      display: block;
      font-style: italic;
      opacity: 0;
      transform: translateY(5px);
      transition: opacity 0.4s ease, transform 0.4s ease;
    }

    .ghost-hint.visible {
      opacity: 1;
      transform: translateY(0);
    }

    /* Initial hidden state */
    .hidden {
      display: none;
      opacity: 0;
  pointer-events: none;
      transform: translateY(10px);
      transition: opacity 0.3s ease, transform 0.3s ease;
    }

    /* Active visible state */
    .visible {
      display: block;
      opacity: 1;
      transform: translateY(0);
    }

    /* Optional container fade if needed */
    .form-transition-container {
      position: relative;
      min-height: 200px;
    }

    .scroll-indicator {
  position: fixed;
  bottom: 2rem;
  left: 50%;
  transform: translateX(-50%);
  display: none;
  flex-direction: column;
  align-items: center;
  font-size: .9rem;
  color: var(--muted-foreground);
  animation: fadeInUp 1.2s ease-out forwards;
}

.scroll-indicator svg {
  color: var(--secondary-color);
  animation: bounce 1.5s infinite ease-in-out;
}

@media (min-width: 1024px) {
  .scroll-indicator {
    display: flex;
  }
}

@keyframes bounce {
  0%, 100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(10px);
  }
}

.toast {
  background: var(--primary-faded);
  color: var(--text-color);
  padding: 12px 20px;
  border-radius: 8px;
  margin: auto;
  max-width: 300px;
  text-align: center;
  box-shadow: 0 4px 14px rgba(0,0,0,0.1);
  animation: fadein 0.3s ease, fadeout 0.3s ease 2.5s;
}

@keyframes fadein {
  from { opacity: 0; transform: translateY(-10px); }
  to { opacity: 1; transform: translateY(0); }
}
@keyframes fadeout {
  from { opacity: 1; transform: translateY(0); }
  to { opacity: 0; transform: translateY(-10px); }
}

  </style>

  <body>

    <div id="brand-logo-container">
      <div id="brand-animation" style="width: 150px; height: 150px;"></div>
    </div>



    <script>
      let lottiePlayer = null;

      window.addEventListener("load", function () {
        window.scrollTo({ top: 0, behavior: "smooth" });
        hideBrandLogo();
      });

      window.addEventListener("beforeunload", function (e) {
        showBrandLogo();
      });

      function showBrandLogo() {
        const container = document.getElementById("brand-logo-container");
        const animContainer = document.getElementById("brand-animation");

        container.style.display = "flex";
        container.style.background = "var(--container-bg)";

        if (!lottiePlayer) {
          lottiePlayer = lottie.loadAnimation({
            container: animContainer,
            renderer: "svg",
            loop: true,
            autoplay: true,
            path: "img/lottie/brandlogo.json", // <-- put your lottie JSON file path here
          });
        } else {
          lottiePlayer.goToAndPlay(0);
        }

      }

      function hideBrandLogo() {
        const container = document.getElementById("brand-logo-container");
        container.style.display = "none";
      }

      document.addEventListener("visibilitychange", () => {
        if (document.visibilityState === "hidden") {
          showBrandLogo();
        } else {
          hideBrandLogo();
        }
      });

    </script>

    <div class="layout-container container">

      <aside class="left-sidebar">
        <div class="aside">
          <ul class="nav">
            <li class="nav-item current">
              <a href="/feeds">
                <i class="nav-icon fas fa-home"></i> &nbsp;
                <span class="nav-text">Home</span>
              </a>
            </li>
            <!-- <li class="nav-item mid-post-1">
              <a href="submit" id="openSubmitForm">
                <i class="nav-icon fas fa-plus-circle"></i> &nbsp;
              </a>
            </li> -->
            <li class="nav-item">
              <a href="/explore">
                <i class="nav-icon fab fa-modx"></i> &nbsp;
                <span class="nav-text">Explore</span>

                <span class="nav-tag">New</span>
              </a>
            </li>
           
            <!-- <li class="nav-item">
            <a class="nav-link" href="/notifications">
              <i class="nav-icon fas fa-bell"></i> &nbsp;
              <span class="nav-text">Notifcations</span>
              <span class="counter">0</span>
            </a>
          </li> -->
            <li class="nav-item chief">
              <a href="">
                <i class="nav-icon fas fa-bookmark"></i>
                &nbsp;<span class="nav-text">Bookmarks</span>&nbsp;
              </a>
            </li>
            <li class="nav-item chief">
              <a href="/subscribe">
                <i class="nav-icon fas fa-award"></i>
                &nbsp;<span class="nav-text">Become a Chief</span>&nbsp;
                <span><img src="../../img/gossipa3.png" alt="" class="nav-icon verified-badge"></span>
              </a>
            </li>
            <li class="nav-item">
              <a href="/profile">
                <i class="nav-icon fas fa-circle-user"></i> &nbsp;
                <span class="nav-text">My Profile</span>
              </a>
            </li>
            <li class="nav-item blur">
              <a aria-disabled="true">
                <i class="nav-icon fas fa-comments"></i> &nbsp;
                <span class="nav-text">GossipaCity</span>

                <span class="nav-tag">soon</span>
              </a>
            </li>
           
            <li class="nav-item mid-post-2">
              <a href="/submit">
                <i class="fas fa-circle-plus nav-icon"></i>
                &nbsp;<span class="nav-text"> Compose Gist</span>&nbsp;
                <i class="fas fa-chevron-down"></i>
              </a>

            </li>
          </ul>
        </div>

      </aside>


      <main>

        <div id="tutorial-overlay" class="hidden">
          <div class="tutorial-step">
            <div class="tutorial-text">
              <h2> <span style="text-transform: capitalize;">
                  <%= username %>
                </span> Welcome to GistTown. Our World of Amebo!</h2>
              <p>This is a Safe Space, where you can find comfort and anonymous support.<br> Feel free to share or
                read gists in a judgment-free zone.</p>
            </div>

            <div id="progress-bar-container">
              <div id="progress-bar"></div>
            </div>
            <button id="next-step">Next</button>
            <button class="skip-btn">Skip</button>
          </div>
        </div>




        <div class="jumbotron text-center">
          <div class="container">
            <div id="feeds">

                <form id="navigator">
                      <button class="navigation current">All Gossips <div class="bottom-line"></div></button>
                      <button class="navigation">Eavedropping <div class="bottom-line"></div></button>
                  </form>

              <section id="live-stream-bar">
                <!-- Sticky Start Gist Button -->

                <% if(verification===true) {%>
                  <button id="startStreamBtn">
                    <div class="plus-icon">➕</div>
                    <span>Stream Gist</span>
                  </button>

                  <% } %>

                    <div id="postContainer">
                      <div class="card-header">

                        <div class="userdetails">
                          <a href="" class="avatar-profile thumb">
                            <img src="../.<%= profilePicture %>" alt="" class="profile pic thumb">
                          </a>
                        </div>

                        <textarea name="" id="posting" placeholder="Hey <%= username %> Whats Poppin?"></textarea>
                        <button class="submit" id="quickShareBtn" title="Share"><abbr title="share">
                            <i class="fas fa-circle-plus"></i>
                          </abbr></button>
                        <div class="actions">
                          <button onclick="openModal('','text')"><abbr title="text">
                              <i class="fas fa-pen-to-square"></i>
                            </abbr></button>
                          <button id="openSubmitForm" onclick="openModal('','audio')" class="create">
                            <abbr title="Audio"><i class="fas fa-microphone"></i></abbr>
                          </button>
                          <button><abbr title="Views">
                              <i class="fas fa-earth-africa"></i>
                            </abbr></button>
                          <select name="" id="" class="view">
                            <option value="" class="nav-text">Views <i class="fas fa-eye-slash"></i></option>
                            <option value="public">For All</option>
                            <option value="exclusive">For Chiefs</option>
                            <option value="private">For myself only</option>
                          </select>
                        </div>

                      </div>
                    </div>


                    <div id="submitModal" class="modal">
                      <div id="tutorial-overlay">

                        <div class="modal-content">
                          <span class="close-btn">&times;</span>

                          <div id="submitFormContainer">
                            <!-- Server-rendered form will be injected here -->

                          </div>
                        </div>
                      </div>
                    </div>

                    <script>

                      window.onload = function () {
                        const textArea = document.querySelector('.modal textarea')
                        if (textArea) textArea.blur();
                      }



                      function changeBg(event) {
                        event.target.style.background = "var(--secondary-color)"
                        event.target.style.border = "1px solid var(--primary-color)"
                      }
                    </script>



                    <!-- Scrollable Live Streams -->
                    <div id="liveStreams" class="live-stream-scroll">
                      <!-- Stream cards injected dynamically -->
                    </div>
              </section>

              <div id="streamDisplay" class="hidden">
                <div class="stream-box">
                  <div class="stream-header">
                    <div class="stream-user">
                      <div class="avatar-profile">
                        <img src="" class="profile-pic" alt="Avatar Profile">
                      </div>
                      <p class="username" style="color: var(--primary-color);">
                        <span class="user"></span>
                        <img src="" alt="Verification Badge" class="v-badge">
                      </p>
                      <span class="timestamp"></span>
                    </div>
                    <button id="closeStreamView">✖</button>
                  </div>
                  <div id="streamContentBox" class="stream-body">
                    <!-- Live stream content shows here -->
                  </div>
                  <div class="stream-footer">
                    <span id="liveReactionView" class="hidden">❤️ 0 reactions</span>
                    <span id="liveListenerView">👂 0 listening</span>
                  </div>

                  <div id="floatingReactions"></div>
                </div>
              </div>

              <% if(verification===true){%>
                <!-- Fullscreen Stream Modal -->
                <div id="streamModal" class="hidden">
                  <div class="modal-overlay">
                    <div class="modal-content form-wrapper">
                      <div class="gist-input-wrapper form-wrap ">
                        <button id="closeStreamModal" class="close-btn">✖</button>
                        <div class="card-header">
                          <div class="userdetails">
                            <button id="endStreamBtn" class="end-btn">End Stream</button>
                            <h2>🎤 Stream Your Gist</h2>
                          </div>
                        </div>

                        <textarea id="liveGistInput" class="input-text" placeholder="Type your gist..."></textarea>
                      </div>

                      <div class="card-footer">

                        <div class="reaction-footer">
                          <span>Live reactions:</span>
                          <div id="reactionCount" class="">❤️ 0</div>
                        </div>

                        <div class="listeners">
                          <p id="listenerCount">👂 listeners</p>
                          <div id="listenerAvatars" class="listener-avatar"></div>
                        </div>

                      </div>

                    </div>
                  </div>
                </div>


                <%} %>

                  <div id="streamDisplay" class="hidden">
                    <div class="stream-box">
                      <div class="stream-header">
                        <div class="stream-user">
                          <div class="avatar-profile">
                            <img src="" class="profile-pic" alt="Avatar Profile">
                          </div>
                          <p class="username" style="color: var(--primary-color);">
                            <span class="user"></span>
                            <img src="" alt="Verification Badge" class="v-badge">
                          </p>
                          <span class="timestamp"></span>
                        </div>
                        <button id="closeStreamView">✖</button>
                      </div>
                      <div id="streamContentBox" class="stream-body">
                        <!-- Live stream content shows here -->
                      </div>
                      <div class="stream-footer">
                        <span id="liveReactionView" class="hidden">❤️ 0 reactions</span>
                        <span id="liveListenerView">👂 0 listening</span>
                      </div>

                      <div id="floatingReactions"></div>
                    </div>
                  </div>

                



                  <div id="topOverlay"></div>
                  <div id="bottomOverlay"></div>


                  <div id="secrets-container">
                    <template id="shimmerTemplate">
                      <li class="secret shimmer-card">
                        <div class="card">
                          <div class="card-header">
                            <div class="profile-pic shimmer-avatar"></div>
                            <div class="user-info">
                              <div class="shimmer-line short"></div>
                              <div class="shimmer-line tiny"></div>
                            </div>
                          </div>
                          <div class="card-content">
                            <div class="shimmer-line"></div>
                            <div class="shimmer-line"></div>
                          </div>
                          <div class="shimmer-footer">
                            <div class="shimmer-btn"></div>
                            <div class="shimmer-btn"></div>
                          </div>

                        </div>

                      </li>
                    </template>

                  </div>

                  <!-- Shimmer Placeholder (Always Visible at First) -->
                  <div id="shimmer-container" class="shimmer-container">
                    <ul>
                      <% for (let i=0; i < secrets.length; i++) { %>
                        <li class="secret shimmer-placeholder">
                          <div class="card">
                            <div class="shimmer-wrapper">
                              <div class="shimmer-card">
                                <div class="shimmer-avatar"></div>
                                <div class="shimmer-lines">
                                  <div class="shimmer-line short"></div>
                                  <div class="shimmer-line"></div>
                                  <div class="shimmer-line"></div>
                                  <div class="shimmer-footer">
                                    <div class="shimmer-btn"></div>
                                    <div class="shimmer-btn"></div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </li>
                        <% } %>
                    </ul>
                  </div>

                  <div id="real-secrets" style="display: none;">
                    <ul id="secrets">
                      <% if (locals.secrets) { %>

                        <div id="pinned" class="pinned-secret">
                          <div id="countdown" style="margin-top: 20px; font-weight: bold; text-align: center;"></div>
                        </div>

                        <% secrets.forEach((secret)=> { %>
                          <% const isLongSecret=secret.secret.split(" ").length > 10;
                       %>
                    <li class=" secret <%=isLongSecret ? 'full-width' : 'half-width' %>" id="secret<%= secret.id %>">



                              <div class="card">
                                <div class="card-header">
                                  <div class="user-details header<%= secret.user_id %>">
                                    <a href="/profile/amebo/<%= secret.user_id %>" class="avatar-profile"><img
                                        src="<%= secret.profile_picture %>" alt="Profile Picture"
                                        class="profile-pic"></a>
                                    <div class="user-info">
                                      <a href="/profile/amebo/<%= secret.user_id %>">
                                        <p class="username user<%= secret.user_id %>">
                                          <span class="user">@gossipa<%= secret.user_id %></span>
                                          <% if(secret.verified===true) {%>
                                            <abbr title="Exclusive Membership"> <img src="../../img/gossipa3.png" alt=""
                                                class="verified-badge"></abbr>
                                            <% } else {%>

                                              <% } %>
                                        </p>

                                      </a>
                                      <span class="timestamp" data-raw="<%= secret.timestamp %>"></span>
                                    </div>
                                    <span class="you-live-badge hidden">🎙️Live</span>
                                    <span id="streamEndedNotice" class="badge ended hidden">Stream Ended ✓</span>
                                  </div>
                                  <button class="listen"><i class="fas fa-ear-listen"></i>&nbsp;Eavedrop</button>
                                </div>

                                <div class="card-content">
                                  <p>
                                    <span class="content">
                                      <% if (secret.secret.split(" ").length > 100) { %>
                    <%= secret.secret.substring(0, 100) + " ..." %>
                                        <% } else { %>
                                          <%= secret.secret %>
                                            <% } %>
                                    </span>
                                    <% if (secret.secret.split(" ").length > 100) { %>
                
                        <button
                          class=" read" data-full="<%= secret.secret %>"
                                      data-truncated="<%= secret.secret.substring(0, 250) + '...' %>">
                                      Read More
                                      </button>


                                      <% } %>
                                  </p>
                                </div>


                                <div class="comment-section" data-secret-id="<%= secret.id %>">

                                  <div class="reactions sleek">
                                    <div class="first-action">
                                      <div class="secret-card" data-id="<%= secret.id %>">
                                        <div class="reaction-pocket">
                                          <button id="reactionHeart" class="reactions-btn heart-toggle">
                                            <span> 👍</span>
                                            <span><img src="../../img/premium-reaction.png"
                                                alt="Premium exclusive fire, hot reaction"
                                                class="verified-badge"></span>
                                            <span>😂</span>
                                            <span>😱</span>
                                            <!-- <span class="reactions-count"></span> -->

                                            <div class="floating-lottie"></div>
                                          </button>

                                          <div class="reaction-wheel reaction" id="reactionWheel">

                                            <button class="reaction-btn reaction-option" data-type="hot">
                                              <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                              <img src="../../img/premium-reaction.png"
                                                alt="Premium exclusive fire, hot reaction" class="verified-badge">
                                              <span class="reaction-count">
                                                <%= secret.reactions.hot ? secret.reactions.hot.count : 0 %>
                                              </span>
                                            </button>

                                            <button class="reaction-btn reaction-option" data-type="like">
                                              <!-- <div id="like-animation" class="lottie-animation"></div> -->
                                              👍
                                              <span class="reaction-count">
                                                <%= secret.reactions.like ? secret.reactions.like.count : 0 %>
                                              </span>
                                            </button>

                                            <button class="reaction-btn reaction-option" data-type="laugh">
                                              <!-- <div id="laugh-animation" class="lottie-animation"></div> -->

                                              😂
                                              <span class="reaction-count">
                                                <%= secret.reactions.laugh ? secret.reactions.laugh.count : 0 %>
                                              </span>
                                            </button>

                                            <!-- <button class="reaction-btn reaction-option" data-type="cry">

                                                        😢
                                                        <span class="reaction-count">
                                                          <%= secret.reactions.cry ? secret.reactions.cry.count : 0 %>
                                                        </span>
                                                      </button> -->

                                            <button class="reaction-btn reaction-option" data-type="gasp">
                                              <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                              😱
                                              <span class="reaction-count">
                                                <%= secret.reactions.gasp ? secret.reactions.gasp.count : 0 %>
                                              </span>
                                            </button>

                                          </div>

                                        </div>

                                      </div>

                                      <button id="commentButton"><i class="fas fa-comment"></i><span
                                          class="comment-count"></span>
                                      </button>
                                    </div>

                                    <ul class="second-action">
                                      <li><i class="fas fa-bookmark"></i></li>
                                      <li> <button class="copy-btn">
                                          <i class="fas fa-copy"></i>
                                        </button></li>

                                    </ul>

                                  </div>

                                  <div class="comment-dropdown" id="commentDropdown">
                                    <form class="comment-display" method="POST" id="commentDisplay">
                                      <ul id="comments" class="comments-list"></ul>
                                    </form>

                                    <form action="/comment" method="POST" id="comment-form">
                                      <input type="hidden" name="id" id="secretId" value="<%= secret.id %>" />
                                      <input type="hidden" name="secretUserId" value="<%= secret.user_id %>" />
                                      <input type="hidden" name="commentUserId" value="<%= userId %>" />
                                      <textarea id="commentInput" placeholder="Write a comment..."
                                        name="comment"></textarea>
                                      <!-- <input type="text" id="commentInput" placeholder="Write a comment" name="comment"> -->
                                      <button id="postCommentButton">
                                        <!-- Post -->
                                        <i class="fas fa-paper-plane"></i>
                                      </button>
                                      <% if (locals.message) { %>
                                        <small>
                                          <%= message %>
                                        </small>
                                        <% } %>
                                    </form>

                                  </div>
                                </div>


                                <ul class="card-menu">
                                  <li>
                                    <button class="menu-toggle-btn"><i class="fas fa-ellipsis-vertical"></i></button>
                                    <ul class="card-menu-content" style="display: none;">
                                      <li>
                                        <button class="report-btn" data-id="<%= secret.id %>">
                                          <i class="fa-regular fa-flag"></i>Report
                                        </button>
                                      </li>
                                      <li>
                                        <button class="copy-btn">
                                          <i class="fas fa-copy">Copy</i>
                                        </button>
                                      </li>
                                    </ul>
                                  </li>
                                </ul>

                              </div>
                              </li>

                              <div class="scroll-indicator">
                                <span>Scroll to explore</span>
                                <svg viewBox="0 0 24 24" width="24" height="24">
                                  <path d="M12 5v14M19 12l-7 7-7-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                </svg>
                              </div>

                              <% }) %>
                                <script>
                                  document.addEventListener('DOMContentLoaded', function () {

                                    document.querySelectorAll('.reaction-btn').forEach(button => {
                                      const type = button.getAttribute('data-type');

                                      button.addEventListener('click', () => {
                                        const emojiChar = button.textContent.trim().split('\n')[0];
                                        const card = button.closest('.secret-card');
                                        const floatingContainer = card.querySelector('.floating-lottie');

                                        // === 1. EMOJI BURST AROUND BUTTON ===
                                        triggerEmojiBurst(button, emojiChar);

                                        // === 2. 3D EXTRAS AROUND BUTTON ===
                                        if (type === 'cry') {
                                          const tear = document.createElement('span');
                                          tear.className = 'emoji-particle';
                                          tear.innerText = '💧';
                                          tear.style.setProperty('--x', '0px');
                                          tear.style.setProperty('--y', '50px');
                                          button.appendChild(tear);
                                          setTimeout(() => tear.remove(), 800);
                                        }

                                        if (type === 'gasp') {
                                          const puff = document.createElement('span');
                                          puff.className = 'emoji-particle';
                                          puff.innerText = '💨';
                                          puff.style.setProperty('--x', '-10px');
                                          puff.style.setProperty('--y', '0px');
                                          button.appendChild(puff);
                                          setTimeout(() => puff.remove(), 800);
                                        }


                                        // === 5. REMOVE LOTTIE ANIMATION AFTER IT FINISHES ===
                                        setTimeout(() => {
                                          floatingContainer.classList.remove('active'); // Remove the active class
                                          floatingContainer.innerHTML = ''; // Clear the Lottie animation
                                        }, 2000); // Adjust the timeout to match the animation duration
                                      });
                                    });

                                    function triggerEmojiBurst(container, emojiChar) {
                                      const burstCount = 10;

                                      for (let i = 0; i < burstCount; i++) {
                                        const particle = document.createElement('span');
                                        particle.classList.add('emoji-particle');
                                        particle.innerText = emojiChar;

                                        const angle = Math.random() * 2 * Math.PI;
                                        const distance = Math.random() * 40 + 20;
                                        const x = Math.cos(angle) * distance + 'px';
                                        const y = Math.sin(angle) * distance + 'px';

                                        particle.style.setProperty('--x', x);
                                        particle.style.setProperty('--y', y);

                                        container.appendChild(particle);
                                        setTimeout(() => particle.remove(), 800);
                                      }

                                      container.classList.add('pop-animate');
                                      setTimeout(() => container.classList.remove('pop-animate'), 300);
                                    }
                                  });
                                </script>


                                <% } %>




                                  <center class="bottom-message" id="scrollEndMessage">
                                    <p>Reached the bottom. Scroll back to top </p>
                                  </center>

                                  <script>
                                    document.addEventListener('DOMContentLoaded', () => {
                                      const scrollEndMessage = document.getElementById('scrollEndMessage');

                                      window.addEventListener('scroll', () => {
                                        const scrollPosition = window.scrollY + window.innerHeight;
                                        const pageHeight = document.body.offsetHeight;

                                        if (scrollPosition >= pageHeight - 50) {
                                          // User reached near bottom
                                          scrollEndMessage.style.opacity = '1';
                                          scrollEndMessage.style.zIndex = '100'
                                        } else {
                                          scrollEndMessage.style.opacity = '0';
                                        }
                                      });
                                    });
                                  </script>

                                  <script>
                                    document.addEventListener('DOMContentLoaded', () => {
                                      const cards = document.querySelectorAll('#secrets .card');

                                      const observer = new IntersectionObserver((entries, obs) => {
                                        entries.forEach(entry => {
                                          if (entry.isIntersecting) {
                                            entry.target.classList.add('visible');
                                            obs.unobserve(entry.target); // STOP observing after it becomes visible
                                          }
                                        });
                                      }, {
                                        threshold: 0.5,
                                        rootMargin: '-50px 0px -60px 0px'
                                      });

                                      cards.forEach(card => observer.observe(card));
                                    });

                                  </script>


                    </ul>
                  </div>





                  <audio id="post-sound" src="/sounds/system-notification-199277.mp3" preload="auto"></audio>
                  <script>
                    const postSound = document.getElementById("post-sound");
                    postSound.play();
                  </script>


                  <script>
                    const startBtn = document.getElementById("startStreamBtn");
                    const streamModal = document.getElementById("streamModal");
                    const closeModal = document.getElementById("closeStreamModal");
                    const endStreamBtn = document.getElementById("endStreamBtn");
                    const liveGistInput = document.getElementById("liveGistInput");
                    const streamContentBox = document.getElementById("streamContentBox");
                    const reactionCount = document.getElementById("reactionCount");
                    const liveStreams = document.getElementById("liveStreams");
                    const listenerCount = document.getElementById("listenerCount");
                    const streamDisplay = document.getElementById("streamDisplay");
                    const streamUser = document.querySelector(".stream-user");
                    const closeStreamView = document.getElementById("closeStreamView");
                    const allUserHeaders = document.querySelectorAll(`.header${currentUserId}`);
                    const liveBadgeElements = document.querySelectorAll(".you-live-badge");
                    const postContainer = document.getElementById("postContainer");

                    function togglePostContainer(visible) {
                      if (postContainer) {
                        postContainer.style.display = visible ? "block" : "none";
                      }
                    }


                    let streamTimeout;
                    let inactivityTimeout;
                    let isStreaming = false;
                    let reactionTotal = 0;
                    let listeners = 0;
                    let myStreamCard = null;


                    const verified = "<%= verification ? true : false %>";
                    let userId = "<%= userId%>"
                    // === STREAM INITIATION ===

                    if (verified) {
                      startBtn.addEventListener("click", () => {
                        const label = startBtn.querySelector("span").textContent;

                        if (label === "End Stream" && isStreaming) {
                          socket.emit("end-live-gist", { userId: currentUserId });
                          endMyStream();
                        } else {
                          streamModal.classList.remove("hidden");
                          liveGistInput.focus();
                        }
                      });
                    }

                    if (!verified) {
                      startBtn.setAttribute("disabled", true);
                      startBtn.classList.add("disabled"); // add greyed-out style
                      startBtn.title = "Subscribe as Chief Gossipa to stream live gists";
                    }



                    // === CANCEL FROM MODAL ===
                    closeModal.addEventListener("click", () => {
                      streamModal.classList.add("hidden");
                      liveGistInput.value = "";
                      reactionTotal = 0;
                      reactionCount.classList.add("hidden");
                      reactionCount.textContent = "";
                    });

                    // === END FROM MODAL BUTTON ===
                    endStreamBtn.addEventListener("click", () => {
                      if (isStreaming) {
                        socket.emit("end-live-gist", { userId: currentUserId });
                        endMyStream();
                        togglePostContainer(true);
                      }
                    });

                    // === CLOSE STREAM DISPLAY ===
                    closeStreamView.addEventListener("click", () => {
                      streamDisplay.classList.add("hidden");
                    });

                    // === STREAM INPUT HANDLER ===
                    liveGistInput.addEventListener("input", (e) => {
                      resetInactivityTimer();
                      clearTimeout(streamTimeout);

                      if (!socket || !socket.connected) return;


                      const value = e.target.value;

                      streamTimeout = setTimeout(() => {
                        if (!value.trim()) return;

                        socket.emit("live-gist", {
                          userId: currentUserId,
                          content: value,
                        });

                        // First-time stream start
                        if (!isStreaming) {
                          isStreaming = true;
                          startBtn.querySelector("span").textContent = "End Stream";
                          startBtn.classList.add("streaming")

                          // Show live badge on user header(s)
                          allUserHeaders.forEach(header => {
                            const badge = header.querySelector(".you-live-badge");
                            const username = header.querySelector(".user")?.textContent.trim();
                            if (username === `@amebo${currentUserId}`) {
                              badge?.classList.remove("hidden");
                            }
                          });

                          // const avatarUrl = `../.${}`;
                          myStreamCard = addLiveGistCard({
                            userId: currentUserId,
                            content: value,
                            // avatarUrl
                          });

                          if (myStreamCard) {
                            myStreamCard.style.display = "none"; // Don't show own card
                          }

                          if (userId === currentUserId) return null; // before card creation

                        }
                      }, 300);
                    });

                    // === INACTIVITY HANDLER ===
                    function resetInactivityTimer() {
                      clearTimeout(inactivityTimeout);
                      inactivityTimeout = setTimeout(() => {
                        if (isStreaming) {
                          socket.emit("end-live-gist", { userId: currentUserId });
                          endMyStream();
                        }
                      }, 2 * 60 * 1000); // 2 min
                    }

                    // === STREAM END ===
                    function endMyStream() {


                      const card = document.querySelector(`.stream-card[data-user-id="${currentUserId}"]`);
                      if (card) card.remove();
                      myStreamCard = null;
                      streamModal.classList.add("hidden");
                      startBtn.classList.remove("streaming")
                      liveGistInput.value = "";


                      allUserHeaders.forEach(header => {
                        const badge = header.querySelector(".you-live-badge");
                        const username = header.querySelector(".user")?.textContent.trim();
                        if (username === `@amebo${currentUserId}`) {
                          badge?.classList.add("hidden");
                        }
                      });

                      startBtn.querySelector("span").textContent = "Stream Gist";
                      isStreaming = false;
                    }

                    // === CARD CREATION ===
                    function addLiveGistCard({ userId, content, avatarUrl, endedAt }) {
                      let card = document.querySelector(`.stream-card[data-user-id="${userId}"]`);
                      if (!card) {
                        card = document.createElement("div");
                        card.className = "stream-card active";
                        card.dataset.userId = userId;
                        card.innerHTML = `
      <div class="gist-snippet">${content.slice(0, 80)}</div>
<img src="${profilePicture}" class="stream-avatar" alt="avatar" />
    `;

                        togglePostContainer(false);

                        card.onclick = async () => {
                          if (endedAt) {
                            await showEndedStream({ userId, content, endedAt });
                          } else {
                            try {
                              const response = await fetch(`/user/${userId}`);
                              const userData = await response.json();

                              streamUser.querySelector(".profile-pic").src = `../.${userData.profile_picture}`;
                              streamUser.querySelector(".user").innerHTML = `@gossipa${userData.id}`;
                              streamUser.querySelector(".v-badge").style.display = userData.verified ? "inline" : "none";
                              streamUser.querySelector(".v-badge").src = userData.verified ? "../../img/badge.png" : null;

                              streamContentBox.innerText = content;
                              streamDisplay.classList.remove("hidden");
                              streamDisplay.scrollIntoView({ behavior: "smooth" });

                              socket.emit("join-live-gist", { streamUserId: userId });
                            } catch (err) {
                              console.error("Error loading live stream:", err);
                            }
                          }
                        };

                        if (userId !== currentUserId) {
                          liveStreams.prepend(card);
                        }
                      } else {
                        card.querySelector(".gist-snippet").innerText = content.slice(0, 80);
                      }

                      if (userId === currentUserId) return null;


                      return card;
                    }

                    // === SHOW ENDED STREAM ===
                    async function showEndedStream({ userId, content, endedAt }) {
                      try {
                        const response = await fetch(`/user/${userId}`);
                        const userData = await response.json();

                        document.querySelectorAll(`.header${userId}`).forEach(header => {
                          const badge = header.querySelector(".you-live-badge");
                          const username = header.querySelector(".user")?.textContent.trim();
                          if (username === `@amebo${userId}`) badge?.classList.add("hidden");
                        });

                        streamUser.querySelector(".profile-pic").src = `../.${userData.profile_picture}`;
                        streamUser.querySelector(".user").innerHTML = `@gossipa${userData.id}`;
                        streamUser.querySelector(".v-badge").style.display = userData.verified ? "inline" : "none";
                        streamUser.querySelector(".v-badge").src = userData.verified ? "../../img/badge.png" : null;

                        streamContentBox.innerHTML = "";

                        const diffSeconds = Math.floor((Date.now() - endedAt) / 1000);
                        const timeAgo = diffSeconds < 60 ? `${diffSeconds}s ago`
                          : diffSeconds < 3600 ? `${Math.floor(diffSeconds / 60)}m ago`
                            : `${Math.floor(diffSeconds / 3600)}h ago`;

                        const timeLabel = document.createElement("div");
                        timeLabel.className = "stream-ended-label";
                        timeLabel.textContent = `🛑 Stream Ended • ${timeAgo}`;
                        streamContentBox.appendChild(timeLabel);

                        const typedText = document.createElement("div");
                        typedText.className = "typed-stream";
                        streamContentBox.appendChild(typedText);

                        let i = 0;
                        function typeNext() {
                          if (!content) return;
                          if (i < content.length) {
                            typedText.textContent += content[i++];
                            setTimeout(typeNext, 50); // Slightly slower for visibility
                          }
                        }
                        typedText.textContent = ""; // clear before typing
                        setTimeout(() => {
                          typeNext()
                        }, 500);

                        streamDisplay.classList.remove("hidden");
                        streamDisplay.scrollIntoView({ behavior: "smooth" });

                      } catch (err) {
                        console.error("Error loading ended stream:", err);
                      }
                    }

                    // === SOCKET EVENTS ===
                    socket.on("live-gist-started", ({ userId }) => {
                      document.querySelectorAll(`.header${userId}`).forEach(header => {
                        const badge = header.querySelector(".you-live-badge");
                        const profile = header.querySelector(".avatar-profile");
                        const username = header.querySelector(".user")?.textContent.trim();
                        if (username === `@amebo${userId}`) {
                          badge?.classList.remove("hidden");
                          profile.style.border = '4px solid var(--secondary-color)'
                        }
                      });
                    });

                    socket.on("receive-live-gist", ({ userId, content, profilePicture, verification }) => {
                      if (userId === currentUserId) return;

                      const avatarUrl = `../.${profilePicture}`;
                      streamUser.querySelector(".profile-pic").src = avatarUrl;
                      streamUser.querySelector(".user").innerHTML = `@gossipa${userId}`;
                      streamUser.querySelector(".v-badge").style.display = verification ? "inline" : "none";
                      streamUser.querySelector(".v-badge").src = verification ? "../../img/badge.png" : null;

                      streamContentBox.innerText = content;
                      addLiveGistCard({ userId, content, avatarUrl });
                    });

                    socket.on("remove-live-gist", ({ userId, lastContent, endedAt }) => {
                      const card = document.querySelector(`.stream-card[data-user-id="${userId}"]`);
                      if (card) {
                        card.classList.remove("active");
                        card.classList.add("ended");
                        card.dataset.endedAt = endedAt;
                        card.dataset.lastContent = lastContent;
                        card.querySelector(".gist-snippet").innerText = lastContent.slice(0, 80);

                        if (userId !== currentUserId) {
                          card.onclick = () => showEndedStream({ userId, content: lastContent, endedAt });
                        } else {
                          endMyStream();
                        }
                      }
                    });



                    socket.on("active-streams", (streams) => {
                      liveStreams.innerHTML = "";

                      streams.forEach(stream => {
                        const div = document.createElement("div");
                        div.className = "stream-card";
                        div.innerHTML = `
      <img src="${stream.profilePicture}" class="avatar" />
      <div class="content">
        <p class='username'> <span class="user">@gossipa${stream.userId}</span>
          <img scr='../img/badge.png' alt="Verified Badge" />
          </p>
        <p>${stream.content.slice(0, 80)}</p>
        <span class="time">${new Date(stream.timestamp).toLocaleTimeString()}</span>
      </div>
    `;
                        liveStreams.appendChild(div);
                      });

                    });



                    // === INITIAL SETUP ===
                    window.addEventListener("DOMContentLoaded", () => {
                      if (startBtn && startBtn.querySelector("span")) {
                        startBtn.querySelector("span").textContent = "Stream Gist";
                      }


                      document.addEventListener("visibilitychange", () => {
                        setTimeout(() => {
                          if (!document.hidden) resetInactivityTimer();
                        }, 200);


                      });

                      // Delay request to ensure socket event handlers are ready
                      setTimeout(() => {
                        socket.emit("request-live-streams");
                      }, 100);
                    });


                  
                  </script>

                  <script>
                    const postingInput = document.getElementById("posting");
                    const submitFormContainer = document.getElementById("submitFormContainer");
                    let throttleTimeout = null;
                    let modalInitialized = false;

                    // Restore from localStorage if available
                    window.addEventListener("DOMContentLoaded", () => {
                      const savedText = localStorage.getItem("gossipa_draft");
                      if (savedText) postingInput.value = savedText;
                    });

                    postingInput.addEventListener("keyup", function (e) {
                      const posting = this.value.trim();

                      // Save to localStorage
                      localStorage.setItem("gossipa_draft", posting);

                      if (posting.length <= 100) return;

                      // Throttle to avoid multiple modal fetches
                      if (throttleTimeout) return;

                      throttleTimeout = setTimeout(() => {
                        throttleTimeout = null;
                        openModal(posting);
                      }, 500);
                    });

                    document.getElementById("openSubmitForm").addEventListener("click", () => openModal("", "audio"));

                    function openModal(prefilledText = "", mode = "text") {
                      if (window.innerWidth <= 768) {
                        window.location.href = "/submit";
                        return;
                      }

                      const modal = document.getElementById("submitModal");
                      modal.style.display = "flex";

                      if (modalInitialized) {
                        const textarea = document.querySelector("#submitFormContainer textarea");
                        if (textarea && prefilledText) {
                          textarea.value = prefilledText;
                          textarea.focus();
                        }

                        // ✅ Use mode properly
                        mode === "audio" ? showAudioForm() : showTextForm();
                        return;
                      }

                      fetch("/partial-submit")
                        .then((response) => response.text())
                        .then((html) => {
                          submitFormContainer.innerHTML = html;
                          modalInitialized = true;

                          setTimeout(() => {
                            const textarea = document.querySelector("#submitFormContainer textarea");
                            if (textarea && prefilledText) {
                              textarea.value = prefilledText;
                              textarea.focus();

                              const hint = document.createElement("small");
                              hint.textContent = "let’s keep going...";
                              hint.className = "ghost-hint";
                              requestAnimationFrame(() => hint.classList.add("visible"));
                              textarea.insertAdjacentElement("afterend", hint);
                            }

                            window.showTextForm = function () {
                              const textForm = document.getElementById("textForm");
                              const audioForm = document.getElementById("audioForm");

                              audioForm.classList.remove("visible");
                              textForm.classList.remove("hidden");

                              setTimeout(() => {
                                audioForm.classList.add("hidden");
                                textForm.classList.add("visible");
                              }, 10);
                            };

                            window.showAudioForm = function () {
                              const textForm = document.getElementById("textForm");
                              const audioForm = document.getElementById("audioForm");

                              textForm.classList.remove("visible");
                              audioForm.classList.remove("hidden");

                              setTimeout(() => {
                                textForm.classList.add("hidden");
                                audioForm.classList.add("visible");
                              }, 10);
                            };

                            // ✅ Toggle based on mode
                            mode === "audio" ? showAudioForm() : showTextForm();

                          }, 50);
                        })
                        .catch((error) => {
                          console.error("Error loading the submit form:", error);
                          alert("An error occurred while loading the submit form.");
                        });
                    }


                    // Close modal functionality
                    document.querySelector(".close-btn").addEventListener("click", () => {
                      document.getElementById("submitModal").style.display = "none";
                    });

                    // Close when clicking outside modal content
                    window.addEventListener("click", (event) => {
                      if (event.target === document.getElementById("submitModal")) {
                        document.getElementById("submitModal").style.display = "none";
                      }
                    });

                  </script>


<script>
  const quickShareBtn = document.getElementById("quickShareBtn");

  quickShareBtn.addEventListener("click", async (e) => {
    e.preventDefault();

    const posting = postingInput.value.trim();
    const category = "public"; // or grab from dropdown if you use it

    // If post is too long, open the modal
    if (posting.length > 50) {
      openModal(posting); // this function already opens with prefilled text
      return;
    }

    if (!posting) {
      alert("You can't submit an empty gist!");
      return;
    }

    try {
      const response = await fetch("/share", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          secret: posting,
          category,
          contentType: "text"
        }),
      });

      const result = await response.json();

      if (result.success) {
        // Optional: play success sound
        const sound = document.getElementById("post-sound");
        if (sound) sound.play();

        // Clear input + draft
        postingInput.value = "";
        localStorage.removeItem("gossipa_draft");

        // Optional: show notification
        const notice = document.getElementById("notification");
        if (notice) {
          notice.innerHTML = `<div class="toast">Post shared successfully!</div>`;
          setTimeout(() => (notice.innerHTML = ""), 3000);
        }
      } else {
        alert("Failed to share. Try again.");
      }
    } catch (err) {
      console.error("Error sharing:", err);
      alert("Something went wrong. Try again.");
    }
  });
</script>


                  <script>
                    const fetchTopDiscussedSecret = async () => {
                      try {
                        const response = await fetch("/top-discussed");
                        const data = await response.json();
                        const topSecret = data.topSecret;

                        if (data.success) {
                          showAnnouncement(topSecret);
                        } else {
                          console.log("No trending secret to display.");
                        }
                      } catch (error) {
                        console.error("Error fetching top discussed secret:", error);
                      }
                    };

                    pinSecret = (topSecret) => {
                      const pinnedSection = document.getElementById("pinned");
                      pinnedSection.classList.add("visible")
                      pinnedSection.innerHTML = `
<li class="secret">
  <div class="pin-card">
    <h3> Top Gossip </h3>
    <br/>
    <div class="card">
      <small>~~ @anonym${topSecret.user_id} ~~</small>

                <p>
        ${topSecret.secret.substring(0, 250) + "..."}
        <center>
        <a id="pinnedButton" class="read"
        href="#secret${topSecret.id}"
          style="
            background: none;
            font-size: 1rem;
            padding: 0;
            font-weight: bold;
            display: block !important;
          "
          >View secret</a
        >
        </center>
      </p>

      <i class="fas fa-thumbtack pinned"></i>

    </div>
    </div>
  </li>
`;


                      document.getElementById("pinnedButton").addEventListener("click", function (e) {
                        e.preventDefault()

                        const target = document.getElementById(`secret${topSecret.id}`);

                        // Smooth Scroll
                        target.scrollIntoView({ behavior: "smooth", block: "center" });

                        // Add highlight effect
                        target.querySelector(".card").classList.add("highlight");
                        target.querySelector(".card").style.width = '100% !important'
                        target.querySelector("card").style.flex = '1 1 100% !important'

                      })

                      // highlightElement(pinnedSection)
                      // Set a timeout to unpin the secret after 24 hours
                      setTimeout(() => {
                        pinnedSection.innerHTML = "";
                      }, 24 * 60 * 60 * 1000); // 24 hours
                    };

                    // Schedule the announcement at 12:00 PM GMT
                    now = new Date();
                    targetTime = new Date();
                    targetTime.setUTCHours(11, 0, 0, 0); // 12:00 PM GMT
                    timeUntilAnnouncement = targetTime - now;

                    setTimeout(fetchTopDiscussedSecret, timeUntilAnnouncement);
                  </script>

                  <script>
                    function updateCountdown() {
                      const countdownEl = document.getElementById("countdown");
                      // const announcement= document.getElementById("announcement");
                      if (!countdownEl) return;

                      const now = new Date();
                      const nextTarget = new Date();
                      nextTarget.setUTCHours(11, 0, 0, 0); // 11:00 AM GMT

                      if (now > nextTarget) {
                        nextTarget.setUTCDate(nextTarget.getUTCDate() + 1); // move to next day
                      }

                      const distance = nextTarget - now;

                      const hours = String(Math.floor((distance / (1000 * 60 * 60)) % 24)).padStart(2, '0');
                      const minutes = String(Math.floor((distance / (1000 * 60)) % 60)).padStart(2, '0');
                      const seconds = String(Math.floor((distance / 1000) % 60)).padStart(2, '0');

                      const span = document.createElement('span')
                      span.textContent = `${hours}:${minutes}:${seconds}`
                      // span.className = 'counter'

                      countdownEl.textContent = `Next top gossip to be selected in:`;
                      countdownEl.appendChild(span)
                      countdownEl.style.flex = " 1 1 100% !important"
                      countdownEl.style.width = "100% !important"
                      span.style.color = "var(--secondary-color)"

                    }

                    // Start the countdown interval when DOM is ready
                    document.addEventListener("DOMContentLoaded", () => {
                      updateCountdown();
                      setInterval(updateCountdown, 1000);
                    });
                  </script>

                  <br />

                  <button id="scrollToTopBtn" class="scroll-btn"><i class="fas fa-chevron-up"></i></button>



                  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

                  <script>
                    document.addEventListener("DOMContentLoaded", () => {
                      const scrollBtn = document.getElementById("scrollToTopBtn");

                      window.addEventListener("scroll", () => {
                        scrollBtn.style.display = window.scrollY > 200 ? "block" : "none";
                      });

                      scrollBtn.addEventListener("click", () => {
                        // Animate launch
                        scrollBtn.classList.add("shrink");
                        scrollBtn.classList.add("launching");

                        // Scroll to top
                        window.scrollTo({ top: 0, behavior: "smooth" });

                        // Reset animation classes after a short delay
                        setTimeout(() => {
                          scrollBtn.classList.remove("shrink");
                          scrollBtn.classList.remove("launching");
                        }, 800);
                      });
                    });
                  </script>
                  <script>
                    document.addEventListener("DOMContentLoaded", () => {
                      fetch("/api/comment-counts")
                        .then(res => res.json())
                        .then(counts => {
                          Object.entries(counts).forEach(([id, count]) => {
                            const el = document.querySelector(`[data-secret-id="${id}"] .comment-count`);
                            if (count) {
                              // el.textContent = `${count} comment${count !== null ? 's' : ''}`;
                              el.textContent = `${count}`;
                            }
                          });
                        })
                        .catch(err => console.error("Failed to fetch comment counts", err));
                    });
                  </script>



                  <script>
                    $(document).ready(function () {
                      $(".comment-section").each(function () {
                        const commentSection = $(this);

                        // Submit comment form
                        commentSection.find("#comment-form").on("submit", function (e) {
                          e.preventDefault();

                          const secretId = commentSection.find("#secretId").val();
                          const secretUserId = commentSection.find('[name="secretUserId"]').val();
                          const commentUserId = commentSection.find('[name="commentUserId"]').val();
                          const comment = commentSection.find("#commentInput").val();
                          const commentDisplay = commentSection.find("#commentDisplay");
                          const commentCount = commentSection.find(".comment-count");

                          $.ajax({
                            url: "/comment",
                            type: "POST",
                            data: {
                              id: secretId,
                              secretUserId,
                              commentUserId,
                              comment,
                            },
                            success: async function (response) {
                              if (response.success) {
                                try {
                                  const fetchResponse = await fetch(`/more/${secretId}`);
                                  if (!fetchResponse.ok) throw new Error("Failed to fetch comments");

                                  const data = await fetchResponse.json();
                                  const comments = data.comments;

                                  if (comments) {
                                    let commentDisp = comments.map((comment) => `
                        <li class="comment-item">
                          <div>
                            <small class="user"><strong>@anonym${comment.user_id}</strong></small>
                            <p class="comment">${comment.comment}</p>
                            <button class="translate-btn" data-id="${comment.id}" data-text="${comment.comment}">Translate to english</button>
                            <p class="translated-text" id="translated-${comment.id}"></p>
                          </div>
                        </li>
                      `).join("");

                                    commentDisplay.html(`
                        <ul id="comments">
                          <p class="total">All comments: ${data.totalComments}</p>
                          ${commentDisp}
                        </ul>
                      `);

                                    commentCount.html(`${data.totalComments}`);
                                  } else {
                                    commentDisplay.html(`
                        <ul id="comments">
                          <p class="total">${data.noComment}</p>
                        </ul>
                      `);
                                  }
                                } catch (err) {
                                  console.log(err);
                                }

                                commentSection.find("#commentInput").val(""); // clear input
                              } else {
                                console.log("Failed to post comment:", response.message);
                              }
                            },
                            error: function (err) {
                              console.log("Error submitting comment:", err);
                            },
                          });
                        });

                        // Translation handler (delegated for dynamic buttons)
                        commentSection.on("click", ".translate-btn", function (e) {
                          e.preventDefault();
                          const btn = $(this);
                          const commentText = btn.data("text");
                          const commentId = btn.data("id");
                          const translatedBox = commentSection.find(`#translated-${commentId}`);

                          $.ajax({
                            url: "/translate",
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify({ text: commentText, targetLang: "en" }),
                            success: function (res) {
                              if (res.translated) {
                                translatedBox.text(res.translated);
                              } else {
                                translatedBox.text("Translation failed.");
                              }
                            },
                            error: function (err) {
                              translatedBox.text("Error translating comment.");
                            },
                          });
                        });
                      });
                    });
                  </script>

                  <script>
                    document.addEventListener("DOMContentLoaded", () => {
                      const commentSections = document.querySelectorAll(".comment-section");

                      commentSections.forEach(async (section) => {
                        const secretId = section.querySelector("#secretId").value;
                        const commentList = section.querySelector(".comments-list");


                        // Toggle dropdown
                        section.querySelector("#commentButton").addEventListener("click", () => {
                          const dropdown = section.querySelector(".comment-dropdown");
                          dropdown.classList.toggle("active");

                          const icon = section.querySelector("#commentButton i");
                          icon.className = dropdown.classList.contains("active")
                            ? "fas fa-comment-slash"
                            : "fas fa-comment";
                        });

                        // Fetch and display comments
                        try {
                          const response = await fetch(`/more/${secretId}`);
                          const data = await response.json();
                          const comments = data.comments;

                          if (comments && comments.length > 0) {
                            section.querySelector(".comment-display").insertAdjacentHTML(
                              "afterbegin",
                              `<p class="total">All comments: ${data.totalComments}</p>`
                            );



                            comments.forEach((comment) => {
                              const li = document.createElement("li");
                              li.className = "comment-item";
                              li.innerHTML = `
              <div>
                <small class="user"><strong>@anonym${comment.user_id}</strong></small>
                <p class="comment">${comment.comment}</p>
              </div>
              <button type="button" class="translate-btn" data-id="${comment.id}" data-text="${comment.comment}">Translate to english</button>
              <p class="translated-text" id="translated-${secretId}-${comment.id}"></p>
            `;
                              commentList.appendChild(li);
                            });
                          } else {
                            commentList.innerHTML = `<p class="total">${data.noComment}</p>`;
                          }
                        } catch (err) {
                          console.error("Error loading comments:", err);
                        }

                        // Delegate click for Translate buttons inside this section
                        commentList.addEventListener("click", async (e) => {
                          if (e.target.classList.contains("translate-btn")) {
                            const btn = e.target;
                            const text = btn.dataset.text;
                            const id = btn.dataset.id;
                            const output = section.querySelector(`#translated-${secretId}-${id}`);

                            output.innerText = "Translating...";

                            try {
                              const res = await fetch("/translate", {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify({ text, targetLang: "en" }),
                              });

                              const result = await res.json();
                              if (result.translated) {
                                output.innerText = result.translated;
                              } else {
                                output.innerText = "Translation failed.";
                              }
                            } catch (err) {
                              output.innerText = "Error translating comment.";
                              console.error(err);
                            }
                          }
                        });
                      });
                    });
                  </script>

                  <script>
                    let collapseTimeout;

                    document.querySelectorAll('.heart-toggle').forEach(hrt => {
                      hrt.addEventListener('click', (e) => {
                        const pocket = hrt.closest('.reaction-pocket');


                        if (e.target == document.querySelector(".heart-toggle")) {
                          pocket.classList.toggle('active');
                        } else {
                          pocket.classList.toggle('active');
                        }

                        // Reset and start timer
                        clearTimeout(collapseTimeout);
                        if (pocket.classList.contains('active')) {
                          collapseTimeout = setTimeout(() => {
                            pocket.classList.remove('active');
                          }, 5000); // 5 seconds
                        }
                      });
                    });


                    document.querySelectorAll(".reaction-btn").forEach((button) => {


                      const animations = {
                        like: './img/lottie/like.json',
                        laugh: './img/lottie/laugh.json',
                        cry: './img/lottie/cry.json',
                        gasp: './img/lottie/gasp.json',
                        hot: './img/lottie/hot.json'
                      };


                      button.addEventListener("click", async (event) => {


                        const btn = event.target.closest(".reaction-btn");
                        const type = btn.getAttribute("data-type");
                        const secretCard = btn.closest(".secret-card");
                        const secretId = secretCard.getAttribute("data-id");


                        const emojiChar = btn.textContent.trim().split('\n')[0];
                        const card = btn.closest('.secret');
                        const floatingContainer = card.querySelector('.floating-lottie');
                        const floating = document.createElement('div');
                        floating.className = 'floating-lottie-animated';
                        card.appendChild(floating);


                        // === 1. EMOJI BURST AROUND BUTTON ===
                        triggerEmojiBurst(btn, emojiChar);

                        // === 2. 3D EXTRAS AROUND BUTTON ===
                        if (type === 'cry') {
                          const tear = document.createElement('span');
                          tear.className = 'emoji-particle';
                          tear.innerText = '💧';
                          tear.style.setProperty('--x', '0px');
                          tear.style.setProperty('--y', '50px');
                          button.appendChild(tear);
                          setTimeout(() => tear.remove(), 800);
                        }

                        if (type === 'gasp') {
                          const puff = document.createElement('span');
                          puff.className = 'emoji-particle';
                          puff.innerText = '💨';
                          puff.style.setProperty('--x', '-10px');
                          puff.style.setProperty('--y', '0px');
                          button.appendChild(puff);
                          setTimeout(() => puff.remove(), 800);
                        }


                        try {
                          const response = await fetch(`/secret/${secretId}/react`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ type }),
                          });

                          const data = await response.json();


                          const animation = lottie.loadAnimation({
                            container: floating,
                            renderer: 'svg',
                            loop: false,
                            autoplay: true,
                            path: animations[type]
                          });

                          // Get button to card offset
                          const buttonRect = button.getBoundingClientRect();
                          const cardRect = card.getBoundingClientRect();

                          const startX = buttonRect.left - cardRect.left + buttonRect.width / 2;
                          const startY = buttonRect.top - cardRect.top + buttonRect.height / 2;

                          floating.style.left = `${startX}px`;
                          floating.style.top = `${startY}px`;

                          // 🎇 TRAIL PARTICLES WHILE MOVING
                          const trailEmojis = ['✨', '💥', '💨'];
                          let trailInterval = setInterval(() => {
                            const trail = document.createElement('span');
                            trail.className = 'trail-particle';
                            trail.innerText = trailEmojis[Math.floor(Math.random() * trailEmojis.length)];

                            // Offset from Lottie position
                            const offsetX = (Math.random() - 0.5) * 60;
                            const offsetY = (Math.random() - 0.5) * 60;

                            trail.style.left = `${floating.offsetLeft}px`;
                            trail.style.top = `${floating.offsetTop}px`;
                            trail.style.setProperty('--trail-x', `${offsetX}px`);
                            trail.style.setProperty('--trail-y', `${offsetY}px`);

                            card.appendChild(trail);
                            setTimeout(() => trail.remove(), 600);
                          }, 100);

                          // 🎯 Animate to center
                          setTimeout(() => {
                            floating.classList.add('to-center');
                          }, 50);

                          // 👋 Animate back and remove
                          setTimeout(() => {
                            floating.classList.remove('to-center');
                            floating.classList.add('to-button');
                            clearInterval(trailInterval);
                          }, 1200);

                          setTimeout(() => {
                            floating.remove();
                          }, 1800);


                          if (data.success) {
                            const countSpan = btn.querySelector(".reaction-count");
                            countSpan.textContent = data.reactions[type].count || 0; // Use updated count from server
                          } else {
                            console.error("Failed to update reactions:", data.error);
                          }
                        } catch (error) {
                          console.error("Error updating reactions:", error);
                        }


                        function triggerEmojiBurst(container, emojiChar) {
                          const burstCount = 10;

                          for (let i = 0; i < burstCount; i++) {
                            const particle = document.createElement('span');
                            particle.classList.add('emoji-particle');
                            particle.innerText = emojiChar;

                            const angle = Math.random() * 2 * Math.PI;
                            const distance = Math.random() * 40 + 20;
                            const x = Math.cos(angle) * distance + 'px';
                            const y = Math.sin(angle) * distance + 'px';

                            particle.style.setProperty('--x', x);
                            particle.style.setProperty('--y', y);

                            container.appendChild(particle);
                            setTimeout(() => particle.remove(), 800);
                          }

                          container.classList.add('pop-animate');
                          setTimeout(() => container.classList.remove('pop-animate'), 300);
                        }
                      });
                    });

                  </script>

                  <script>
                    document.querySelectorAll(".read").forEach((button) => {
                      button.addEventListener("click", (e) => {
                        const contentSpan = e.target.previousElementSibling;
                        const isTruncated = e.target.textContent === "Read More";

                        if (isTruncated) {
                          // Show full content
                          contentSpan.textContent = e.target.dataset.full;
                          e.target.textContent = "See Less";
                        } else {
                          // Reapply truncated content
                          contentSpan.textContent = e.target.dataset.truncated;
                          e.target.textContent = "Read More";
                        }
                      });
                    });

                    // Toggle menu open/close
                    document.querySelectorAll(".menu-toggle-btn").forEach((button) => {
                      button.addEventListener("click", (e) => {
                        const menuContent = e.target.closest(".card-menu").querySelector(".card-menu-content");
                        const isVisible = menuContent.style.display === "block";

                        // Hide all others
                        document.querySelectorAll(".card-menu-content").forEach((menu) => {
                          menu.style.display = "none";
                        });

                        // Toggle this one
                        menuContent.style.display = isVisible ? "none" : "block";

                        e.stopPropagation(); // Prevent auto-close
                      });
                    });

                    // Prevent closing when clicking inside menu
                    document.querySelectorAll(".card-menu-content").forEach((menu) => {
                      menu.addEventListener("click", (e) => {
                        e.stopPropagation(); // Important: allow interaction with buttons inside
                      });
                    });

                    // Hide all menus on body click
                    document.addEventListener("click", () => {
                      document.querySelectorAll(".card-menu-content").forEach((menu) => {
                        menu.style.display = "none";
                      });
                    });

                    document.addEventListener("click", function (event) {
                      if (event.target.closest(".fas.fa-copy")) {
                        const button = event.target.closest(".fas.fa-copy");

                        // Find the closest card container to get the content
                        const cardContainer = button.closest(".card");

                        // Extract the content inside the card container
                        const contentToCopy = cardContainer.querySelector(".content")?.innerText;

                        if (contentToCopy) {
                          if (navigator.clipboard && navigator.clipboard.writeText) {
                            // Use Clipboard API if available
                            navigator.clipboard
                              .writeText(contentToCopy)
                              .then(() => {
                                alert("Content copied to clipboard!");
                              })
                              .catch((err) => {
                                console.error("Failed to copy: ", err);
                                alert("Failed to copy content.");
                              });
                          } else {
                            // Fallback for unsupported browsers
                            const tempInput = document.createElement("textarea");
                            tempInput.value = contentToCopy;
                            document.body.appendChild(tempInput);
                            tempInput.select();
                            try {
                              document.execCommand("copy");
                              alert("Content copied to clipboard!");
                              button.innerHTML = "Copied!"
                            } catch (err) {
                              console.error("Fallback copy failed: ", err);
                              alert("Copy failed. Please copy manually.");
                            }
                            document.body.removeChild(tempInput);
                          }
                        } else {
                          console.error("No content to copy.");
                          alert("Nothing to copy.");
                        }
                      }
                    });


                    // Attach report handler
                    document.querySelectorAll(".report-btn").forEach((btn) => {
                      btn.addEventListener("click", async (e) => {
                        e.stopPropagation(); // Prevent closing menu before prompt

                        const secretId = e.target.closest(".report-btn").getAttribute('data-id');
                        const reason = prompt('Why are you reporting this content?');

                        if (reason) {
                          try {
                            const response = await fetch(`/report/secret/${secretId}`, {
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' },
                              body: JSON.stringify({ reason })
                            });

                            const data = await response.json();
                            if (data.success) {
                              alert('Thank you for reporting. We will review it shortly.');
                            } else {
                              alert('Error reporting content');
                            }
                          } catch (error) {
                            console.error('Error reporting:', error);
                          }
                        }
                      });
                    });
                  </script>



      </main>


      <aside class="right-sidebar">
        <div class="aside-2">
          <ul class="nav">
            <li class="nav-item current">Trending <span></span></li>
            <li class="nav-item">Hot <span> </span></li>
            <li class="nav-item">Loud <span> </span></li>
          </ul>
        </div>

        <!-- <div class="premium-aside">
    <div class="premium-card">
      <div class="crown-icon sparkle">👑</div>

      <h3 class="premium-title">Become a Chief Gossipa</h3>
      <p class="premium-text">Stand out in the World of anonymity. Get Heard. Remain Unknown.</p>

      <div class="trending-stats">
        <span>🔥 Trending Now: <strong>152</strong> Gissipas</span>
      </div>

      <div class="avatar-hint">
        <img src="/img/avatars/thumbs/dog.jpg" alt="Anonymous" class="blur-avatar" />
        <p>You’re 1 step from <strong>trending</strong>…</p>
      </div>

      <a href="/subscribe" class="premium-btn">Unlock  Exclusive</a>
    </div>
  </div> -->

        <div class="aside-2">
          <center>
            <h4 class="user-count"><button class="dot active animate-ping-once" data-slide="0"></button>&nbsp;Meet The
              Chiefs
              :<span id="activeCount">0</span></h4>
          </center>
          <ul class="nav user-list">
          </ul>

        </div>


        <div class="inpage-footer">
          <span>Privacy Policy</span>&nbsp;.
          &nbsp;<span>Terms of use</span> &nbsp;.
          &nbsp;<span>Community guidelines</span> &nbsp;.
          <br><br>
          &nbsp;<span>&copy; <%= new Date().getFullYear() %>, &commat; Gossipa Co. All rights reserved</span>
        </div>
      </aside>




      <script src="https://unpkg.com/lottie-web@5.10.0/build/player/lottie.min.js"></script>
      <!-- Load Day.js and the plugin via CDN -->
      <script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>
      <script>
        const searchWrapper = document.getElementById("mobileSearch");
        const toggleBtn = document.getElementById("toggleSearch");
        const searchInput = document.getElementById("searchInput");
        const suggestionsBox = document.getElementById("suggestions");

        let debounceTimer;

        toggleBtn.addEventListener("click", function (e) {
          if (window.innerWidth <= 768) {
            if (document.activeElement !== searchInput) {
              e.preventDefault();
              searchWrapper.classList.toggle("active");

              if (searchWrapper.classList.contains("active")) {
                searchInput.focus();
              } else {
                searchInput.value = "";
                suggestionsBox.innerHTML = "";
                suggestionsBox.style.display = "none"; // <- Hide it here
              }
            }
          } else {
            // Desktop validation
            if (searchInput.value.trim().length === 0) {
              e.preventDefault();
              suggestionsBox.innerHTML = "<li class='no-result'>Please enter a search keyword</li>";
              suggestionsBox.style.display = "block";
            }
          }
        });


        // Click outside to collapse
        document.addEventListener("click", function (e) {
          if (
            window.innerWidth <= 768 &&
            !searchWrapper.contains(e.target)
          ) {
            searchWrapper.classList.remove("active");
            searchInput.value = "";
            suggestionsBox.innerHTML = "";
          }
        });

        // Live search logic
        searchInput.addEventListener("keyup", function (e) {
          clearTimeout(debounceTimer);
          const query = this.value.trim();

          if (query.length === 0) {
            e.preventDefault()
            suggestionsBox.innerHTML = "";
            suggestionsBox.style.display = "none"; // <- Ensure it is hidden
            searchWrapper.classList.toggle("active");
            return;
          }

          suggestionsBox.style.display = "none"; // Reset before debounce

          debounceTimer = setTimeout(() => {
            fetch("/searching", {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ search: query })
            })
              .then(res => res.json())
              .then(data => {
                suggestionsBox.innerHTML = "";

                if (data.searchResults.length === 0) {
                  suggestionsBox.innerHTML = "<li class='no-result'>No result found</li>";
                  suggestionsBox.style.display = "block"; // <- Show only when needed
                  return;
                }

                suggestionsBox.style.display = "block";

                function highlightMatch(text, keyword) {
                  const regex = new RegExp(`(${keyword})`, "gi");
                  return text.replace(regex, "<mark>$1</mark>");
                }

                function toggleRead(e, btn, keyword) {
                  e.stopPropagation();
                  const textEl = btn.parentElement;
                  const raw = textEl.getAttribute("data-full");
                  const expanded = textEl.classList.contains("expanded");

                  if (!expanded) {
                    textEl.innerHTML = highlightMatch(raw, keyword);
                    const newBtn = document.createElement("button");
                    newBtn.textContent = "Show Less";
                    newBtn.className = "read-more";
                    newBtn.onclick = ev => toggleRead(ev, newBtn, keyword);
                    textEl.appendChild(newBtn);
                    textEl.classList.add("expanded");
                  } else {
                    const short = raw.slice(0, 150) + "...";
                    textEl.innerHTML = highlightMatch(short, keyword);
                    const newBtn = document.createElement("button");
                    newBtn.textContent = "Read More";
                    newBtn.className = "read";
                    newBtn.onclick = ev => toggleRead(ev, newBtn, keyword);
                    textEl.appendChild(newBtn);
                    textEl.classList.remove("expanded");
                  }
                }

                data.searchResults.forEach(item => {
                  const li = document.createElement("li");
                  li.classList.add("suggestion-item");

                  const short = item.secret.length > 50 ? item.secret.slice(0, 50) + "..." : item.secret;
                  const highlightedText = highlightMatch(item.secret, query);

                  li.innerHTML = `
            <span class="arrow">→</span>
             <div class="search-text short-text" data-full="${item.secret.replace(/"/g, '&quot;')}">
              ${highlightedText}
              ${item.secret.length > 50 ? '<button class="read-more" onclick="toggleRead(event, this, \'' + query + '\')">Read More</button>' : ''}
            </div>
          `;

                  suggestionsBox.insertBefore(li, document.getElementById("loadMore"));

                  li.addEventListener("click", () => {
                    window.location.href = `/secret/${item.id}`;
                  });

                  suggestionsBox.appendChild(li);
                });
              })
              .catch(err => {
                suggestionsBox.style.display = "none"; // fallback to hidden
                console.error("Live search error:", err);
              });
          }, 300);
        });

      </script>


      <script>
        const connectedUsersMap = new Map();
        const userList = document.querySelector(".user-list");
        const userCountDisplay = document.getElementById("activeCount");

        function updateUserCount() {
          userCountDisplay.textContent = connectedUsersMap.size;
        }

        function userConnected(user) {
          if (connectedUsersMap.has(user.id)) return;

          const userBox = document.createElement("li");
          userBox.className = "connected-user nav-item enter";
          userBox.id = `user-${user.id}`;

          const verifiedBadge = `${user.verified}`
            ? `<img src="/img/gossipa3.png" alt="Verified Badge" class="verified-badge"">`
            : "";

          userBox.innerHTML = `
    <div class="user-card" style="display: flex; align-items: center; gap: 10px;">
      <img src="${user.profile_picture}" alt="Avatar" class="profile-pic" style="width: 32px; height: 32px; border-radius: 50%;">
      <p class="username">
        <span class="user">@amebo${user.id}</span>
       ${verifiedBadge}
        </p>
    </div>
  `;

          userList.appendChild(userBox);
          connectedUsersMap.set(user.id, userBox);
          updateUserCount();

          // Trigger reflow for entry animation
          requestAnimationFrame(() => {
            userBox.classList.add("enter");
          });
        }

        function userDisconnected(userId) {
          const userBox = connectedUsersMap.get(userId);
          if (userBox) {
            userBox.classList.add("exit");
            userBox.classList.remove("enter");
            setTimeout(() => {
              userBox.remove();
              connectedUsersMap.delete(userId);
              updateUserCount();
            }, 400); // CSS transition match
          }
        }

        socket.on("userJoined", async (userId) => {
          try {
            const res = await fetch(`/user/${userId}`);
            const user = await res.json();
            userConnected(user);
          } catch (err) {
            console.error("Failed to fetch user data:", err);
          }
        });

        socket.on("userLeft", (userId) => {
          userDisconnected(userId);
        });

        // Load current active users on first load
        fetch("/active-users")
          .then(res => res.json())
          .then(users => {
            users.forEach(user => userConnected(user));
          })
          .catch(console.error);
      </script>

    </div>

    <script>
      document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.addEventListener('click', function (e) {
          e.preventDefault();
          showBrandLogo();

          setTimeout(() => {
            window.location.href = this.formAction;
          }, 2400); // give animation time to play
        });
      });

    </script>
    <script>
      dayjs.extend(window.dayjs_plugin_relativeTime);

      document.querySelectorAll('.timestamp').forEach((timeElem) => {
        const rawTimestamp = timeElem.getAttribute('data-raw');
        if (rawTimestamp) {
          const formatted = dayjs(rawTimestamp).fromNow();
          timeElem.textContent = formatted;
        }
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Simulate a short loading delay (optional)
        setTimeout(() => {
          // Hide shimmer placeholder
          document.getElementById("shimmer-container").style.display = "none";
          // Show real secrets
          document.getElementById("real-secrets").style.display = "block";
        }, 1000); // 1s delay – tweak as needed
      });
    </script>



    <script src="/js/app.js"></script>
    <script src="/js/defaultTheme.js"></script>
    <script src="/js/tutorial.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.12.0/lottie.min.js"></script>
  </body>