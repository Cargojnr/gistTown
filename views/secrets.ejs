<style>
  canvas {
    height: 50px;
  }

  .waveform {
    width: 100%;
    height: 50px;
  }

  .wrapper {
    z-index: 0 !important;
  }


  .wave-canvas {
    width: 100%;
  }

  .waveform,
  .wave-canvas {
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
  }

  .waveform.ready,
  .wave-canvas.ready {
    opacity: 1;
  }

  .wave-canvas.playing {
    filter: drop-shadow(0 0 12px rgba(127, 90, 240, 0.7));
    transition: filter 0.3s ease;
  }


  .wave-play-btn {
    background: var(--card-bg);
    border: none;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .wave-play-btn.playing {
    animation: pulseGlow 1.2s infinite;
    box-shadow: 0 0 12px rgba(127, 90, 240, 0.8);
    /* matches your theme color */
    border-radius: 50%;
    transform: scale(1.1);
    /* slight pop */
  }

  @keyframes pulseGlow {
    0% {
      box-shadow: 0 0 6px rgba(127, 90, 240, 0.6),
        0 0 12px rgba(127, 90, 240, 0.4);
    }

    50% {
      box-shadow: 0 0 14px rgba(127, 90, 240, 0.9),
        0 0 24px rgba(127, 90, 240, 0.6);
    }

    100% {
      box-shadow: 0 0 6px rgba(127, 90, 240, 0.6),
        0 0 12px rgba(127, 90, 240, 0.4);
    }
  }




  .trending #secrets {
    display: flex;
    align-items: center;
    flex-direction: row;
    gap: 10px;
    width: 100%;
    overflow-x: auto;
    overflow-y: hidden;
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
  }

  .trending .listen {
    margin: 0 !important;
  }


  .trend-box {
    display: flex;
    flex-direction: column;
    gap: .5rem;
    font-weight: 100 !important;
    height: 200px;
    width: 270px;
    border: 2px solid var(--primary-color);
    transition: opacity 0.5s ease, filter 0.5s ease;
    overflow: hidden;
    padding: 10px;
    border-radius: 15px;
    font-size: .9rem !important;
    font-family: 'Quicksand', sans-serif;
    scroll-snap-align: start;
    flex: 0 0 auto;
  }

  .trending .read {
    color: var(--secondary-color) !important;
  }

  .trending .controls {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
  }


  .trending .controls button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }


  .controls button {
    background: var(--secondary-color);
    border: var(--primary-color);
    padding: .75rem;
    font-size: 1rem;
    font-weight: bold;
    color: var(--text-color);
  }



  .shimmer-container {
    max-width: 900px !important;
    margin-top: 1rem;
  }

  .shimmer-wrapper {
    max-width: 900px !important;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    /* padding: 1rem; */
  }

  .shimmer-card {
    width: 100%;
    display: flex;
    background: var(--container-bg);
    border-radius: 10px;
    overflow: hidden;
    animation: pulse 1.5s infinite;
  }

  .shimmer-avatar {
    width: 50px;
    height: 50px;
    background: var(--body-bg);
    border-radius: 50%;
    margin: 1rem;
  }



  .shimmer-lines {
    flex: 1;
    padding: 1rem 0;
  }

  .shimmer-line {
    height: 10px;
    background: var(--body-bg);
    margin: 8px 0;
    border-radius: 5px;
  }

  .shimmer-line.short {
    width: 50%;
  }

  .shimmer-footer {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
  }

  .shimmer-btn {
    width: 40px;
    height: 20px;
    background: var(--body-bg);
    border-radius: 5px;
  }

  @keyframes pulse {
    0% {
      background-color: var(--container-bg);
    }

    50% {
      background-color: var(--body-bg);
    }

    100% {
      background-color: var(--container-bg);
    }
  }

  .shimmer {
    background: linear-gradient(90deg, var(--container-bg) 25%, var(--body-bg) 50%, var(--container-bg) 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }

    100% {
      background-position: 200% 0;
    }
  }


  .sections-container {
    padding: 2rem;
    background: var(--card-bg);
    border-radius: 20px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
    margin-top: 2rem;
    animation: fadeIn 0.6s ease-in;
  }

  .sections-title {
    font-size: 1.75rem;
    margin-bottom: 0.25rem;
  }

  .sections-subtext {
    font-size: 1rem;
    color: var(--text-muted);
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .sections-scroll {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(230px, 1fr));
    gap: 1.25rem;
  }

  .section-card {
    background: var(--glass-bg);
    border-radius: 16px;
    padding: 1.25rem;
    text-align: center;
    transition: transform 0.2s ease, box-shadow 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    color: var(--text-primary);
  }

  .section-card:hover {
    transform: translateY(-6px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
    background: var(--highlight-bg);
  }

  .icon-circle {
    background: var(--primary-faded);
    width: 60px;
    height: 60px;
    border-radius: 50%;
    margin: 0 auto 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }


  /* Glass Card Base */
  .glass-card {
    background: var(--glass);
    border-radius: 20px;
    backdrop-filter: var(--blur);
    -webkit-backdrop-filter: var(--blur);
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
    padding: 1.5rem;
    margin-bottom: 2rem;
    animation: fadeInUp 0.5s ease;
  }

  /* Profile Header */
  .profile-header {
    display: flex;
    gap: 1rem;
    align-items: center;
    flex-wrap: wrap;
    background: var(--container-bg);
    padding: 1rem;
    border-radius: 30px;
  }

  #pinned-secret {
    width: 100% !important;
  }

  .pin-card .card {
    padding: .5rem !important;
  }

  .avatar-profile img:hover {
    transform: scale(1.05);
  }

  .profile-info h2 {
    margin: 0;
    font-size: 1.8rem;
  }

  .profile-info .tagline {
    color: var(--text-muted);
    font-style: italic;
    margin-bottom: 1rem;
  }

  .quick-stats {
    display: flex;
    gap: 1.5rem;
    margin: 1rem 0;
  }

  .stat {
    text-align: center;
  }

  .stat strong {
    font-size: 1.2rem;
    color: var(--primary);
  }

  /* Buttons */
  .edit-profile-btn,
  .edit,
  .delete,
  .read-more,
  .edit-comment,
  .delete-comment {
    background: var(--primary);
    color: var(--text);
    border: none;
    border-radius: 8px;
    padding: 0.5rem 1rem;
    margin-top: 0.5rem;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .edit-profile-btn:hover,
  .read-more:hover,
  .edit-comment:hover,
  .delete-comment:hover {
    background: var(--secondary);
  }


  .card-actions {
    margin-top: 1rem;
    display: flex;
    gap: 0.5rem;
  }

  .card-actions button {
    font-size: 0.9rem;
  }

  /* Reactions */
  .reaction-info,
  .reaction-counters {
    margin-top: 1rem;
    display: flex;
    gap: 1rem;
    font-size: 1.1rem;
  }

  .reaction-counters .counter {
    background: var(--highlight);
    padding: 0.5rem 1rem;
    border-radius: 12px;
  }


  /* Followers */
  .follow-stats {
    display: flex;
    gap: 2rem;
    font-size: 1rem;
  }

  .followers,
  .following {
    background: var(--highlight);
    padding: 0.75rem 1.25rem;
    border-radius: 10px;
  }

  /* Animations */
  @keyframes fadeInUp {
    0% {
      transform: translateY(16px);
      opacity: 0;
    }

    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }

  /* Responsive */
  @media (max-width: 768px) {
    .profile-header {
      flex-direction: column;
      align-items: flex-start;
    }

    .sections-scroll {
      flex-direction: column;
    }

    .stack-wrapper {
      position: relative;
      height: 420px;
      /* Adjust height as needed */
      overflow: hidden;
    }

    .section-card.sand {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      opacity: 0;
      pointer-events: none;
      transform: scale(0.95) translateY(20px);
      transition: all 0.4s ease;
      z-index: 0;
    }

    .section-card.sand.active {
      opacity: 1;
      pointer-events: auto;
      transform: scale(1) translateY(0);
      z-index: 10;
      box-shadow: 0 12px 20px rgba(0, 0, 0, 0.2);
    }

    .stack-indicator {
      text-align: center;
      margin-top: 10px;
    }

    .stack-next-btn {
      background: #333;
      color: white;
      padding: 6px 18px;
      border: none;
      border-radius: 999px;
      font-size: 0.9rem;
      cursor: pointer;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }
  }

  .badge {
    background: #444;
    color: #ffd54f;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.75rem;
    text-transform: capitalize;
  }

  /* Live Stream Bar */
  #live-stream-bar {
    display: flex;
    justify-content: space-between;
    overflow-x: auto;
    padding: 5px 2px;
    /* background: linear-gradient(135deg, var(--primary-color), var(--secondary-color)); */
    border-radius: 0 0 18px 18px;
    position: sticky;
    top: 0;
    z-index: 10;
    margin-top: .5rem;
  }

  #live-stream-bar::-webkit-scrollbar {
    display: none;
  }

  /* Sticky Start Button */
  #startStreamBtn {
    flex: 0 0 auto;
    min-width: 110px;
    height: 150px;
    position: sticky;
    left: 0;
    background: linear-gradient(135deg, #ec4899, #8b5cf6);
    color: white;
    border-radius: 20px;
    font-weight: 600;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-right: 12px;
    border: none;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    z-index: 10;
    cursor: pointer;
  }

  #startStreamBtn:hover {
    transform: scale(1.05);
  }



  #postContainer {
    padding: .75rem 1rem;
    position: relative;
    width: 100%;
    height: 150px;
    border: 3px solid var(--primary-color);
    background: var(--container-bg);
    border-radius: 30px !important;
  }

  #postContainer .avatar-profile {
    border: 1px solid var(--primary-color);
  }

  #postContainer textarea {
    padding: 1rem;
    width: 100%;
    height: auto;
    overflow: hidden;
    outline: none;
    border: none;
    color: var(--text-color);
    background: var(--container-bg);
    border-radius: 30px !important;
    font-family: 'Quicksand', sans-serif;
  }

  #postContainer .submit {
    border: none;
    background: transparent;
    color: var(--secondary-color);
    padding: .5rem;
    font-size: 2.75rem !important;
  }

  #submitModal {
    z-index: 10;
  }

  .post-action {
    position: absolute;
    right: 0%;
    bottom: 5%;
  }

  .ghost-hint {
    color: var(--text-muted);
    font-size: 0.8em;
    display: block;
    font-style: italic;
    opacity: 0;
    transform: translateY(5px);
    transition: opacity 0.4s ease, transform 0.4s ease;
  }

  .ghost-hint.visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Initial hidden state */
  .hidden {
    display: none;
    opacity: 0;
    pointer-events: none;
    transform: translateY(10px);
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  /* Active visible state */
  .visible {
    display: block;
    opacity: 1;
    transform: translateY(0);
  }

  /* Optional container fade if needed */
  .form-transition-container {
    position: relative;
    min-height: 200px;
  }

  #scroll-indicator {
    position: fixed;
    bottom: 2rem;
    left: 47%;
    transform: translateX(-50%);
    display: none;
    flex-direction: column;
    align-items: center;
    font-size: .9rem;
    color: var(--muted-foreground);
    animation: fadeInUp 1.2s ease-out forwards;
  }

  #scroll-indicator svg {
    color: var(--secondary-color);
    animation: bounce 1.5s infinite ease-in-out;
  }

  @media (min-width: 1024px) {
    #scroll-indicator {
      display: flex;
    }
  }

  @keyframes bounce {

    0%,
    100% {
      transform: translateY(0px);
    }

    50% {
      transform: translateY(10px);
    }
  }

  .toast {
    background: var(--primary-faded);
    color: var(--text-color);
    padding: 12px 20px;
    border-radius: 8px;
    margin: auto;
    max-width: 300px;
    text-align: center;
    box-shadow: 0 4px 14px rgba(0, 0, 0, 0.1);
    animation: fadein 0.3s ease, fadeout 0.3s ease 2.5s;
  }

  @keyframes fadein {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeout {
    from {
      opacity: 1;
      transform: translateY(0);
    }

    to {
      opacity: 0;
      transform: translateY(-10px);
    }
  }

  .share-modal {
    display: none;
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(5px);
    color: #fff;
    justify-content: center;
    align-items: center;
    z-index: 2 !important;
  }

  .share-modal .modal-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: .5rem;
    margin-top: -1rem;
  }


  .share-link {
    padding: .5rem;
    width: auto;
    font-size: 1rem;
    color: #fff;
    font-weight: 300;
    background: var(--secondary-color);
    border: none;
  }

  .socials {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    margin: .5rem;
  }

  .socials .share-whatsApp {
    color: green !important;
  }

  .socials .share-messenger {
    color: royalblue !important;
  }

  .socials .share-snapchat {
    color: yellow !important;
  }

  .socials .share-twitter {
    color: var(--text-color) !important;
  }

  .close-share-modal,
  .copy-link {
    color: #fff !important;
  }
</style>

<%- include("partials/brand-loader.ejs") %>

  <div id="main">

    <div id="tutorial-overlay" class="hidden">
      <div class="tutorial-step">
        <div class="tutorial-text">
          <h2> <span style="text-transform: capitalize;">
              <%= username %>
            </span> Welcome to <span class="text-gradient">Echoes</span>. Where Voices Echo!</h2>
          <p>Step into the vibe — a safe space where whispers turn to echoes and stories find their sound.<br>
            Share your voice, drop your gist, or tune in to others. Here, every echo matters and every vibe is welcomed.
          </p>
        </div>


        <div id="progress-bar-container">
          <div id="progress-bar"></div>
        </div>
        <button id="next-step">Next</button>
        <button class="skip-btn">Skip</button>
      </div>
    </div>

    <section class="main">

      <div class="jumbotron text-center">
        <div class="container">
          <div id="feeds">

            <section id="live-stream-bar">
              <!-- Sticky Start Gist Button -->

              <!-- <button id="startStreamBtn">
                  <div class="plus-icon">➕</div>
                  <span>Stream Gist</span>
                </button> -->


              <div id="postContainer">
                <div class="card-header">

                  <div class="userdetails">
                    <a href="" class="avatar-profile thumb">
                      <img oncontextmenu="return false;" src="<%= profilePicture %>" alt="" class="profile pic thumb">
                    </a>
                  </div>

                  <textarea name="" id="posting" placeholder="Hey  <%= stealthMode ? " voice" + userId : username
                    %> spill the milk"></textarea>
                  <div class="post-action">
                    <p class="word-count">0/<span id="wordCount">150</span></p>
                    <button class="submit" id="quickShareBtn" title="Share"><abbr title="share">
                        <span></span><i class="fas fa-paper-plane"></i>
                      </abbr></button>
                  </div>

                  <div class="actions">
                    <button onclick="openModal('','text')"><abbr title="text">
                        <i class="fas fa-pen-to-square"></i>
                      </abbr></button>
                    <button id="openSubmitForm" onclick="openModal('','audio')" class="create">
                      <abbr title="Audio"><i class="fas fa-microphone"></i></abbr>
                    </button>
                    <select name="" id="" class="view">
                      <option value="" class="nav-text">Views <i class="fas fa-eye-slash"></i></option>
                      <option value="public">For All</option>
                      <option value="exclusive">For Chiefs</option>
                      <option value="private">For myself only</option>
                    </select>
                  </div>

                </div>
              </div>


              <div id="submitModal" class="modal">
                <div id="tutorial-overlay">

                  <div class="modal-content">
                    <span class="close-btn">&times;</span>

                    <div id="submitFormContainer">
                      <!-- Server-rendered form will be injected here -->

                    </div>
                  </div>
                  <div class="spinner"></div>
                </div>
              </div>

              <script>

                window.onload = function () {
                  const textArea = document.querySelector('.modal textarea')
                  if (textArea) textArea.blur();
                }



                function changeBg(event) {
                  event.target.style.background = "var(--secondary-color)"
                  event.target.style.border = "1px solid var(--primary-color)"
                }
              </script>

            </section>


            <div id="topOverlay"></div>
            <div id="bottomOverlay"></div>



            <div id="shimmer-container" class="shimmer-container full-width">
              <ul>
                <% for (let i=0; i < feeds.length; i++) { %>
                  <li class="secret shimmer-placeholder">
                    <div class="card">
                      <div class="shimmer-wrapper">
                        <div class="shimmer-card">
                          <div class="shimmer-avatar"></div>
                          <div class="shimmer-lines">
                            <div class="shimmer-line short"></div>
                            <div class="shimmer-line"></div>
                            <div class="shimmer-line"></div>
                            <div class="shimmer-footer">
                              <div class="shimmer-btn"></div>
                              <div class="shimmer-btn"></div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </li>
                  <% } %>
              </ul>
            </div>


            <div id="real-secrets" style="display: none;">
              <ul id="secrets">
                <button id="alertAvatar">
                  <p>Just In</p>
                  <div class="alert-avatar"></div>
                  <i class="fas fa-arrow-up"></i>
                </button>
                <% feeds.forEach((post)=> { %>
                  <% if (post.type==='text' ) { %>

                    <li class=" secret text full-width" id="secret<%= post.id %>" data-type="<%= post.type %>">

                      <div class="card">
                        <div class="card-header">
                          <div class="user-details header<%= post.user_id %>">
                            <a href="<%=post.user_id===userId ? '/profile' : '/profile/user/' + post.user_id %>"
                              class="avatar-profile"><img oncontextmenu="return false;"
                                src="<%= post.profile_picture %>" alt="Profile Picture" class="profile-pic"></a>
                            <div class="user-info">
                              <a href=<%=post.user_id===userId ? '/profile' : '/profile/user:' + post.user_id %>>
                                <p class="username user<%= post.user_id %>">
                                  <% if (post.stealth_mode) {%>
                                    <span class="user">@voice<%= post.user_id %></span>
                                    <% } else { %>
                                      <span class="user">@<%= post.username %></span>
                                      <% } %>
                                        <% if(post.verified===true) {%>
                                          <abbr title="Exclusive Membership"> <img oncontextmenu="return false;"
                                              src="../../img/gossipa3.png" alt="" class="verified-badge"></abbr>
                                          <% } else {%>

                                            <% } %>
                                </p>

                              </a>
                              <span class="timestamp" data-raw="<%= post.timestamp %>"></span>
                            </div>
                            <span class="you-live-badge hidden">🎙️Live</span>
                            <span id="streamEndedNotice" class="badge ended hidden">Stream Ended ✓</span>
                          </div>
                          <% if(userId !==post.user_id) {%>
                            <button data-targetid="<%= post.user_id %>" class="listen"><i
                                class="fas fa-ear-deaf"></i>&nbsp;<span>Resonate</span></button>
                            <% } else { %>
                              <button class="listen listening">Visit profile</button>
                              <% } %>
                        </div>

                        <div class="card-content">
                          <p>
                            <span class="content">
                              <% if (post.secret.split(" ").length > 150) { %>
                    <%= post.secret.substring(0, 150) + " ..." %>
                                <% } else { %>
                                  <%= post.secret %>
                                    <% } %>
                            </span>

                            <% if (post.secret.split(" ").length > 150) { %>
                                  <button class=" read" data-full="<%= post.secret %>"
                              data-truncated="<%= post.secret.substring(0, 150) + '...' %>">
                              See all
                              </button>
                              <% } %>

                          </p>
                        </div>


                        <div class="comment-section" data-post-id="<%= post.id %>" data-type="<%= post.type %>">

                          <div class="reactions sleek">
                            <div class="first-action">
                              <div class="secret-card" data-id="<%= post.id %>">
                                <div class="reaction">
                                  <button class="reaction-btn " data-type="hot">
                                    <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                    <img oncontextmenu="return false;" src="../../img/premium-reaction.png" alt="🔥"
                                      class="premium-reaction">

                                    <div class="reaction-class-wrapper">
                                      <span class="reaction-count none">
                                        <%= formatCount(post.reactions.hot ? post.reactions.hot.count : 0) %>
                                      </span>
                                    </div>
                                  </button>

                                  <button class="reaction-btn " data-type="like">
                                    <!-- <div id="like-animation" class="lottie-animation"></div> -->
                                    👍
                                    <div class="reaction-class-wrapper">


                                      <span class="reaction-count none">
                                        <%= formatCount(post.reactions.like ? post.reactions.like.count : 0) %>
                                      </span>
                                    </div>
                                  </button>

                                  <button class="reaction-btn " data-type="laugh">
                                    <!-- <div id="laugh-animation" class="lottie-animation"></div> -->

                                    😂
                                    <div class="reaction-class-wrapper">

                                      <span class="reaction-count none">
                                        <%= formatCount(post.reactions.laugh ? post.reactions.laugh.count : 0) %>
                                      </span>
                                    </div>

                                  </button>

                                  <!-- <button class="reaction-btn " data-type="cry">

                                                        😢
                                                        <div class="reaction-class-wrapper">

                                                        <span class="reaction-count none">
                                                          <%= formatCount(post.reactions.cry ? post.reactions.cry.count : 0) %>
                                                        </span>
                                                        </div>
                                                        
                                                      </button> -->

                                  <button class="reaction-btn " data-type="gasp">
                                    <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                    😱
                                    <div class="reaction-class-wrapper">

                                      <span class="reaction-count none">
                                        <%= formatCount(post.reactions.gasp ? post.reactions.gasp.count : 0) %>
                                      </span>
                                    </div>

                                  </button>

                                </div>

                              </div>

                              <button id="commentButton"><i class="fas fa-comment"></i><span
                                  class="comment-count"></span>
                              </button>
                            </div>

                            <ul class="second-action">
                              <li>
                                <abbr title="Bookmark">
                                  <button class="bookmark-btn" data-id="<%= post.id %>" data-type="<%= post.type %>">
                                    <i class="fas fa-bookmark"></i>
                                  </button>
                                </abbr>
                              </li>

                              <li>
                                <button class="share-btn ">
                                  <abbr title="Share"><i class="fas fa-upload"></i></abbr>
                                </button>
                              </li>


                              <!-- Share Modal -->
                              <div class="share-modal" class="modal hidden">
                                <div class="modal-content">
                                  <h2>Spread the Word 🐦✨</h2>
                                  <p>Share this echo with your crew and keep the buzz alive!</p>

                                  <div class="link-box">
                                    <input class="share-link" type="text" readonly>
                                    <button class="copy-link">Copy</button>
                                  </div>

                                  <ul class="socials">
                                    <li>
                                      <a class="share-twitter" target="_blank"><i class="fab fa-twitter fa-2x"></i>
                                      </a>
                                    </li>
                                    <li>
                                      <a class="share-whatsApp" target="_blank"><i
                                          class="fab fa-whatsapp fa-2x"></i></a>
                                    </li>
                                    <li>
                                      <a class="share-snapchat" target="_blank"><i
                                          class="fab fa-snapchat fa-2x"></i></a>
                                    </li>
                                    <li>
                                      <a class="share-messenger" target="_blank"><i class="fab fa-facebook fa-2x"></i>
                                      </a>
                                    </li>

                                  </ul>

                                  <button class="close-share-modal"><i class="fas fa-xmark"></i> Close</button>
                                </div>
                              </div>

                            </ul>

                          </div>

                          <div class="comment-dropdown" id="commentDropdown">
                            <form class="comment-display" method="POST" id="commentDisplay">
                              <p class="total"></p>
                              <ul id="comments" class="comments-list"></ul>
                            </form>

                            <form action="/comment" method="POST" id="comment-form">
                              <input type="hidden" name="id" id="secretId" value="<%= post.id %>" />
                              <input type="hidden" name="secretUserId" value="<%= post.user_id %>" />
                              <input type="hidden" name="commentUserId" value="<%= userId %>" />
                              <textarea id="commentInput" placeholder="Share your thought..." name="comment"></textarea>
                              <!-- <input type="text" id="commentInput" placeholder="Write a comment" name="comment"> -->
                              <button id="postCommentButton">
                                <!-- Post -->
                                <i class="fas fa-arrow-up"></i>
                              </button>
                              <% if (locals.message) { %>
                                <small>
                                  <%= message %>
                                </small>
                                <% } %>
                            </form>

                          </div>
                        </div>


                        <div class="card-menu">
                          <button class="card-toggle-btn"><i class="fas fa-ellipsis-vertical"></i></button>
                          <% if (userId===post.user_id) { %>
                            <form method="post" id="update" class="card-menu-content" style="display: none;">
                              <input type="hidden" name="secId" id="secId" value="<%= post.id %>" />

                              <button class="edit" type="submit" formaction="/edit">
                                <abbr title="Edit your post">
                                  Edit&nbsp;<i class="fas fa-file-pen"></i>
                                </abbr>
                              </button>


                              <button class="delete" type="click">
                                <abbr title="Delete your post">
                                  Delete&nbsp;<i class="fas fa-trash"></i>
                                </abbr>
                              </button>

                            </form>
                            <% } else {%>
                              <ul class="card-menu-content" style="display: none;">
                                <li>
                                  <button class="report-btn" data-id="<%= post.id %>">
                                    <abbr title="report a post">
                                      <i class="fa-regular fa-flag"></i>&nbsp;Report
                                    </abbr>
                                  </button>
                                </li>
                              </ul>
                              <% } %>
                        </div>

                      </div>
                    </li>

                    <% } else if (post.type==='audio' ) { %>
                      <!-- Audio post UI -->
                      <li class="secret audio full-width" data-type="<%= post.type %>">
                        <div class="card ">
                          <div class="card-header">
                            <div class="user-details header<%= post.user_id %>">
                              <a href="/profile/user:<%= post.user_id %>" class="avatar-profile"><img
                                  oncontextmenu="return false;" src="<%= post.profile_picture %>" alt="Profile Picture"
                                  class="profile-pic"></a>
                              <div class="user-info">
                                <a href=<%=post.user_id===userId ? '/profile' : '/profile/amebo/' + post.user_id %>>
                                  <p class="username user<%= post.user_id %>">
                                    <% if (post.stealth_mode) {%>
                                      <span class="user">@voice<%= post.user_id %></span>
                                      <% } else { %>
                                        <span class="user">@<%= post.username %></span>
                                        <% } %>
                                          <% if(post.verified===true) {%>
                                            <abbr title="Exclusive Membership"> <img oncontextmenu="return false;"
                                                src="../../img/gossipa3.png" alt="" class="verified-badge"></abbr>
                                            <% } else {%>

                                              <% } %>
                                  </p>

                                </a>
                                <span class="timestamp" data-raw="<%= post.timestamp %>"></span>
                              </div>
                              <span class="you-live-badge hidden">🎙️Live</span>
                              <span id="streamEndedNotice" class="badge ended hidden">Stream Ended ✓</span>
                            </div>
                            <% if(userId !==post.user_id) {%>
                              <button data-targetid="<%= post.user_id %>" class="listen"><i
                                  class="fas fa-ear-deaf"></i>&nbsp;<span>Resonate</span></button>
                              <% } else { %>
                                <button class="listen listening">Visit profile</button>
                                <% } %>
                          </div>

                          <div class="waveform-wrapper">
                            <div id="waveform-<%= post.id %>"></div>
                            <canvas id="visualizer-<%= post.id %>" class="wave-canvas"></canvas>
                            <button class="wave-play-btn" data-id="<%= post.id %>">▶️</button>
                          </div>

                          <div class="comment-section" data-post-id="<%= post.id %>" data-type="<%= post.type %>">

                            <div class="reactions sleek">
                              <div class="first-action">
                                <div class="secret-card" data-id="<%= post.id %>">
                                  <div class="reaction">
                                    <button class="reaction-btn " data-type="hot">
                                      <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                      <img oncontextmenu="return false;" src="../../img/premium-reaction.png"
                                        alt="Premium exclusive fire, hot reaction" class="premium-reaction">

                                      <div class="reaction-class-wrapper">
                                        <span class="reaction-count none">
                                          <%= formatCount(post.reactions.hot ? post.reactions.hot.count : 0) %>
                                        </span>
                                      </div>
                                    </button>

                                    <button class="reaction-btn " data-type="like">
                                      <!-- <div id="like-animation" class="lottie-animation"></div> -->
                                      👍
                                      <div class="reaction-class-wrapper">


                                        <span class="reaction-count none">
                                          <%= formatCount(post.reactions.like ? post.reactions.like.count : 0) %>
                                        </span>
                                      </div>
                                    </button>

                                    <button class="reaction-btn " data-type="laugh">
                                      <!-- <div id="laugh-animation" class="lottie-animation"></div> -->

                                      😂
                                      <div class="reaction-class-wrapper">

                                        <span class="reaction-count none">
                                          <%= formatCount(post.reactions.laugh ? post.reactions.laugh.count : 0) %>
                                        </span>
                                      </div>

                                    </button>

                                    <!-- <button class="reaction-btn " data-type="cry">
  
                                                          😢
                                                          <div class="reaction-class-wrapper">
  
                                                          <span class="reaction-count none">
                                                            <%= formatCount(post.reactions.cry ? post.reactions.cry.count : 0) %>
                                                          </span>
                                                          </div>
                                                          
                                                        </button> -->

                                    <button class="reaction-btn " data-type="gasp">
                                      <!-- <div id="gasp-animation" class="lottie-animation"></div> -->
                                      😱
                                      <div class="reaction-class-wrapper">

                                        <span class="reaction-count none">
                                          <%= formatCount(post.reactions.gasp ? post.reactions.gasp.count : 0) %>
                                        </span>
                                      </div>

                                    </button>

                                  </div>

                                </div>

                                <button id="commentButton"><i class="fas fa-comment"></i><span
                                    class="comment-count"></span>
                                </button>
                              </div>

                              <ul class="second-action">
                                <li>
                                  <abbr title="Bookmark">
                                    <button class="bookmark-btn" data-id="<%= post.id %>" data-type="<%= post.type %>">
                                      <i class="fas fa-bookmark"></i>
                                    </button>
                                  </abbr>
                                </li>

                              </ul>

                            </div>

                            <div class="comment-dropdown" id="commentDropdown">
                              <form class="comment-display" method="POST" id="commentDisplay">
                                <p class="total"></p>
                                <ul id="commentList" class="comments-list"></ul>
                              </form>

                              <form action="/comment" method="POST" id="comment-form">
                                <input type="hidden" name="audioId" id="audioId" value="<%= post.id %>" />
                                <input type="hidden" name="secretUserId" value="<%= post.user_id %>" />
                                <input type="hidden" name="commentUserId" value="<%= userId %>" />
                                <textarea id="commenShare your thoughtlder=" Write a comment..."
                                  name="comment"></textarea>
                                <!-- <input type="text" id="commentInput" placeholder="Write a comment" name="comment"> -->
                                <button id="postCommentButton">
                                  <!-- Post -->
                                  <i class="fas fa-paper-plane"></i>
                                </button>
                                <% if (locals.message) { %>
                                  <small>
                                    <%= message %>
                                  </small>
                                  <% } %>
                              </form>

                            </div>
                          </div>



                          <div class="card-menu">
                            <button class="card-toggle-btn"><i class="fas fa-ellipsis-vertical"></i></button>
                            <% if (userId===post.user_id) { %>
                              <form method="post" id="update" class="card-menu-content" style="display: none;">
                                <input type="hidden" name="id" id="audioId" value="<%= post.id %>" />

                                <button class="delete" type="click">
                                  <abbr title="Delete your post">
                                    Delete&nbsp;<i class="fas fa-trash"></i>
                                  </abbr>
                                </button>

                              </form>
                              <% } else {%>
                                <ul class="card-menu-content" style="display: none;">
                                  <li>
                                    <button class="report-btn" data-id="<%= post.id %>">
                                      <abbr title="Report a post">
                                        <i class="fa-regular fa-flag"></i>&nbsp;Report
                                      </abbr>
                                    </button>
                                  </li>
                                </ul>
                                <% } %>
                          </div>


                        </div>
                      </li>
                      <% } %>
                        <% }) %>

                          <div id="scroll-indicator">
                            <span>Scroll to explore</span>
                            <svg viewBox="0 0 24 24" width="24" height="24">
                              <path d="M12 5v14M19 12l-7 7-7-7" stroke="currentColor" stroke-width="2"
                                stroke-linecap="round" stroke-linejoin="round" />
                            </svg>
                          </div>

              </ul>
            </div>
          </div>
        </div>
      </div>

      <script src="https://unpkg.com/wavesurfer.js"></script>
      <script>
        const audioPosts = <% - JSON.stringify(audioPost) %>; // This is now an array on the client
      </script>

      <script>
        let activeWave = null;
        let activeBtn = null;

        function setupVisualizer(audioElement, canvas, waveInstance) {
          const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
          const analyser = audioCtx.createAnalyser();
          const source = audioCtx.createMediaElementSource(audioElement);
          const ctx = canvas.getContext("2d");

          source.connect(analyser);
          analyser.connect(audioCtx.destination);
          analyser.fftSize = 256;

          const bufferLength = analyser.frequencyBinCount;
          const dataArray = new Uint8Array(bufferLength);
          canvas.width = canvas.offsetWidth;
          canvas.height = canvas.offsetHeight;

          const width = canvas.width;
          const height = canvas.height;
          const barWidth = width / bufferLength;

          function draw() {
            requestAnimationFrame(draw);
            analyser.getByteFrequencyData(dataArray);
            ctx.clearRect(0, 0, width, height);

            dataArray.forEach((value, i) => {
              const barHeight = (value / 255) * height;
              const hue = (i / bufferLength) * 360;
              ctx.fillStyle = `hsl(${hue}, 75%, 55%)`;
              ctx.shadowBlur = 20;
              ctx.shadowColor = `hsl(${hue}, 70%, 55%)`;
              ctx.fillRect(i * barWidth, height - barHeight, barWidth - 1, barHeight);
            });
          }

          const startDrawing = () => {
            audioCtx.resume();
            draw();
          };

          waveInstance.on("play", startDrawing);
        }

        function initAudioPost(postId, audioUrlFromPost) {
          const waveformElement = document.querySelector(`#waveform-${postId}`);
          const canvas = document.getElementById(`visualizer-${postId}`);
          const audioPost = audioPosts.find(f => f.id == postId);
          const audioUrl = document.querySelector(`#secret${postId} .waveform-wrapper`)?.dataset?.url
            || audioPost?.url || audioUrlFromPost;

          if (!waveformElement || !canvas || !audioUrl) {
            console.warn("Missing waveform, canvas, or audio URL for post:", postId);
            return;
          }

          // Initialize WaveSurfer
          const wave = WaveSurfer.create({
            container: waveformElement,
            waveColor: "#bbb",
            progressColor: "#7f5af0",
            height: 40,
            responsive: true,
            barWidth: 2,
            barGap: 2,
            normalize: true
          });

          wave.load(audioUrl);

          // Hook play button
          const playBtn = document.querySelector(`.wave-play-btn[data-id='${postId}']`);
          if (playBtn) {
            playBtn.addEventListener("click", () => {
              if (activeWave && activeWave !== wave) {
                activeWave.pause();
                if (activeBtn) {
                  activeBtn.innerText = "▶️";
                  activeBtn.classList.remove("playing");
                }
              }
              wave.playPause();
            });

            wave.on("play", () => {
              activeWave = wave;
              activeBtn = playBtn;
              playBtn.innerText = "⏸️";
              playBtn.classList.add("playing");
              canvas.classList.add("playing");
            });

            wave.on("pause", () => {
              playBtn.innerText = "▶️";
              playBtn.classList.remove("playing");
              canvas.classList.remove("playing");
            });

            wave.on("finish", () => {
              playBtn.innerText = "▶️";
              playBtn.classList.remove("playing");
              canvas.classList.remove("playing");
            });
          }

          // Visualizer
          wave.on("ready", () => {
            const audio = wave.media;
            setupVisualizer(audio, canvas, wave);
            waveformElement.classList.add("ready");
            canvas.classList.add("ready");
          });
        }

        // Initialize all existing audio posts
        document.querySelectorAll(".waveform-wrapper").forEach(wrapper => {
          const postId = wrapper.querySelector(".wave-play-btn")?.dataset.id;
          if (postId) initAudioPost(postId);
        });

        // When new post is added dynamically, call initAudioPost(newPostId)
      </script>



      <center class="bottom-message" id="scrollEndMessage">
        <p>Reached the bottom. Scroll back to top </p>
      </center>

      <script>
        document.addEventListener('DOMContentLoaded', () => {
          const scrollEndMessage = document.getElementById('scrollEndMessage');
          const scrollIndicator = document.getElementById("scroll-indicator")

          window.addEventListener('scroll', () => {
            const scrollPosition = window.scrollY + window.innerHeight;
            const pageHeight = document.body.offsetHeight;

            if (scrollPosition >= pageHeight - 50 && window.innerWidth > 768) {
              // User reached near bottom
              scrollIndicator.style.display = 'none'
              scrollEndMessage.style.opacity = '1';
              scrollEndMessage.style.zIndex = '100'
            } else {
              scrollEndMessage.style.opacity = '0';
              scrollIndicator.style.display = 'flex'
            }
          });
        });
      </script>


      <script>
        document.addEventListener('DOMContentLoaded', () => {
          const cards = document.querySelectorAll('#secrets .card');

          const observer = new IntersectionObserver((entries, obs) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                entry.target.classList.add('visible');
                obs.unobserve(entry.target); // STOP observing after it becomes visible
              }
            });
          }, {
            threshold: 0.5,
            rootMargin: '-50px 0px -60px 0px'
          });

          cards.forEach(card => observer.observe(card));
        });

      </script>



      <script>
        const postingInput = document.getElementById("posting");
        const wordCountText = document.querySelector(".word-count");
        const submitFormContainer = document.getElementById("submitFormContainer");
        const submitModal = document.getElementById("submitModal");
        let throttleTimeout = null;
        let modalInitialized = false;

        // Restore saved draft on load
        window.addEventListener("DOMContentLoaded", () => {
          const savedDraft = localStorage.getItem("gossipa_draft");
          if (savedDraft) {
            postingInput.value = savedDraft;
            updateWordCount();
          }
        });

        postingInput.addEventListener("input", function () {
          postingInput.style.height = "auto";

          // Set height based on scroll height
          postingInput.style.height = postingInput.scrollHeight + "px";

          // Keep cursor in view if max-height is hit
          postingInput.scrollTop = postingInput.scrollHeight;

          updateWordCount();

          const posting = this.value.trim();

          // Save draft
          localStorage.setItem("gossipa_draft", posting);

          if (posting.length <= 150) return;

          // Prevent multiple modals via throttle
          if (throttleTimeout) return;
          throttleTimeout = setTimeout(() => {
            openModal(posting);
            throttleTimeout = null;
          }, 300);
        });

        document.getElementById("openSubmitForm").addEventListener("click", () => openModal("", "audio"));


        function updateWordCount() {
          const count = postingInput.value.length;
          wordCountText.firstChild.textContent = `${count}/`;
        }

        function openModal(prefilledText = "", mode = "text") {
          updateWordCount();
          // if (window.innerWidth <= 768) {
          //   window.location.href = "/submit";
          //   return;
          // }

          submitModal.style.display = "flex";

          if (modalInitialized) {
            hydrateForm(prefilledText, mode);
            mode === "audio" ? showAudioForm() : showTextForm();
            return;
          }

          fetch("/partial-submit")
            .then(res => res.text())
            .then(html => {
              submitFormContainer.innerHTML = html;
              modalInitialized = true;
              setTimeout(() => {
                hydrateForm(prefilledText, mode);

                //  🔑 Re-bind the form handler after injection
                const textForm = document.getElementById("textSubmitForm");
                if (textForm) {
                  textForm.addEventListener("submit", async (event) => {
                    event.preventDefault();

                    const postInput = document.getElementById('postInput');
                    const secret = postInput.value;
                    const category = document.querySelector('#visibilityOptions .selected')?.dataset.value || "public";

                    if (!secret) {
                      showToast("You can't submit an empty gist!")
                      return;
                    }

                    const postButton = textForm.querySelector("#share");

                    postButton.disabled = true;
                    postButton.querySelector("span").innerHTML = `<div class="button-spinner"></div>`;


                    try {
                      const response = await fetch('/share', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                          secret,
                          category,
                          contentType: 'text'
                        }),
                      });

                      const result = await response.json();

                      postButton.disabled = false;
                      postButton.querySelector("span").innerHTML = ``;

                      if (result.success) {
                        handlePostSuccess(result);
                        postInput.value = ""; // clear modal form
                      }
                    } catch (error) {
                      console.error('Error:', error);
                      showToast("An error occurred. Please try again later.")
                    }
                  });
                }

              }, 150);

              setTimeout(() => {
                hydrateForm(prefilledText, mode);

                // 🔥 Audio form rebind
                const micButton = document.getElementById('micButton');
                const discardButton = document.getElementById('discardRecording');
                const submitButton = document.getElementById('submitRecording');
                const audioPlayer = document.getElementById('audioPlayer');
                const notice = document.getElementById("notification")
                let mediaRecorder, audioChunks = [], audioBlob, isRecording = false;

                if (micButton) {
                  micButton.addEventListener('mousedown', startRecording);
                  micButton.addEventListener('mouseup', stopRecording);
                  micButton.addEventListener('touchstart', e => { e.preventDefault(); startRecording(); });
                  micButton.addEventListener('touchend', e => { e.preventDefault(); stopRecording(); });
                }

                function startRecording() {
                  if (isRecording) return;
                  navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {
                    mediaRecorder = new MediaRecorder(stream);
                    audioChunks = [];
                    mediaRecorder.start();
                    mediaRecorder.ondataavailable = e => audioChunks.push(e.data);
                    mediaRecorder.onstop = () => {
                      audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                      const url = URL.createObjectURL(audioBlob);
                      audioPlayer.src = url;
                      // Show the action buttons after recording is stopped
                      actionButtons.style.display = 'block';
                      audioPlayer.style.display = 'block'; // Show the audio player for playback
                    };
                  });
                  isRecording = true;
                  micButton.classList.add("recording");
                }

                function stopRecording() {
                  if (mediaRecorder && isRecording) {
                    mediaRecorder.stop();
                    isRecording = false;
                    micButton.classList.remove("recording");
                  }
                }

                if (discardButton) {
                  discardButton.addEventListener("click", () => {
                    audioPlayer.src = "";
                    audioChunks = [];
                    audioBlob = null;
                  });
                }

                if (submitButton) {
                  submitButton.replaceWith(submitButton.cloneNode(true));
                  const freshBtn = document.getElementById('submitRecording');
                  freshBtn.addEventListener("click", async () => {
                    if (!audioBlob) {
                      showToast("You can't an empty recording!")
                      return;
                    }

                    const category = document.querySelector('#visibilityOptions .selected')?.dataset.value || "public";
                    const formData = new FormData();
                    formData.append("audio", audioBlob, "voice-note.wav");
                    formData.append("category", category);
                    formData.append("contentType", "audio");

                    try {
                      const res = await fetch("/share", { method: "POST", body: formData });
                      const result = await res.json();
                      if (result.success) {
                        handlePostSuccess(result);
                        audioPlayer.src = "";
                        audioBlob = null;
                      } else {
                        showToast("Failed to share audio!")
                      }
                    } catch (err) {
                      console.error(err);
                      showToast("Error uploading audio!")
                    }
                  });
                }
              }, 150);

            })
            .catch(err => {
              console.error("Failed loading submit form:", err);
              showToast("Error loading form. Try again later.!")
            });
        }

        function hydrateForm(prefilledText, mode) {
          const textarea = document.querySelector("#submitFormContainer textarea");
          if (textarea) {
            textarea.value = prefilledText;
            textarea.focus();
            const hint = document.createElement("small");
            hint.textContent = "Let’s keep going...";
            hint.className = "ghost-hint";
            textarea.insertAdjacentElement("afterend", hint);
            requestAnimationFrame(() => hint.classList.add("visible"));
          }

          window.showTextForm = function () {
            const textForm = document.getElementById("textForm");
            const audioForm = document.getElementById("audioForm");
            textForm.classList.replace("hidden", "visible");
            audioForm.classList.replace("visible", "hidden");

            setTimeout(() => {
              audioForm.classList.add("hidden");
              textForm.classList.add("visible");
            }, 10);
          };

          window.showAudioForm = function () {
            const textForm = document.getElementById("textForm");
            const audioForm = document.getElementById("audioForm");
            audioForm.classList.replace("hidden", "visible");
            textForm.classList.replace("visible", "hidden");
            setTimeout(() => {
              textForm.classList.add("hidden");
              audioForm.classList.add("visible");
            }, 10);

          };

          mode === "audio" ? showAudioForm() : showTextForm();
        }

        // Close modal
        document.querySelector(".close-btn").addEventListener("click", () => {
          submitModal.style.display = "none";
          const hint = document.querySelector(".ghost-hint");
          hint.remove();
        });

        window.addEventListener("click", e => {
          if (e.target === submitModal) submitModal.style.display = "none";
        });
      </script>


      <script>
        const quickShareBtn = document.getElementById("quickShareBtn");

        quickShareBtn.addEventListener("click", async (e) => {
          e.preventDefault();

          const posting = postingInput.value.trim();
          const category = "public"; // or grab from dropdown if you use it

          // If post is too long, open the modal
          if (posting.length > 100) {
            openModal(posting); // this function already opens with prefilled text
            return;
          }

          if (!posting) {
            showToast("You can't submit an empty gist!")
            return;
          }

          quickShareBtn.disabled = true;
          quickShareBtn.querySelector("span").innerHTML = `<div class="button-spinner"></div>`;

          try {
            const response = await fetch("/share", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                secret: posting,
                category,
                contentType: "text"
              }),
            });

            const result = await response.json();

            if (result.success) {
              handlePostSuccess(result);
            }
          } catch (err) {
            console.error("Error sharing:", err);
            showToast("Something went wrong. Try again.")
          }

          quickShareBtn.disabled = false;
          quickShareBtn.querySelector("span").innerHTML = ``;
        });
      </script>

      <script>
        function truncateText(text, maxLength) {
          return !text || text.length <= maxLength ? text : text.substring(0, maxLength) + '...';
        }

        function handlePostSuccess(result) {
          // Optional: play success sound
          const sound = document.getElementById("post-sound");
          if (sound) sound.play();

          // Clear quickshare input + draft (if exists)
          const postingInput = document.getElementById("posting");
          if (postingInput) {
            postingInput.value = "";
            localStorage.removeItem("gossipa_draft");
          }

          showToast("Post shared successfully!")

          // Reset quickshare highlight if exists
          const quickBtnIcon = document.querySelector('#quickShareBtn i');
          if (quickBtnIcon) quickBtnIcon.classList.remove("highlight");

          // ✅ Prepend to feed
          const feed = document.querySelector("#real-secrets ul"); // adjust selector
          if (feed) {
            const post = result.data;
            const user = result.user;
            const userId = result.userId;

            const button = post.user_id !== userId
              ? `<button class='listen' data-targetid=${post.user_id}><i class='fas fa-ear-listen'></i>&nbsp;<span>Resonate</span></button>`
              : `<button class='listen listening'>Visit profile</button>`;

            const stealthMode = user.stealth_mode ? `@voice${userId}` : "@" + user.username;
            const verifiedBadge = user.verified
              ? `<img oncontextmenu="return false;" src="/img/gossipa3.png" alt="Verified Badge" class="verified-badge">`
              : "";

            const cardContent = post.type === "audio"
              ? `
                              <div class="waveform-wrapper">
                                <div id="waveform-${post.id}"></div>
                                <canvas id="visualizer-${post.id}" class="wave-canvas"></canvas>
                                <button class="wave-play-btn" data-id="${post.id}">▶️</button>
                              </div>
              `
              : `<div class="card-content">
        <p class="content-preview">${truncateText(post.secret, 150)}</p>
        </div>`;

            const cardMenu = post.type === "audio"
              ? `<form method="post" id="update" class="card-menu-content" style="display: none;" >
                                    <input type="hidden" name="id" id="audioId" value="${post.id}" />
      
                                    <button class="delete" type="click">
                                      <abbr title="Delete your post">
                                        Delete&nbsp;<i class="fas fa-trash"></i>
                                      </abbr>
                                    </button>
      
                                  </form>`
              : `<form method="post" id="update" class="card-menu-content" style="display: none;" >
                                    <input type="hidden" name="secId" id="secId" value="${post.id}" />

                                    <button class="edit" type="submit" formaction="/edit">
                                      <abbr title="Edit your post">
                                        Edit&nbsp;<i class="fas fa-file-pen"></i>
                                      </abbr>
                                    </button>
      
                                    <button class="delete" type="click">
                                      <abbr title="Delete your post">
                                        Delete&nbsp;<i class="fas fa-trash"></i>
                                      </abbr>
                                    </button>
      
                                  </form>`;

            const newPostHTML = `
      <li class="secret text full-width" data-type="${post.type}" id="secret${post.id}">
        <div class="card visible">
          <div class="card-header">
            <div class="user-details header${post.user_id}">
              <a href="/profile/amebo/${post.user_id}" class="avatar-profile">
                <img src="${user.profile_picture}" class="profile-pic" />
              </a>
              <div class="user-info">
                 <a href="/profile/amebo/${post.user_id}">
                  <p class="username">
                    <span class="user user${post.user_id}">${stealthMode}</span>
                    ${verifiedBadge}
                  </p>
                </a>
                <span class="timestamp">just now</span>
              </div>
            </div>
            ${button}
          </div>
          
          
            ${cardContent}

          <div class="comment-section" data-post-id="${post.id}" data-type="${post.type}">
            <div class="reactions sleek">
              <div class="first-action">
                <div class="secret-card" data-id="${post.id}">
                  <div class="reaction">
                    <button class="reaction-btn" data-type="hot">
                      <img src="../../img/premium-reaction.png" class="premium-reaction">
                      
                      <div class="reaction-class-wrapper">
                      <span class="reaction-count none">0</span>
                      </div>
                    </button>
                    <button class="reaction-btn" data-type="like">👍
                      <div class="reaction-class-wrapper">
                      <span class="reaction-count none">0</span>
                      </div>
                      </button>
                    <button class="reaction-btn" data-type="laugh">😂
                      <div class="reaction-class-wrapper">
                      <span class="reaction-count none">0</span>
                      </div>
                      </button>
                    <button class="reaction-btn" data-type="gasp">😱
                      <div class="reaction-class-wrapper">
                      <span class="reaction-count none">0</span>
                      </div>
                      </button>
                  </div>
                </div>
                <button id="commentButton"><i class="fas fa-comment"></i><span
                                      class="comment-count"></span></button>
              </div>

              <ul class="second-action">
                <li>
                                    <abbr title="Bookmark">
                                      <button class="bookmark-btn" data-id="${post.id}"
                                        data-type="${post.type}">
                                        <i class="fas fa-bookmark"></i>
                                      </button>
                                    </abbr>
                                  </li>

                <li>
                                    <button class="share-btn ">
                                      <abbr title="Share"><i class="fas fa-upload"></i></abbr>
                                    </button>
                                  </li>

                <!-- Share Modal -->
                <div class="share-modal hidden">
                  <div class="modal-content">
                    <h2>Spread the Word 🐦✨</h2>
                    <p>Share this echo with your crew and keep the buzz alive!</p>

                    <div class="link-box">
                      <input class="share-link" type="text" readonly>
                      <button class="copy-link">Copy</button>
                    </div>

                    <ul class="socials">
                      <li><a class="share-twitter" target="_blank"><i class="fab fa-twitter fa-2x"></i></a></li>
                      <li><a class="share-whatsApp" target="_blank"><i class="fab fa-whatsapp fa-2x"></i></a></li>
                      <li><a class="share-snapchat" target="_blank"><i class="fab fa-snapchat fa-2x"></i></a></li>
                      <li><a class="share-messenger" target="_blank"><i class="fab fa-facebook fa-2x"></i></a></li>
                    </ul>

                    <button class="close-share-modal"><i class="fas fa-xmark"></i> Close</button>
                  </div>
                </div>
              </ul>
            </div>

            <div class="comment-dropdown" id="commentDropdown">
              <form class="comment-display" method="POST" id="commentDisplay">
                <p class="total"></p>
                <ul id="comments" class="comments-list"></ul>
              </form>

              <form action="/comment" method="POST" id="comment-form">
                <input type="hidden" name="secretId" value="${post.id}" />
                <input type="hidden" name="secretUserId" value="${post.user_id}" />
                <input type="hidden" name="commentUserId" value="${userId}" />
                <textarea id="commentInput" placeholder="Share your thought..." name="comment"></textarea>
                <button id="postCommentButton"><i class="fas fa-paper-plane"></i></button>
              </form>
            </div>
          </div>

          <div class="card-menu">
              <button class="card-toggle-btn"><i class="fas fa-ellipsis-vertical"></i></button>
              ${cardMenu}
          </div>

        </div>
      </li>
    `;

            feed.insertAdjacentHTML("afterbegin", newPostHTML);
            fetchComment()
            initAudioPost(post.id, post.url);
          }
        }


      </script>



      <br />

      <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


      <script>
        function fetchComment() {
          fetch("/api/comment-counts")
            .then(res => res.json())
            .then(counts => {
              document.querySelectorAll(".comment-section").forEach(section => {
                const id = section.dataset.postId;
                const type = section.dataset.type;
                const key = `${type}-${id}`;
                const countEl = section.querySelector(".comment-count");
                const count = counts[key];
                if (countEl && countEl.textContent !== String(count ?? 0)) {
                  countEl.textContent = formatCount(count ?? 0);
                }
              });
            })
            .catch(err => console.error("Failed to fetch comment counts", err));
        }
      </script>

      <script>
        document.addEventListener("DOMContentLoaded", () => {
          fetchComment()
        });
      </script>

      <script>
        async function initEavedropStatus() {
          try {
            const eavedroppingIds = await fetch("/my-eavedrops").then(res => res.json());
            eavedroppingIds.forEach(id => {
              const buttons = document.querySelectorAll(`.listen[data-targetid="${id}"]`);
              buttons.forEach(btn => {
                btn.classList.add("listening");
                btn.querySelector("span").textContent = "Resonating";
                btn.querySelector("i").className = "fas fa-ear-listen";
              });
            });
          } catch (err) {
            console.error("Error loading eavedrop state", err);
          }
        }

        document.addEventListener("DOMContentLoaded", initEavedropStatus);

      </script>

      <script>
        document.addEventListener("click", async (e) => {
          const btn = e.target.closest(".listen");
          if (!btn) return;

          if (btn.textContent === "Visit profile") {
            window.href = "/profile"
          }

          const span = btn.querySelector("span");
          const icon = btn.querySelector("i");
          const targetId = btn.dataset.targetid;

          btn.disabled = true;
          btn.querySelector("i").innerHTML = `<div class="button-spinner"></div>`;
          btn.querySelector("i").className = ''


          try {
            const res = await fetch("/eavedrop", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ targetId }),
            });


            const data = await res.json();


            const allBtns = document.querySelectorAll(`.listen[data-targetid="${targetId}"]`);
            allBtns.forEach((b) => {
              const sp = b.querySelector("span");
              const ic = b.querySelector("i");

              btn.disabled = false;
              ic.innerHTML = ``;

              if (data.status === "added") {
                b.classList.add("listening");
                sp.textContent = "Resonating";
                ic.className = "fas fa-ear-listen";
              } else if (data.status === "removed") {
                b.classList.remove("listening");
                sp.textContent = "Resonate";
                ic.className = "fas fa-ear-deaf";
              }
            });
          } catch (err) {
            console.error("Resonate failed", err);
          }
        });
      </script>


      <script>
        document.querySelector("#real-secrets").addEventListener("click", async (e) => {

          if (e.target.closest(".reaction-btn")) {
            const button = e.target.closest(".reaction-btn")

            const animations = {
              like: './img/lottie/like.json',
              laugh: './img/lottie/laugh.json',
              cry: './img/lottie/cry.json',
              gasp: './img/lottie/gasp.json',
              hot: './img/lottie/hot.json'
            };


            const btn = event.target.closest(".reaction-btn");
            const type = btn.getAttribute("data-type");
            const secretCard = btn.closest(".secret-card");
            const secretId = secretCard.getAttribute("data-id");

            const emojiChar = btn.querySelector(".reaction-icon")?.alt || btn.textContent.trim().split('\n')[0];

            const card = btn.closest('.secret');
            const isAudio = card.dataset.type === "audio";
            const endpoint = isAudio ? `/audio/${secretId}/react` : `/secret/${secretId}/react`;

            // const floatingContainer = card.querySelector('.floating-lottie');
            const floating = document.createElement('div');
            floating.className = 'floating-lottie-animated';
            card.appendChild(floating);


            // === 1. EMOJI BURST AROUND BUTTON ===
            triggerEmojiBurst(btn, emojiChar);

            // === 2. 3D EXTRAS AROUND BUTTON ===
            if (type === 'cry') {
              const tear = document.createElement('span');
              tear.className = 'emoji-particle';
              tear.innerText = '💧';
              tear.style.setProperty('--x', '0px');
              tear.style.setProperty('--y', '50px');
              button.appendChild(tear);
              setTimeout(() => tear.remove(), 800);
            }

            if (type === 'gasp') {
              const puff = document.createElement('span');
              puff.className = 'emoji-particle';
              puff.innerText = '💨';
              puff.style.setProperty('--x', '-10px');
              puff.style.setProperty('--y', '0px');
              button.appendChild(puff);
              setTimeout(() => puff.remove(), 800);
            }


            try {
              const response = await fetch(endpoint, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ type }),
              });

              const data = await response.json();

              const isHot = type === "hot";

              const animation = lottie.loadAnimation({
                container: floating,
                renderer: 'svg',
                loop: false,
                autoplay: true,
                path: animations[type]
              });

              // Get button to card offset
              const buttonRect = button.getBoundingClientRect();
              const cardRect = card.getBoundingClientRect();

              const startX = buttonRect.left - cardRect.left + buttonRect.width / 2;
              const startY = buttonRect.top - cardRect.top + buttonRect.height / 2;

              floating.style.left = `${startX}px`;
              floating.style.top = `${startY}px`;

              if (isHot) {
                floating.classList.add('no-spin');
              } else {

                // 🎇 TRAIL PARTICLES WHILE MOVING
                const trailEmojis = ['✨', '💥', '💨'];
                let trailInterval = setInterval(() => {

                  const trail = document.createElement('span');
                  trail.className = 'trail-particle';
                  trail.innerText = trailEmojis[Math.floor(Math.random() * trailEmojis.length)];

                  // Offset from Lottie position
                  const offsetX = (Math.random() - 0.5) * 60;
                  const offsetY = (Math.random() - 0.5) * 60;

                  trail.style.left = `${floating.offsetLeft}px`;
                  trail.style.top = `${floating.offsetTop}px`;
                  trail.style.setProperty('--trail-x', `${offsetX}px`);
                  trail.style.setProperty('--trail-y', `${offsetY}px`);

                  card.appendChild(trail);
                  setTimeout(() => trail.remove(), 600);
                }, 100);

                // 🎯 Animate to center
                setTimeout(() => {
                  floating.classList.add('to-center');
                }, 50);

                // 👋 Animate back and remove
                setTimeout(() => {
                  floating.classList.remove('to-center');
                  floating.classList.add('to-button');
                  clearInterval(trailInterval);
                }, 1200);

                setTimeout(() => {
                  floating.remove();
                }, 1800);
              }

              if (data.success) {
                const countSpan = btn.querySelector(".reaction-count");
                const newCount = formatCount(data.reactions[type].count || 0);
                animateCountBump(countSpan, newCount);
                btn.classList.add("bounce");
                setTimeout(() => btn.classList.remove("bounce"), 300);

                // Use updated count from server
              } else {
                console.error("Failed to update reactions:", data.error);
              }
            } catch (error) {
              console.error("Error updating reactions:", error);
            }

            function animateCountBump(countSpan, newCount) {
              const temp = document.createElement("span");
              temp.className = "reaction-count";
              temp.textContent = newCount;
              temp.style.position = "absolute";
              temp.style.transform = "translateY(100%)";
              temp.style.transition = "transform 0.3s ease";

              const wrapper = countSpan.parentElement;
              wrapper.appendChild(temp);

              requestAnimationFrame(() => {
                countSpan.style.transform = "translateY(-100%)";
                temp.style.transform = "translateY(0%)";
              });

              setTimeout(() => {
                countSpan.remove();
              }, 300);
            }



            function triggerEmojiBurst(container, emojiChar) {
              const burstCount = 20;

              for (let i = 0; i < burstCount; i++) {
                const particle = document.createElement('span');
                particle.classList.add('emoji-particle');
                particle.innerText = emojiChar;

                const angle = Math.random() * 2 * Math.PI;
                const distance = Math.random() * 40 + 20;
                const x = Math.cos(angle) * distance + 'px';
                const y = Math.sin(angle) * distance + 'px';

                particle.style.setProperty('--x', x);
                particle.style.setProperty('--y', y);

                container.appendChild(particle);
                setTimeout(() => particle.remove(), 800);
              }

              container.classList.add('pop-animate');
              setTimeout(() => container.classList.remove('pop-animate'), 300);
            }
          }

          if (e.target.closest(".card-toggle-btn")) {
            const button = e.target.closest(".card-toggle-btn")
            button.addEventListener("click", (e) => {
              const menuContent = e.target.closest(".card-menu").querySelector(".card-menu-content");
              const isVisible = menuContent.style.display === "block";

              // Hide all others
              document.querySelectorAll(".card-menu-content").forEach((menu) => {
                menu.style.display = "none";
              });

              // Toggle this one
              menuContent.style.display = isVisible ? "none" : "block";

              e.stopPropagation(); // Prevent auto-close
            });

          }

          const shareBtn = e.target.closest(".share-btn");

          if (shareBtn) {
            const card = shareBtn.closest(".card");
            const username = "<%= username %>";
            // const link = `https://echoes.onrender.com/gist/abc123?ref=${encodeURIComponent(username)}`;
            const link = `https://echoes.onrender.com/feeds}`;
            const shareModal = card.querySelector(".share-modal")

            card.querySelector(".share-link").value = link;
            card.querySelector(".share-twitter").href =
              `https://twitter.com/intent/tweet?text=${encodeURIComponent("Check out this gist on Gossipa! " + link)}`;
            card.querySelector(".share-whatsApp").href =
              `https://wa.me/?text=${encodeURIComponent("🔥 Check this gist: " + link)}`;
            card.querySelector(".share-snapchat").href =
              `https://snapchat.com/scan?attachmentUrl=${encodeURIComponent("🔥 Check this gist: " + link)}`
            card.querySelector(".share-messenger").href =
              `fb-messenger://share?link=${encodeURIComponent(link)}`;

            shareModal.style.display = "flex";
          }

          const closeBtn = e.target.closest(".close-share-modal")

          if (closeBtn) {
            const card = closeBtn.closest(".card");
            const shareModal = card.querySelector(".share-modal")
            shareModal.style.display = "none";
          }


          const shareLink = e.target.closest(".copy-link");

          if (shareLink) {
            const notice = document.getElementById("notification")
            const card = shareLink.closest(".card");
            const input = card.querySelector(".share-link");
            input.select();
            document.execCommand("copy");
            const btn = card.querySelector(".copy-link");
            btn.textContent = "Copied ✅";
            btn.disabled = true;
            notice.innerHTML = `<div class="toast">Link copied! 🎯 Now share it!</div>`;
            setTimeout(() => {
              notice.innerHTML = ""
              btn.textContent = "Copy"
              btn.disabled = false;

            }, 2000);
          }




          const saveToLocal = (postId) => {
            const saved = JSON.parse(localStorage.getItem("bookmarkedPosts") || "[]");
            if (!saved.includes(postId)) {
              saved.push(postId);
              localStorage.setItem("bookmarkedPosts", JSON.stringify(saved));
            }
          };

          const removeFromLocal = (postId) => {
            let saved = JSON.parse(localStorage.getItem("bookmarkedPosts") || "[]");
            saved = saved.filter(id => id !== postId);
            localStorage.setItem("bookmarkedPosts", JSON.stringify(saved));
          };



          const bookmarkBtn = e.target.closest(".bookmark-btn")

          if (bookmarkBtn) {
            const postId = bookmarkBtn.getAttribute("data-id");
            const postType = bookmarkBtn.getAttribute("data-type");

            try {
              const res = await fetch("/bookmark", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ postId, postType })
              });

              const data = await res.json();
              if (data.success) {

                bookmarkBtn.classList.add("bookmarked");
                saveToLocal(postId);
                showToast(data.message)

              } else {
                showToast(data.message)
              }
            } catch {
              showToast("Failed to bookmark. Try again later.")
            }
          }


          if (e.target.closest(".card-menu-content")) {
            e.stopPropagation();
          }


          if (e.target.closest(".report-btn")) {
            const btn = e.target.closest(".report-btn")

            e.stopPropagation(); // Prevent closing menu before prompt

            const secretId = e.target.closest(".report-btn").getAttribute('data-id');
            const reason = prompt('Why are you reporting this content?');

            if (reason) {
              try {
                const response = await fetch(`/report/secret/${secretId}`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ reason })
                });

                const data = await response.json();
                if (data.success) {
                  showToast("Thank you for reporting. We will review it shortly.")

                  document.querySelectorAll(".card-menu-content").forEach((menu) => {
                    menu.style.display = "none";
                  });
                } else {
                  showToast("Error reporting content")
                }
              } catch (error) {
                console.error('Error reporting:', error);
              }
            }
          }


          const deleteBtn = e.target.closest(".delete");

          if (deleteBtn) {
            e.preventDefault();

            const secretCard = deleteBtn.closest(".secret")
            const card = secretCard.querySelector(".card");
            const postIdEl = secretCard.querySelector("#secId") || secretCard.querySelector("#audioId");
            const postId = postIdEl ? postIdEl.value : null;
            const notice = document.getElementById("notification");


            const postType = secretCard.dataset.type;
            console.log(postType)
            let endpoint;
            if (postType === "text") {
              endpoint = "/delete";
            } else if (postType === "audio") {
              endpoint = "/audio-delete";
            } else {
              console.error("Unknown post type:", postType);
              return;
            }


            if (confirm("Are you sure you want to delete this gist?")) {
              try {

                const response = await fetch(endpoint, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ postId })
                });

                const data = await response.json();

                console.log(data)

                if (data.success) {
                  showToast(data.message)
                  secretCard.remove()
                } else {
                  showToast(data.error)
                }
              } catch (error) {
                console.error('Error deleting gist', error);
              }
            } else {
              e.preventDefault();
            }

          }


          if (e.target.closest(".read")) {
            const button = e.target.closest(".read")

            const contentSpan = e.target.previousElementSibling;
            const isTruncated = e.target.textContent === "See all";

            if (isTruncated) {
              // Show full content
              contentSpan.textContent = e.target.dataset.full;
              e.target.textContent = "See Less";
            } else {
              // Reapply truncated content
              contentSpan.textContent = e.target.dataset.truncated;
              e.target.textContent = "See all";
            }

          }
        })



        // Hide all menus on body click
        document.addEventListener("click", () => {
          document.querySelectorAll(".card-menu-content").forEach((menu) => {
            menu.style.display = "none";
          });
        });
      </script>
      <script>
        // ✅ Restore bookmarks on page load
        window.addEventListener("DOMContentLoaded", () => {
          const saved = JSON.parse(localStorage.getItem("bookmarkedPosts") || "[]");

          document.querySelectorAll(".bookmark-btn").forEach((btn) => {
            const postId = btn.getAttribute("data-id");
            if (saved.includes(postId)) {
              btn.classList.add("bookmarked");
            }
          });
        });
      </script>

      <script>

        window.currentUserId = "<%= userId %>";
        window.socket = io({ query: { userId: window.currentUserId } });

        socket.on("comment-updated", (data) => {
          const { postId, type, totalComments } = data;
          const section = document.querySelector(`.comment-section[data-post-id="${postId}"][data-type="${type}"]`);

          if (section) {
            const countEl = section.querySelector(".comment-count");
            if (countEl && countEl.textContent !== String(totalComments)) {
              countEl.textContent = formatCount(totalComments);
            }
          }
        });
      </script>


      <script>
        document.addEventListener("DOMContentLoaded", () => {
          const parent = document.querySelector("#real-secrets");

          // Bubble for clicks (toggle comment dropdown + translate)
          parent.addEventListener("click", async (e) => {
            // Toggle comment dropdown
            if (e.target.closest("#commentButton")) {
              const section = e.target.closest(".comment-section");
              const dropdown = section.querySelector(".comment-dropdown");
              dropdown.classList.toggle("active");

              const icon = section.querySelector("#commentButton i");
              icon.className = dropdown.classList.contains("active")
                ? "fas fa-comment-slash"
                : "fas fa-comment";
            }

            // Handle Translate Button
            if (e.target.classList.contains("translate-btn")) {
              const btn = e.target;
              const section = btn.closest(".comment-section");
              const postId = section.dataset.postId;
              const text = btn.dataset.text;
              const id = btn.dataset.id;
              const output = section.querySelector(`#translated-${postId}-${id}`);

              output.innerText = "Translating...";

              try {
                const res = await fetch("/translate", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({ text, targetLang: "en" }),
                });
                const result = await res.json();
                output.innerText = result.translated || "Translation failed.";
              } catch (err) {
                output.innerText = "Error translating comment.";
              }
            }
          });

          // Bubble for comment form submission
          parent.addEventListener("submit", async (e) => {
            if (e.target.closest("#comment-form")) {
              e.preventDefault();
              const form = e.target;
              const postButton = form.querySelector("#postCommentButton");
              const section = form.closest(".comment-section");
              const postType = section.closest(".secret").dataset.type;
              const postId = section.querySelector("#secretId")?.value || section.querySelector("#audioId")?.value;

              const secretUserId = form.querySelector('[name="secretUserId"]').value;
              const commentUserId = form.querySelector('[name="commentUserId"]').value;
              const commentInput = form.querySelector("#commentInput").value;

              const display = section.querySelector(".comment-display");
              const commentList = display.querySelector(".comments-list");
              const totalPgrh = section.querySelector(".total")
              const count = section.querySelector(".comment-count");

              postButton.innerHTML = `<div class="button-spinner"></div>`;
              postButton.disabled = true;

              try {
                const res = await fetch(`/comment/${postType}`, {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    id: postId,
                    secretUserId,
                    commentUserId,
                    comment: commentInput
                  }),
                });

                const result = await res.json();

                if (result.success) {
                  const commentsRes = await fetch(`/comment/${postType}/${postId}`);
                  const data = await commentsRes.json();
                  const comments = data.comments || [];

                  const commentHead = `<p class="total">All comments: <span class="total-count">${data.totalComments}</span></p>`;

                  display.querySelector(".total")?.remove();
                  display.insertAdjacentHTML("afterbegin", commentHead);

                  commentList.innerHTML += comments.map(comment => `
          <li class="comment-item">
            <img src="${comment.profile_picture}" class="profile-pic thumb"/>
            <div>
            <small class="user">
              <strong>${comment.stealth_mode ? '@voice' + comment.user_id : comment.username}</strong>
              </small>
            <p class="comment">${comment.comment}</p>
            <button type="button" class="translate-btn" data-id="${comment.id}" data-text="${comment.comment}">Translate to english</button>
            <p class="translated-text" id="translated-${postId}-${comment.id}"></p>
          </div>
          </li>
        `).join("");

                  count.textContent = data.totalComments;
                  form.querySelector("#commentInput").value = "";



                  socket.on("comment-updated", (data) => {
                    const { postId, type, totalComments } = data;
                    const section = document.querySelector(`.comment-section[data-post-id="${postId}"][data-type="${type}"]`);

                    if (section) {
                      const countEl = section.querySelector(".comment-count");
                      const commentTotal = section.querySelector(".total-count")
                      if (countEl && countEl.textContent !== String(totalComments)) {
                        countEl.textContent = totalComments;
                        commentTotal.textContent = totalComments;
                      }
                    }
                  });

                  socket.on("new-comment", (comment) => {
                    const { postId, type, username, stealthMode, profilePicture, user_id, comment: text, id } = comment;
                    const section = document.querySelector(`.comment-section[data-post-id="${postId}"][data-type="${type}"]`);
                    const display = section?.querySelector(".comment-display");
                    const commentList = display.querySelector(".comments-list");


                    if (display && section.querySelector(".comment-dropdown").classList.contains("active")) {

                      const li = document.createElement("li");
                      li.classList.add("comment-item");
                      li.innerHTML = `
        <img src="${comment.profilePicture}" class="profile-pic thumb"/>
        <div>
          <small class="user">
            ${comment.stealth_mode ? '@voice' + comment.user_id : comment.username}
            </small>
          <p class="comment">${text}</p>
        <button type="button" class="translate-btn" data-id="${id}" data-text="${text}">Translate to english</button>
        <p class="translated-text" id="translated-${postId}-${id}"></p>
        </div>
    `;

                      commentList.prepend(li); // ✅ prepend to top
                    }
                  });

                } else {
                  showToast(result.message)
                }
              } catch (err) {
                console.error(err);
                showToast("Error posting comment")
              }

              postButton.innerHTML = `<i class="fas fa-arrow-up"></i>`;
              postButton.disabled = false;
            }
          });
        });
      </script>


    </section>



    <aside class="right-sidebar">
      <div id="aside">
        <div class="aside">
          <ul>
            <li class="nav-item current">All <span></span></li>
            <li class="nav-item">Eavedropping<span> </span></li>
          </ul>
        </div>



        <div class="aside">
          <div id="trending">
             <div id="pinned" class="pinned-secret">
                <div id="countdown"></div>
              </div>
            <div id="pinned"></div>
            <div id="pin-secret"></div>
          </div>
        </div>

        <div class="aside">
          <div class="trending">
            <div class="trend-box">
             
            </div>
          </div>
        </div>

        <div class="aside">
          <center>
            <h4 class="user-count"><button class="dot active animate-ping-once" data-slide="0"></button>&nbsp;Top Voices
              :<span id="activeCount">0</span></h4>
          </center>
          <ul class="nav user-list">
          </ul>

        </div>


        <div class="inpage-footer">
          <span>Privacy Policy</span>&nbsp;.
          &nbsp;<span>Terms of use</span> &nbsp;.
          &nbsp;<span>Community guidelines</span> &nbsp;.
          <br><br>
          &nbsp;<span>&copy; <%= new Date().getFullYear() %>, &commat;<span class="text-gradient">Gossipa</span> Co. All
              rights reserved</span>
          <span class="motto">Motto: <span class="motto-content">"Your privacy is our priority."</span></span>
        </div>
      </div>
    </aside>

  </div>


  <script src="https://unpkg.com/lottie-web@5.10.0/build/player/lottie.min.js"></script>
  <!-- Load Day.js and the plugin via CDN -->
  <script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>


  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const connectedUsersMap = new Map();
      const userList = document.querySelector(".user-list");
      const userCountDisplay = document.getElementById("activeCount");

      function updateUserCount() {
        if (userCountDisplay) userCountDisplay.textContent = formatCount(connectedUsersMap.size);
      }

      function userConnected(user) {
        if (connectedUsersMap.has(user.id)) return;

        const userBox = document.createElement("li");
        userBox.className = "connected-user nav-item enter";
        userBox.id = `user-${user.id}`;

        const verifiedBadge = user.verified
          ? `<img oncontextmenu="return false;" src="/img/gossipa3.png" alt="Verified Badge" class="verified-badge">`
          : "";

        const stealthMode = user.stealth_mode ? `@voice${user.id}` : `@${user.username}`

        userBox.innerHTML = `
              <div class="user-card" style="display: flex; align-items: center; gap: 10px;">
                <img oncontextmenu="return false;" src="${user.profile_picture}" alt="Avatar" class="profile-pic" style="width: 32px; height: 32px; border-radius: 50%;">
                <p class="username-row">
                   <span class="user">${stealthMode}</span>
                  ${verifiedBadge}
                </p>
              </div>
            `;

        userList?.appendChild(userBox);
        connectedUsersMap.set(user.id, userBox);
        updateUserCount();

        requestAnimationFrame(() => userBox.classList.add("enter"));
      }

      function userDisconnected(userId) {
        const userBox = connectedUsersMap.get(userId);
        if (userBox) {
          userBox.classList.add("exit");
          userBox.classList.remove("enter");
          setTimeout(() => {
            userBox.remove();
            connectedUsersMap.delete(userId);
            updateUserCount();
          }, 400);
        }
      }

      if (window.socket) {
        window.socket.on("userJoined", async (userId) => {
          try {
            const res = await fetch(`/user/${userId}`);
            const user = await res.json();
            userConnected(user);
          } catch (err) {
            console.error("Failed to fetch user data:", err);
          }
        });

        window.socket.on("userLeft", (userId) => {
          userDisconnected(userId);
        });
      } else {
        console.warn("Socket.io not initialized on this page.");
      }

      // Load currently active users
      fetch("/active-users")
        .then(res => res.json())
        .then(users => users.forEach(userConnected))
        .catch(console.error);
    });
  </script>

  <script>
    dayjs.extend(window.dayjs_plugin_relativeTime);

    document.querySelectorAll('.timestamp').forEach((timeElem) => {
      const rawTimestamp = timeElem.getAttribute('data-raw');
      if (rawTimestamp) {
        const formatted = dayjs(rawTimestamp).fromNow();
        timeElem.textContent = formatted;
      }
    });
  </script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      // Simulate a short loading delay (optional)
      setTimeout(() => {
        // Hide shimmer placeholder
        document.querySelectorAll(".shimmer-container").forEach(shimmer => {
          shimmer.style.display = "none";
        })
        // Show real secrets
        document.getElementById("real-secrets").style.display = "block";
        document.querySelector(".real-secrets").style.display = "flex";
      }, 1000); // 1s delay – tweak as needed
    });
  </script>

  <script src="/js/tutorial.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.12.0/lottie.min.js"></script>