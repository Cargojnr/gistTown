<%- include('layout') %>
  <style>
    .pin-card::after {
      display: none;
    }


    #tutorial-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      z-index: 99;
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
      visibility: visible;
      opacity: 1;
      pointer-events: auto;
      /* Enable interactions */
    }


    /* Tutorial container: Show without opacity transitions */
    #tutorial-container {
      opacity: 1;
      /* Ensure it's visible immediately */
      pointer-events: auto;
      /* Allow interactions */
    }

    /* Remove the transition on tutorial step */
    .tutorial-step {
      font-family: "Gloria Hallelujah", cursive;
      opacity: 1;
      /* Make sure it's visible immediately */
      color: #fff;
    }

    /* Tutorial Step: No transition, just show it directly */
    .tutorial-step.hidden {
      opacity: 0;
    }

    .highlight {
      border: 3px solid #ffdd00;
      /* Yellow highlight */
      box-shadow: 0 0 10px rgba(255, 221, 0, 0.7);
      /* Glowing effect */
    }


    button.skip-btn {
      background: #ff4444;
      color: #fff;
      border: none;
      border-radius: 5px;
      padding: 10px 15px;
      cursor: pointer;
      margin-top: 10px;
    }

    button#next-step {
      padding: 10px 20px;
      font-size: 18px;
      background: linear-gradient(90deg, #ffcc00, #ff9900);
      border: none;
      border-radius: 10px;
      color: #222;
      cursor: pointer;
      margin: 10px;
      transition: transform 0.3s ease-in-out;
    }

    button.skip-btn:hover {
      background: #ff2222;
    }

    button.close-btn {
      background: #00ff00;
      font-size: 18px !important;
      color: #000;
      border: none;
      border-radius: 5px;
      padding: 10px 15px;
      cursor: pointer;
      margin-top: 10px;
    }

    button.close-btn:hover {
      background: #00cc00;
    }


    #tutorial-overlay.hidden {
      display: none;
    }

    #progress-bar-container {
      width: 100%;
      background-color: #e0e0e0;
      border-radius: 5px;
      margin: 10px auto;
    }

    #progress-bar {
      width: 0%;
      height: 5px;
      /* background-color: #76c7c0; */
      background: var(--primary-color);
      border-radius: 5px;
      transition: width 0.3s;
    }

    .highlight {
      border: 3px solid #ffdd00;
      /* Yellow highlight */
      box-shadow: 0 0 10px rgba(255, 221, 0, 0.7);
      /* Glowing effect */
    }

    .tooltip {
      position: absolute;
      /* bottom: 5rem; */
      /* z-index: 100; */
      background-color: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 5px 10px;
      border-radius: 5px;
      font-size: 12px;
      visibility: hidden;
      opacity: 0;
      transition: opacity 0.3s ease-in-out;
    }

    /* Show Tooltip on Hover */
    .tooltip.show {
      visibility: visible;
      opacity: 1;
    }


    /* Mobile responsiveness */
    @media (max-width: 768px) {
      .modal-content {
        width: 100%;
        height: 100%;
        max-width: none;
        border-radius: 0;
      }
    }

    #brand-logo-container {
      animation: fadeIn 0.7s ease-in-out;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }

      to {
        opacity: 1;
      }
    }

    .shimmer-wrapper {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      /* padding: 1rem; */
    }

    .shimmer-card {
      display: flex;
      background: var(--container-bg);
      border-radius: 10px;
      overflow: hidden;
      animation: pulse 1.5s infinite;
    }

    .shimmer-avatar {
      width: 50px;
      height: 50px;
      background: var(--body-bg);
      border-radius: 50%;
      margin: 1rem;
    }



    .shimmer-lines {
      flex: 1;
      padding: 1rem 0;
    }

    .shimmer-line {
      height: 10px;
      background: var(--body-bg);
      margin: 8px 0;
      border-radius: 5px;
    }

    .shimmer-line.short {
      width: 50%;
    }

    .shimmer-footer {
      display: flex;
      gap: 1rem;
      margin-top: 1rem;
    }

    .shimmer-btn {
      width: 40px;
      height: 20px;
      background: var(--body-bg);
      border-radius: 5px;
    }

    @keyframes pulse {
      0% {
        background-color: var(--container-bg);
      }

      50% {
        background-color: var(--body-bg);
      }

      100% {
        background-color: var(--container-bg);
      }
    }

    .shimmer {
      background: linear-gradient(90deg, var(--container-bg) 25%, var(--body-bg) 50%, var(--container-bg) 75%);
      background-size: 200% 100%;
      animation: shimmer 1.5s infinite;
    }

    @keyframes shimmer {
      0% {
        background-position: -200% 0;
      }

      100% {
        background-position: 200% 0;
      }
    }

    
    .sections-container {
      padding: 2rem;
      background: var(--card-bg);
      border-radius: 20px;
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
      margin-top: 2rem;
      animation: fadeIn 0.6s ease-in;
    }

    .sections-title {
      font-size: 1.75rem;
      margin-bottom: 0.25rem;
    }

    .sections-subtext {
      font-size: 1rem;
      color: var(--text-muted);
      margin-bottom: 1.5rem;
      text-align: center;
    }

    .sections-scroll {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(230px, 1fr));
      gap: 1.25rem;
    }

    .section-card {
      background: var(--glass-bg);
      border-radius: 16px;
      padding: 1.25rem;
      text-align: center;
      transition: transform 0.2s ease, box-shadow 0.3s ease;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      color: var(--text-primary);
    }

    .section-card:hover {
      transform: translateY(-6px);
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
      background: var(--highlight-bg);
    }

    .icon-circle {
      background: var(--primary-faded);
      width: 60px;
      height: 60px;
      border-radius: 50%;
      margin: 0 auto 1rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    /* Base setup */
    :root {
      --primary: #7f5af0;
      --secondary: #2cb67d;
      --text: #ffffff;
      --text-muted: #a0a0b2;
      --bg: #0f0e17;
      --card-bg: rgba(255, 255, 255, 0.05);
      --glass: rgba(255, 255, 255, 0.08);
      --highlight: rgba(255, 255, 255, 0.12);
      --blur: blur(16px);
    }

    [data-theme="light"] {
      --primary: #4b3df0;
      /* Slightly deeper for contrast */
      --secondary: #2cb67d;
      --text: #1a1a1a;
      /* Dark text */
      --text-muted: #6b6b6b;
      /* Muted dark grey */
      --bg: #f7f7f7;
      /* Light background */
      --card-bg: rgba(0, 0, 0, 0.04);
      /* Very light card */
      --glass: rgba(0, 0, 0, 0.05);
      /* Slightly visible glass */
      --highlight: rgba(0, 0, 0, 0.08);
      /* For hover/shadow effect */
      --blur: blur(8px);
      /* Less intense in light mode */
    }


    /* Layout */
    body {
      background: var(--bg);
      color: var(--text);
      font-family: 'Inter', sans-serif;
      margin: 0;
      /* padding: 1rem; */
    }

    /* Glass Card Base */
    .glass-card {
      background: var(--glass);
      border-radius: 20px;
      backdrop-filter: var(--blur);
      -webkit-backdrop-filter: var(--blur);
      border: 1px solid rgba(255, 255, 255, 0.1);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
      padding: 1.5rem;
      margin-bottom: 2rem;
      animation: fadeInUp 0.5s ease;
    }

    /* Profile Header */
    .profile-header {
      display: flex;
      gap: 1rem;
      align-items: center;
      flex-wrap: wrap;
      background: var(--container-bg);
      padding: 1rem;
      border-radius: 30px;
    }

    #pinned-secret {
      width: 100% !important;
    }

    .pin-card .card {
      padding: .5rem !important;
    }

    #dashboard .avatar-profile {
      width: 90px;
      height: 90px;
    }

    #dashboard .avatar-profile img.profile-pic {
      width: 100%;
      height: 100%;
      border-radius: 50%;
      object-fit: cover;
      border: 3px solid var(--primary-color);
      cursor: pointer;
      transition: transform 0.3s;
    }



    .avatar-profile img:hover {
      transform: scale(1.05);
    }

    .profile-info h2 {
      margin: 0;
      font-size: 1.8rem;
    }

    .profile-info .tagline {
      color: var(--text-muted);
      font-style: italic;
      margin-bottom: 1rem;
    }

    .quick-stats {
      display: flex;
      gap: 1.5rem;
      margin: 1rem 0;
    }

    .stat {
      text-align: center;
    }

    .stat strong {
      font-size: 1.2rem;
      color: var(--primary);
    }

    /* Buttons */
    .edit-profile-btn,
    .edit,
    .delete,
    .read-more,
    .edit-comment,
    .delete-comment {
      background: var(--primary);
      color: var(--text);
      border: none;
      border-radius: 8px;
      padding: 0.5rem 1rem;
      margin-top: 0.5rem;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .edit-profile-btn:hover,
    .read-more:hover,
    .edit-comment:hover,
    .delete-comment:hover {
      background: var(--secondary);
    }

    /* Sections */
    .sections-container {
      margin-top: 2rem;
    }

    .sections-title {
      font-size: 1.4rem;
      margin-bottom: 1rem;
    }

    .sections-scroll {
      display: flex;
      gap: 1rem;
      overflow-x: auto;
      padding-bottom: 1rem;
    }

    .section-card {
      min-width: 320px;
      background: var(--container-bg);
      padding: 1rem;
      border-radius: 16px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      flex-shrink: 0;
      position: relative;
    }

    .section-card p.content-preview {
      font-size: 0.95rem;
      line-height: 1.5;
    }

    .card-actions {
      margin-top: 1rem;
      display: flex;
      gap: 0.5rem;
    }

    .card-actions button {
      font-size: 0.9rem;
    }

    /* Reactions */
    .reaction-info,
    .reaction-counters {
      margin-top: 1rem;
      display: flex;
      gap: 1rem;
      font-size: 1.1rem;
    }

    .reaction-counters .counter {
      background: var(--highlight);
      padding: 0.5rem 1rem;
      border-radius: 12px;
    }


    /* Followers */
    .follow-stats {
      display: flex;
      gap: 2rem;
      font-size: 1rem;
    }

    .followers,
    .following {
      background: var(--highlight);
      padding: 0.75rem 1.25rem;
      border-radius: 10px;
    }

    /* Animations */
    @keyframes fadeInUp {
      0% {
        transform: translateY(16px);
        opacity: 0;
      }

      100% {
        transform: translateY(0);
        opacity: 1;
      }
    }

    /* Responsive */
    @media (max-width: 768px) {
      .profile-header {
        flex-direction: column;
        align-items: flex-start;
      }

      .sections-scroll {
        flex-direction: column;
      }
    }

    @media (max-width: 768px) {
      .stack-wrapper {
        position: relative;
        height: 420px;
        /* Adjust height as needed */
        overflow: hidden;
      }

      .section-card.sand {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        opacity: 0;
        pointer-events: none;
        transform: scale(0.95) translateY(20px);
        transition: all 0.4s ease;
        z-index: 0;
      }

      .section-card.sand.active {
        opacity: 1;
        pointer-events: auto;
        transform: scale(1) translateY(0);
        z-index: 10;
        box-shadow: 0 12px 20px rgba(0, 0, 0, 0.2);
      }

      .stack-indicator {
        text-align: center;
        margin-top: 10px;
      }

      .stack-next-btn {
        background: #333;
        color: white;
        padding: 6px 18px;
        border: none;
        border-radius: 999px;
        font-size: 0.9rem;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
      }
    }
  </style>

  <body>
    <div class="layout-container container">

      <aside class="left-sidebar">
          <div class="aside">
            <ul class="nav">
              <li class="nav-item current">
                <a href="/feeds">
                  <i class="nav-icon fas fa-home"></i>
                  <span class="nav-text">Home</span>
                </a>
              </li>
              <li class="nav-item">
                <a href="/chat">
                  <i class="nav-icon fas fa-message"></i>
                  <span class="nav-text">Chat</span>
                </a>
              </li>
              <button id="openSubmitForm" class="nav-item mid-post-1">
                <i class="nav-icon fas fa-plus-circle"></i>
              </button>
              <li class="nav-item">
                <a href="/profile">
                  <i class="nav-icon fas fa-circle-user"></i>
                  <span class="nav-text">My Profile</span>
                </a>
              </li>
              <li class="nav-item mid-post-2">
                <a  href="/submit"class="nav-text">Compose Gist</a>
                <i  class="nav-icon fas fa-circle-plus"></i>
              </li>
            </ul>
          </div>
          </aside>
    

      <main>

        <div class="jumbotron text-center">
          <div class="container">

                <div id="feeds">

                  <form id="navigator">
                    <button>All Gist</button>
                    <button>Text</button>
                    <button>Audio</button>
                  </form>

                  <% if (locals.secrets) { %>

                    <div id="topOverlay"></div>
                    <div id="bottomOverlay"></div>

                    <div id="spinner" style="display: none">Loading...</div>

                    <div id="secrets-container" class="secret"></div>

                    <ul id="secrets">

                      <div id="pinned" class="pinned-secret">
                        <div id="countdown" style="margin-top: 20px; font-weight: bold; text-align: center;"></div>
                      </div>

                      <% secrets.forEach((secret)=> { %>
                        <% const isLongSecret=secret.secret.split(" ").length > 17;
                       %>
                    <li class=" secret <%=isLongSecret ? 'full-width' : 'half-width' %>" id="secret<%= secret.id %>">



                            <div class="card">


                              <div class="shimmer-wrapper">
                                <div class="shimmer-card">
                                  <div class="shimmer-avatar"></div>
                                  <div class="shimmer-lines">
                                    <div class="shimmer-line short"></div>
                                    <div class="shimmer-line"></div>
                                    <div class="shimmer-line"></div>
                                    <div class="shimmer-footer">
                                      <div class="shimmer-btn"></div>
                                      <div class="shimmer-btn"></div>
                                    </div>
                                  </div>
                                </div>
                              </div>

                              <% if (secret.category=="funny" ) { %>
                                <span class="tag funny"><i class="fas fa-laugh"></i></span>
                                <% } else if (secret.category=="love" ) { %>
                                  <span class="tag love"><i class="fas fa-heart"></i></span>
                                  <% } else if (secret.category=="nasty" ) { %>
                                    <span class="tag nasty"><i class="fas fa-skull-crossbones"></i></span>
                                    <% } else if (secret.category=="sassy" ) { %>
                                      <span class="tag sassy"><i class="fas fa-face-meh"></i></span>
                                      <% } else if (secret.category=="hilarious" ) { %>
                                        <span class="tag hilarious"><i class="fas fa-teeth-open"></i></span>
                                        <% } else if (secret.category=="random" ) { %>
                                          <span class="tag random"><i class="fas fa-shuffle"></i></span>
                                          <% } else { %>
                                            <span class="tag random"><i class="fas fa-shuffle"></i></span>
                                            <% } %>


                                              <div class="card-header">
                                                <a href="/profile/amebo/<%= secret.user_id %>" class="avatar-profile"><img src="<%= secret.profile_picture %>"
                                                    alt="Profile Picture" class="profile-pic"></a>
                                                <div class="user-info">
                                                  <p class="username"> @amebo<%= secret.user_id %>~~</p>
                                                  <span class="timestamp" data-raw="<%= secret.timestamp %>"></span>
                                                </div>

                                              </div>

                                              <div class="card-content">
                                                <p>
                                                  <span class="content">
                                                    <% if (secret.secret.split(" ").length > 200) { %>
                    <%= secret.secret.substring(0, 250) + " ..." %>
                                                      <% } else { %>
                                                        <%= secret.secret %>
                                                          <% } %>
                                                  </span>
                                                  <% if (secret.secret.split(" ").length > 200) { %>
                
                        <button
                    class=" read" style="
                      background: none;
                      font-size: 1rem;
                      padding: 0;
                      font-weight: bold;
                      padding: .75rem !important;
                      font-weight: bold;
                      font-family: 'Courier New', Courier, monospace !important;
                    " data-full="<%= secret.secret %>" data-truncated="<%= secret.secret.substring(0, 250) + '...' %>">
                                                    Read More
                                                    </button>


                                                    <% } %>
                                                </p>
                                              </div>

                                              <div class="reactions sleek">
                                                <div class="secret-card" data-id="<%= secret.id %>">
                                                  <div class="reactions">

                                                    <button class="reaction-btn reaction" data-type="like">
                                                      <!-- <div id="like-animation" class="lottie-animation"></div> -->
                                                      <!-- <i class="fas fa-heart"></i> -->
                                                      ❤️
                                                      <span class="reaction-count">
                                                        <%= secret.reactions.like ? secret.reactions.like.count : 0 %>
                                                      </span>
                                                    </button>
                                                  </div>

                                                  <div class="floating-lottie" data-type="like"></div>


                                                </div>


                                                <div class="comment-section" data-secret-id="<%= secret.id %>">
                                                  <button id="commentButton" class="reaction-btn"><i
                                                      class="fas fa-comment"></i><span class="comment-count"></span></button>
                                                  <div class="comment-dropdown" id="commentDropdown">
                                                    <form class="comment-display" method="POST" id="commentDisplay">
                                                      <ul id="comments" class="comments-list"></ul>
                                                    </form>
                                                    <form action="/comment" method="POST" id="comment-form">
                                                      <input type="hidden" name="id" id="secretId"
                                                        value="<%= secret.id %>" />
                                                      <input type="hidden" name="secretUserId"
                                                        value="<%= secret.user_id %>" />
                                                      <input type="hidden" name="commentUserId" value="<%= userId %>" />
                                                      <textarea id="commentInput" placeholder="Write a comment..."
                                                        name="comment"></textarea>
                                                      <!-- <input type="text" id="commentInput" placeholder="Write a comment" name="comment"> -->
                                                      <button id="postCommentButton">
                                                        Post
                                                      </button>
                                                      <% if (locals.message) { %>
                                                        <small>
                                                          <%= message %>
                                                        </small>
                                                        <% } %>
                                                    </form>



                                                  </div>
                                                </div>


                                              </div>

                                              <ul class="card-menu">
                                                <li>
                                                  <button class="menu-toggle-btn"><i
                                                      class="fas fa-ellipsis-vertical"></i></button>
                                                  <ul class="card-menu-content" style="display: none;">
                                                    <li>
                                                      <button class="report-btn" data-id="<%= secret.id %>">
                                                        <i class="fa-regular fa-flag"></i>Report
                                                      </button>
                                                    </li>
                                                    <li>
                                                      <button class="copy-btn">
                                                        <i class="fas fa-copy">Copy</i>
                                                      </button>
                                                    </li>
                                                  </ul>
                                                </li>
                                              </ul>

                            </div>
                            </li>


                            <script>
                              document.addEventListener('DOMContentLoaded', function () {

                                document.querySelectorAll('.reaction').forEach(button => {
                                  const type = button.getAttribute('data-type');

                                  button.addEventListener('click', () => {
                                    const emojiChar = button.textContent.trim().split('\n')[0];
                                    const card = button.closest('.secret-card');
                                    const floatingContainer = card.querySelector('.floating-lottie');

                                    // === 1. EMOJI BURST AROUND BUTTON ===
                                    triggerEmojiBurst(button, emojiChar);

                                    // === 2. 3D EXTRAS AROUND BUTTON ===
                                    if (type === 'cry') {
                                      const tear = document.createElement('span');
                                      tear.className = 'emoji-particle';
                                      tear.innerText = '💧';
                                      tear.style.setProperty('--x', '0px');
                                      tear.style.setProperty('--y', '50px');
                                      button.appendChild(tear);
                                      setTimeout(() => tear.remove(), 800);
                                    }

                                    if (type === 'gasp') {
                                      const puff = document.createElement('span');
                                      puff.className = 'emoji-particle';
                                      puff.innerText = '💨';
                                      puff.style.setProperty('--x', '-10px');
                                      puff.style.setProperty('--y', '0px');
                                      button.appendChild(puff);
                                      setTimeout(() => puff.remove(), 800);
                                    }


                                    // === 5. REMOVE LOTTIE ANIMATION AFTER IT FINISHES ===
                                    setTimeout(() => {
                                      floatingContainer.classList.remove('active'); // Remove the active class
                                      floatingContainer.innerHTML = ''; // Clear the Lottie animation
                                    }, 2000); // Adjust the timeout to match the animation duration
                                  });
                                });

                                function triggerEmojiBurst(container, emojiChar) {
                                  const burstCount = 10;

                                  for (let i = 0; i < burstCount; i++) {
                                    const particle = document.createElement('span');
                                    particle.classList.add('emoji-particle');
                                    particle.innerText = emojiChar;

                                    const angle = Math.random() * 2 * Math.PI;
                                    const distance = Math.random() * 40 + 20;
                                    const x = Math.cos(angle) * distance + 'px';
                                    const y = Math.sin(angle) * distance + 'px';

                                    particle.style.setProperty('--x', x);
                                    particle.style.setProperty('--y', y);

                                    container.appendChild(particle);
                                    setTimeout(() => particle.remove(), 800);
                                  }

                                  container.classList.add('pop-animate');
                                  setTimeout(() => container.classList.remove('pop-animate'), 300);
                                }
                              });
                            </script>


                            <% }) %>
                              <center class="bottom-message" id="scrollEndMessage">
                                <p>Reached the bottom. Scroll back to top </p>
                              </center>

                              <script>
                                document.addEventListener('DOMContentLoaded', () => {
                                  const scrollEndMessage = document.getElementById('scrollEndMessage');

                                  window.addEventListener('scroll', () => {
                                    const scrollPosition = window.scrollY + window.innerHeight;
                                    const pageHeight = document.body.offsetHeight;

                                    if (scrollPosition >= pageHeight - 50) {
                                      // User reached near bottom
                                      scrollEndMessage.style.opacity = '1';
                                      scrollEndMessage.style.zIndex = '100'
                                    } else {
                                      scrollEndMessage.style.opacity = '0';
                                    }
                                  });
                                });
                              </script>

                              <script>
                                document.addEventListener('DOMContentLoaded', () => {
                                  const cards = document.querySelectorAll('#secrets .card');

                                  const observer = new IntersectionObserver((entries) => {
                                    entries.forEach(entry => {
                                      if (entry.isIntersecting) {
                                        entry.target.classList.add('visible');
                                      } else {
                                        entry.target.classList.remove('visible');
                                      }
                                    });
                                  }, {
                                    threshold: 0.5 // 50% of card must be visible
                                  });

                                  cards.forEach(card => {
                                    observer.observe(card);
                                  });
                                });
                              </script>



                    </ul>

                    <div id="menu-overlay">
                      <h1>Choose Category</h1>
                    </div>
                    <div id="secret-category">
                      <button id="toggleCategory">👀</button>
                      <form method="POST" id="selectCategory">
                        <div class="menu-category">
                          <!-- <div class="category-item" category-item>Nasty</div>
                                <div class="category-item" data-category="sassy">Sassy</div>
                                <div class="category-item" data-category="hilarious">Hilarious</div>
                                <div class="category-item" data-category="random">Random</div>
                                <div class="category-item" data-category="vent">Vent</div>
                                <div class="category-item" data-category="love">Love</div> -->
                          <button formaction="" class="category-item circular-menu-button" data-category="love"
                            style="top: -50px; left: 50px">
                            <i class="fas fa-heart"></i>
                            <!-- Example icon -->
                            <span>Love</span>
                          </button>
                          <button formaction="" class="category-item circular-menu-button" data-category="sassy"
                            style="top: -100px; left: 100px">
                            <i class="fas fa-lightbulb"></i>
                            <span>Idea</span>
                          </button>
                          <button formaction="" class="category-item circular-menu-button" data-category="funny"
                            style="top: -50px; left: 150px">
                            <i class="fas fa-laugh"></i>
                            <span>Funny</span>
                          </button>
                          <button formaction="" class="category-item circular-menu-button" data-category="special"
                            style="top: 0px; left: 200px">
                            <i class="fas fa-skull-crossbones"></i>
                            <span>Nasty</span>
                          </button>
                          <button formaction="" class="category-item circular-menu-button" data-category="special"
                            style="top: 0px; left: 200px">
                            <i class="fas fa-face-meh"></i>
                            <span>Sassy</span>
                          </button>
                          <button formaction="" class="category-item circular-menu-button" data-category="special"
                            style="top: 0px; left: 200px">
                            <i class="fas fa-teeth-open"></i>
                            <span>Hilarious</span>
                          </button>
                          <button formaction="" class="category-item circular-menu-button" data-category="special"
                            style="top: 0px; left: 200px">
                            <i class="fas fa-head-side-cough"></i>
                            <span>Vent</span>
                          </button>
                        </div>
                        <!-- <button style="transform: translateX(-55px);"class="category" formaction="">Hilarious</button> -->
                      </form>
                    </div>

                    <audio id="post-sound" src="/sounds/system-notification-199277.mp3" preload="auto"></audio>
                    <script>
                      const postSound = document.getElementById("post-sound");
                      postSound.play();
                    </script>

                    <script>



                      document.addEventListener("DOMContentLoaded", () => {
                        const toggleCategory = document.getElementById("toggleCategory");
                        const menuOverlay = document.getElementById("menu-overlay");
                        const menu = document.querySelector(".menu-category");
                        const spinner = document.getElementById("spinner");
                        const secretsContainer = document.getElementById("secrets-container");
                        const feeds = document.querySelector("#feeds #secrets");

                        let categories = [
                          { name: "Love", icon: "fas fa-heart" }, // Example icon for "Love"
                          { name: "Idea", icon: "fas fa-lightbulb" }, // Example icon for "Idea"
                          { name: "Funny", icon: "fas fa-laugh" }, // Example icon for "Funny"
                          { name: "random", icon: "fas fa-shuffle" }, // Example icon for "Special"
                          { name: "Nasty", icon: "fas fa-skull-crossbones" },
                          { name: "Sassy", icon: "fas fa-face-meh" },
                          { name: "Hilarious", icon: "fas fa-teeth-open" },
                          { name: "Vent", icon: "fas fa-head-side-cough" },
                        ]; // Example categories
                        // let categories = []; // Example categories
                        let menuOpen = false;
                        let angle = 0; // Initial angle for scrolling

                        // Populate menu dynamically
                        categories.forEach((category, index) => {
                          const categoryItem = document.createElement("div");
                          categoryItem.classList.add("category-item", "circular-menu-button");
                          categoryItem.dataset.category = category.name;
                          categoryItem.style.position = "absolute";

                          categoryItem.innerHTML = `
          <i class="${category.icon}"></i>
          <span>${category.name}</span>
      `;
                          menu.appendChild(categoryItem);
                        });

                        const categoryItems = document.querySelectorAll(".category-item");

                        // Function to position items in a circular layout
                        const positionItems = () => {
                          const radius = 120; // Radius of the circle
                          const step = (Math.PI * 2) / categories.length; // Angle step per item
                          categoryItems.forEach((item, index) => {
                            const theta = angle + index * step; // Calculate angle for each item
                            const x = radius * Math.cos(theta);
                            const y = radius * Math.sin(theta);
                            item.style.left = `${150 + x}px`; // Offset by menu size (300px diameter)
                            item.style.top = `${150 - y}px`; // Offset to center items
                          });
                        };

                        // Open/close menu logic
                        toggleCategory.addEventListener("click", (e) => {
                          e.preventDefault();
                          menuOpen = !menuOpen;

                          if (menuOpen) {
                            // Show overlay and menu
                            menuOverlay.style.display = "flex";
                            menu.style.display = "block";
                            toggleCategory.style.animationPlayState = "paused";
                            // Animate menu items
                            categoryItems.forEach((item, index) => {
                              setTimeout(() => {
                                item.classList.add("active");
                              }, index * 100);
                            });

                            positionItems(); // Position items in a circular layout
                          } else {
                            // Hide overlay and menu
                            menuOverlay.style.display = "none";
                            menu.style.display = "none";
                            toggleCategory.style.animationPlayState = "running";
                            // Reset menu items
                            categoryItems.forEach((item) => {
                              item.classList.remove("active");
                            });
                          }
                        });

                        // Scroll functionality for circular menu
                        menu.addEventListener("wheel", (e) => {
                          e.preventDefault();
                          angle += e.deltaY > 0 ? 0.1 : -0.1; // Adjust angle based on scroll direction
                          positionItems(); // Update positions based on new angle
                        });

                        // Category click event
                        categoryItems.forEach((item) => {
                          item.addEventListener("click", async (e) => {
                            const selectedCategory =
                              e.target.closest(".category-item").dataset.category;

                            // Show spinner
                            spinner.style.display = "block";

                            const formAction = selectedCategory.toLowerCase();

                            try {
                              // Fetch secrets from the server
                              const response = await fetch(`/feeds/${formAction}`);
                              if (!response.ok) {
                                throw new Error("Failed to fetch secrets");
                              }

                              const secrets = await response.json();

                              // Update the secrets container with fetched data

                              if (secrets.length > 1) {
                                secretsContainer.innerHTML = secrets
                                  .map(
                                    (secret) => `
                  <center>
                          <h2 class="display-3">You've discovered some Dark Secrets!</h2>
                          <p>Don't kiss and tell </p>
                      </center>
                  <div class="secret-item card">
                      <span class="tag">${secrets.secrets.category}</span>
                      <small>~~@anonym${secrets.secrets.user_id}~~</small>
                      <p>${secrets.secrets.secret} 
                       <a
                      style="background: none; font-size: 1rem; padding: 0; font-weight: bold; color: "
                      href="secret/${secrets.secrets.id}">Read More
                      </a>
                      </p>
                  </div>
                  <div class="secret-card" data-id="${secrets.secrets.id}">
              <div class="reactions">
                  <button class="reaction-btn" data-type="like">👍 <span class="reaction-count">${secrets.secrets.reactions.like || 0
                                      }</span></button>
                  <button class="reaction-btn" data-type="laugh">😂 <span class="reaction-count">${secrets.secrets.reactions.laugh || 0
                                      }</span></button>
                  <button class="reaction-btn" data-type="cry">😢 <span class="reaction-count">${secrets.secrets.reactions.cry || 0
                                      }</span></button>
                  <button class="reaction-btn" data-type="gasp">😱 <span class="reaction-count">${secrets.secrets.reactions.gasp || 0
                                      }</span></button>
              </div>
          </div>`
                                  )
                                  .join("");
                                feeds.style.display = "none";
                              } else if ((secrets.length = 1)) {
                                console.log(secrets.secrets[0]);
                                secretsContainer.innerHTML = `<center>
                          <h2 class="display-3">${secrets.secrets[0].category} Space!</h2>
                          <p>Don't kiss and tell </p>
                      </center>
                  <div class="secret-item card">
                      <span class="tag">${secrets.secrets[0].category}</span>
                      <small>~~@anonym${secrets.secrets[0].user_id}~~</small>
                      <p>${secrets.secrets[0].secret.substring(0, 250) + "..."
                                  }
                           <a
                          style="background: none; font-size: 1rem; padding: 0; font-weight: bold; color: "
                          href="secret/${secrets.secrets[0].id}">Read More
                          </a>
                      </p>
                  </div>
                  <div class="secret-card" data-id="${secrets.secrets[0].id}">
              <div class="reactions">
                  <button class="reaction-btn" data-type="like">👍 <span class="reaction-count">${secrets.reactions.like || 0
                                  }</span></button>
                  <button class="reaction-btn" data-type="laugh">😂 <span class="reaction-count">${secrets.reactions.laugh || 0
                                  }</span></button>
                  <button class="reaction-btn" data-type="cry">😢 <span class="reaction-count">${secrets.reactions.cry || 0
                                  }</span></button>
                  <button class="reaction-btn" data-type="gasp">😱 <span class="reaction-count">${secrets.reactions.gasp || 0
                                  }</span></button>
              </div>
          </div>`;
                                feeds.style.display = "none";
                              } else {
                                feeds.style.display = "block";
                              }
                            } catch (error) {
                              console.error(error);
                              secretsContainer.innerHTML = `<p class="error">No secrets available</p>`;
                            } finally {
                              // Hide spinner
                              spinner.style.display = "none";
                            }
                          });
                        });
                      });
                    </script>

                    <script>
                      const cards = document.querySelectorAll(".card")
                      cards.forEach((card) => {
                        const secretId = card.querySelector("#secretId")
                        card.querySelector(".report-btn").addEventListener('click', async (e) => {
                          const secretId = e.target.getAttribute('data-id');
                          const reason = prompt('Why are you reporting this content?'); // Ask for the reason

                          if (reason) {
                            try {
                              const response = await fetch(`/report/secret/${secretId}`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ reason })
                              });

                              const data = await response.json();
                              if (data.success) {
                                alert('Thank you for reporting. We will review it shortly.');
                              } else {
                                alert('Error reporting content');
                              }
                            } catch (error) {
                              console.error('Error reporting:', error);
                            }
                          }
                        });
                      });
                    </script>

                    <script>
                      const fetchTopDiscussedSecret = async () => {
                        try {
                          const response = await fetch("/top-discussed");
                          const data = await response.json();
                          const topSecret = data.topSecret;

                          if (data.success) {
                            showAnnouncement(topSecret);
                          } else {
                            console.log("No trending secret to display.");
                          }
                        } catch (error) {
                          console.error("Error fetching top discussed secret:", error);
                        }
                      };

                      pinSecret = (topSecret) => {
                        const pinnedSection = document.getElementById("pinned");
                        pinnedSection.classList.add("visible")
                        pinnedSection.innerHTML = `
<li class="secret">
  <div class="pin-card">
    <h3> Top Gossip </h3>
    <br/>
    <div class="card">
      <small>~~ @anonym${topSecret.user_id} ~~</small>

                <p>
        ${topSecret.secret.substring(0, 250) + "..."}
        <center>
        <a id="pinnedButton" class="read"
        href="#secret${topSecret.id}"
          style="
            background: none;
            font-size: 1rem;
            padding: 0;
            font-weight: bold;
            display: block !important;
          "
          >View secret</a
        >
        </center>
      </p>

      <i class="fas fa-thumbtack pinned"></i>

    </div>
    </div>
  </li>
`;


                        document.getElementById("pinnedButton").addEventListener("click", function (e) {
                          e.preventDefault()

                          const target = document.getElementById(`secret${topSecret.id}`);

                          // Smooth Scroll
                          target.scrollIntoView({ behavior: "smooth", block: "center" });

                          // Add highlight effect
                          target.querySelector(".card").classList.add("highlight");
                          target.querySelector(".card").style.width = '100% !important'
                          target.querySelector("card").style.flex = '1 1 100% !important'

                        })

                        // highlightElement(pinnedSection)
                        // Set a timeout to unpin the secret after 24 hours
                        setTimeout(() => {
                          pinnedSection.innerHTML = "";
                        }, 24 * 60 * 60 * 1000); // 24 hours
                      };

                      // Schedule the announcement at 12:00 PM GMT
                      now = new Date();
                      targetTime = new Date();
                      targetTime.setUTCHours(11, 0, 0, 0); // 12:00 PM GMT
                      timeUntilAnnouncement = targetTime - now;

                      setTimeout(fetchTopDiscussedSecret, timeUntilAnnouncement);
                    </script>

                    <script>
                      function updateCountdown() {
                        const countdownEl = document.getElementById("countdown");
                        // const announcement= document.getElementById("announcement");
                        if (!countdownEl) return;

                        const now = new Date();
                        const nextTarget = new Date();
                        nextTarget.setUTCHours(11, 0, 0, 0); // 11:00 AM GMT

                        if (now > nextTarget) {
                          nextTarget.setUTCDate(nextTarget.getUTCDate() + 1); // move to next day
                        }

                        const distance = nextTarget - now;

                        const hours = String(Math.floor((distance / (1000 * 60 * 60)) % 24)).padStart(2, '0');
                        const minutes = String(Math.floor((distance / (1000 * 60)) % 60)).padStart(2, '0');
                        const seconds = String(Math.floor((distance / 1000) % 60)).padStart(2, '0');

                        const span = document.createElement('span')
                        span.textContent = `${hours}:${minutes}:${seconds}`
                        // span.className = 'counter'

                        countdownEl.textContent = `Next top gossip to be selected in:`;
                        countdownEl.appendChild(span)
                        countdownEl.style.flex = " 1 1 100% !important"
                        countdownEl.style.width = "100% !important"
                        span.style.color = "var(--secondary-color)"

                      }

                      // Start the countdown interval when DOM is ready
                      document.addEventListener("DOMContentLoaded", () => {
                        updateCountdown();
                        setInterval(updateCountdown, 1000);
                      });
                    </script>


                    <% } %>
                        <br />
                        <!-- <a href="/logout" class="btn btn-light btn-lg" role="button">Log Out</a> -->
                </div>
          </div>
        </div>
        <button id="scrollToTopBtn" class="scroll-btn"><i class="fas fa-chevron-up"></i></button>




        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>



        <script>
          document.addEventListener("DOMContentLoaded", () => {
            const scrollBtn = document.getElementById("scrollToTopBtn");

            window.addEventListener("scroll", () => {
              scrollBtn.style.display = window.scrollY > 200 ? "block" : "none";
            });

            scrollBtn.addEventListener("click", () => {
              // Animate launch
              scrollBtn.classList.add("shrink");
              scrollBtn.classList.add("launching");

              // Scroll to top
              window.scrollTo({ top: 0, behavior: "smooth" });

              // Reset animation classes after a short delay
              setTimeout(() => {
                scrollBtn.classList.remove("shrink");
                scrollBtn.classList.remove("launching");
              }, 800);
            });
          });
        </script>
        <script>
          document.addEventListener("DOMContentLoaded", () => {
              fetch("/api/comment-counts")
                  .then(res => res.json())
                  .then(counts => {
                      Object.entries(counts).forEach(([secretId, count]) => {
                          const el = document.querySelector(`[data-secret-id="${secretId}"] .comment-count`);
                          if (count) {
                              // el.textContent = `${count} comment${count !== 1 ? 's' : ''}`;
                              el.textContent = `${count}`;
                          } 
                      });
                  })
                  .catch(err => console.error("Failed to fetch comment counts", err));
          });
          </script>
          
          

        <script>
          $(document).ready(function () {
            $(".comment-section").each(function () {
              const commentSection = $(this);

              // Submit comment form
              commentSection.find("#comment-form").on("submit", function (e) {
                e.preventDefault();

                const secretId = commentSection.find("#secretId").val();
                const secretUserId = commentSection.find('[name="secretUserId"]').val();
                const commentUserId = commentSection.find('[name="commentUserId"]').val();
                const comment = commentSection.find("#commentInput").val();
                const commentDisplay = commentSection.find("#commentDisplay");

                $.ajax({
                  url: "/comment",
                  type: "POST",
                  data: {
                    id: secretId,
                    secretUserId,
                    commentUserId,
                    comment,
                  },
                  success: async function (response) {
                    if (response.success) {
                      try {
                        const fetchResponse = await fetch(`/more/${secretId}`);
                        if (!fetchResponse.ok) throw new Error("Failed to fetch comments");

                        const data = await fetchResponse.json();
                        const comments = data.comments;

                        if (comments) {
                          let commentDisp = comments.map((comment) => `
                        <li class="comment-item">
                          <div>
                            <small class="user"><strong>@anonym${comment.user_id}</strong></small>
                            <p class="comment">${comment.comment}</p>
                            <button class="translate-btn" data-id="${comment.id}" data-text="${comment.comment}">Translate</button>
                            <p class="translated-text" id="translated-${comment.id}"></p>
                          </div>
                        </li>
                      `).join("");

                          commentDisplay.html(`
                        <ul id="comments">
                          <p class="total">All comments: ${data.totalComments}</p>
                          ${commentDisp}
                        </ul>
                      `);
                        } else {
                          commentDisplay.html(`
                        <ul id="comments">
                          <p class="total">${data.noComment}</p>
                        </ul>
                      `);
                        }
                      } catch (err) {
                        console.log(err);
                      }

                      commentSection.find("#commentInput").val(""); // clear input
                    } else {
                      console.log("Failed to post comment:", response.message);
                    }
                  },
                  error: function (err) {
                    console.log("Error submitting comment:", err);
                  },
                });
              });

              // Translation handler (delegated for dynamic buttons)
              commentSection.on("click", ".translate-btn", function (e) {
                e.preventDefault();
                const btn = $(this);
                const commentText = btn.data("text");
                const commentId = btn.data("id");
                const translatedBox = commentSection.find(`#translated-${commentId}`);

                $.ajax({
                  url: "/translate",
                  type: "POST",
                  contentType: "application/json",
                  data: JSON.stringify({ text: commentText, targetLang: "en" }),
                  success: function (res) {
                    if (res.translated) {
                      translatedBox.text(res.translated);
                    } else {
                      translatedBox.text("Translation failed.");
                    }
                  },
                  error: function (err) {
                    translatedBox.text("Error translating comment.");
                  },
                });
              });
            });
          });
        </script>

        <script>
          document.addEventListener("DOMContentLoaded", () => {
            const commentSections = document.querySelectorAll(".comment-section");

            commentSections.forEach(async (section) => {
              const secretId = section.querySelector("#secretId").value;
              const commentList = section.querySelector(".comments-list");

              // Toggle dropdown
              section.querySelector("#commentButton").addEventListener("click", () => {
                const dropdown = section.querySelector(".comment-dropdown");
                dropdown.classList.toggle("active");

                const icon = section.querySelector("#commentButton i");
                icon.className = dropdown.classList.contains("active")
                  ? "fas fa-comment-slash"
                  : "fas fa-comment";
              });

              // Fetch and display comments
              try {
                const response = await fetch(`/more/${secretId}`);
                const data = await response.json();
                const comments = data.comments;

                if (comments && comments.length > 0) {
                  section.querySelector(".comment-display").insertAdjacentHTML(
                    "afterbegin",
                    `<p class="total">All comments: ${data.totalComments}</p>`
                  );

                  comments.forEach((comment) => {
                    const li = document.createElement("li");
                    li.className = "comment-item";
                    li.innerHTML = `
              <div>
                <small class="user"><strong>@anonym${comment.user_id}</strong></small>
                <p class="comment">${comment.comment}</p>
              </div>
              <button type="button" class="translate-btn" data-id="${comment.id}" data-text="${comment.comment}">Translate</button>
              <p class="translated-text" id="translated-${secretId}-${comment.id}"></p>
            `;
                    commentList.appendChild(li);
                  });
                } else {
                  commentList.innerHTML = `<p class="total">${data.noComment}</p>`;
                }
              } catch (err) {
                console.error("Error loading comments:", err);
              }

              // Delegate click for Translate buttons inside this section
              commentList.addEventListener("click", async (e) => {
                if (e.target.classList.contains("translate-btn")) {
                  const btn = e.target;
                  const text = btn.dataset.text;
                  const id = btn.dataset.id;
                  const output = section.querySelector(`#translated-${secretId}-${id}`);

                  output.innerText = "Translating...";

                  try {
                    const res = await fetch("/translate", {
                      method: "POST",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify({ text, targetLang: "en" }),
                    });

                    const result = await res.json();
                    if (result.translated) {
                      output.innerText = result.translated;
                    } else {
                      output.innerText = "Translation failed.";
                    }
                  } catch (err) {
                    output.innerText = "Error translating comment.";
                    console.error(err);
                  }
                }
              });
            });
          });
        </script>

        <script>
          document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll(".reaction").forEach((button) => {
              const animations = {
                like: './img/lottie/love4.json',
                laugh: './img/lottie/laugh.json',
                cry: './img/lottie/cry.json',
                gasp: './img/lottie/gasp.json'
              };


              button.addEventListener("click", async (event) => {
                const btn = event.target.closest(".reaction");
                const type = btn.getAttribute("data-type");
                const secretCard = btn.closest(".secret-card");
                const secretId = secretCard.getAttribute("data-id");


                const emojiChar = btn.textContent.trim().split('\n')[0];
                const card = btn.closest('.secret');
                const floatingContainer = card.querySelector('.floating-lottie');
                const floating = document.createElement('div');
                floating.className = 'floating-lottie-animated';
                card.appendChild(floating);


                // === 1. EMOJI BURST AROUND BUTTON ===
                triggerEmojiBurst(btn, emojiChar);

                // === 2. 3D EXTRAS AROUND BUTTON ===
                if (type === 'cry') {
                  const tear = document.createElement('span');
                  tear.className = 'emoji-particle';
                  tear.innerText = '💧';
                  tear.style.setProperty('--x', '0px');
                  tear.style.setProperty('--y', '50px');
                  button.appendChild(tear);
                  setTimeout(() => tear.remove(), 800);
                }

                if (type === 'gasp') {
                  const puff = document.createElement('span');
                  puff.className = 'emoji-particle';
                  puff.innerText = '💨';
                  puff.style.setProperty('--x', '-10px');
                  puff.style.setProperty('--y', '0px');
                  button.appendChild(puff);
                  setTimeout(() => puff.remove(), 800);
                }


                try {
                  const response = await fetch(`/secret/${secretId}/react`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ type }),
                  });

                  const data = await response.json();


                  const animation = lottie.loadAnimation({
                    container: floating,
                    renderer: 'svg',
                    loop: false,
                    autoplay: true,
                    path: animations[type]
                  });

                  // Get button to card offset
                  const buttonRect = button.getBoundingClientRect();
                  const cardRect = card.getBoundingClientRect();

                  const startX = buttonRect.left - cardRect.left + buttonRect.width / 2;
                  const startY = buttonRect.top - cardRect.top + buttonRect.height / 2;

                  floating.style.left = `${startX}px`;
                  floating.style.top = `${startY}px`;

                  // 🎇 TRAIL PARTICLES WHILE MOVING
                  const trailEmojis = ['✨', '💥', '💨'];
                  let trailInterval = setInterval(() => {
                    const trail = document.createElement('span');
                    trail.className = 'trail-particle';
                    trail.innerText = trailEmojis[Math.floor(Math.random() * trailEmojis.length)];

                    // Offset from Lottie position
                    const offsetX = (Math.random() - 0.5) * 60;
                    const offsetY = (Math.random() - 0.5) * 60;

                    trail.style.left = `${floating.offsetLeft}px`;
                    trail.style.top = `${floating.offsetTop}px`;
                    trail.style.setProperty('--trail-x', `${offsetX}px`);
                    trail.style.setProperty('--trail-y', `${offsetY}px`);

                    card.appendChild(trail);
                    setTimeout(() => trail.remove(), 600);
                  }, 100);

                  // 🎯 Animate to center
                  setTimeout(() => {
                    floating.classList.add('to-center');
                  }, 50);

                  // 👋 Animate back and remove
                  setTimeout(() => {
                    floating.classList.remove('to-center');
                    floating.classList.add('to-button');
                    clearInterval(trailInterval);
                  }, 1200);

                  setTimeout(() => {
                    floating.remove();
                  }, 1800);


                  if (data.success) {
                    const countSpan = btn.querySelector(".reaction-count");
                    countSpan.textContent = data.reactions[type].count || 0; // Use updated count from server
                  } else {
                    console.error("Failed to update reactions:", data.error);
                  }
                } catch (error) {
                  console.error("Error updating reactions:", error);
                }


                function triggerEmojiBurst(container, emojiChar) {
                  const burstCount = 10;

                  for (let i = 0; i < burstCount; i++) {
                    const particle = document.createElement('span');
                    particle.classList.add('emoji-particle');
                    particle.innerText = emojiChar;

                    const angle = Math.random() * 2 * Math.PI;
                    const distance = Math.random() * 40 + 20;
                    const x = Math.cos(angle) * distance + 'px';
                    const y = Math.sin(angle) * distance + 'px';

                    particle.style.setProperty('--x', x);
                    particle.style.setProperty('--y', y);

                    container.appendChild(particle);
                    setTimeout(() => particle.remove(), 800);
                  }

                  container.classList.add('pop-animate');
                  setTimeout(() => container.classList.remove('pop-animate'), 300);
                }
              });
            });
          });


          document.querySelectorAll(".read").forEach((button) => {
            button.addEventListener("click", (e) => {
              const contentSpan = e.target.previousElementSibling;
              const isTruncated = e.target.textContent === "Read More";

              if (isTruncated) {
                // Show full content
                contentSpan.textContent = e.target.dataset.full;
                e.target.textContent = "See Less";
              } else {
                // Reapply truncated content
                contentSpan.textContent = e.target.dataset.truncated;
                e.target.textContent = "Read More";
              }
            });
          });

          document.querySelectorAll(".menu-toggle-btn").forEach((button) => {
            button.addEventListener("click", (e) => {
              const menuContent = e.target.closest(".card-menu").querySelector(".card-menu-content");
              const isVisible = menuContent.style.display === "block";

              // Hide all other menus
              document.querySelectorAll(".card-menu-content").forEach((menu) => {
                menu.style.display = "none";
              });

              // Toggle current menu
              menuContent.style.display = isVisible ? "none" : "block";

              // Stop event propagation to prevent immediate hiding
              e.stopPropagation();
            });
          });

          // Hide menu when clicking elsewhere
          document.addEventListener("click", () => {
            document.querySelectorAll(".card-menu-content").forEach((menu) => {
              menu.style.display = "none";
            });
          });


          document.addEventListener("click", function (event) {
            if (event.target.closest(".fas.fa-copy")) {
              const button = event.target.closest(".fas.fa-copy");

              // Find the closest card container to get the content
              const cardContainer = button.closest(".card");

              // Extract the content inside the card container
              const contentToCopy = cardContainer.querySelector(".content")?.innerText;

              if (contentToCopy) {
                if (navigator.clipboard && navigator.clipboard.writeText) {
                  // Use Clipboard API if available
                  navigator.clipboard
                    .writeText(contentToCopy)
                    .then(() => {
                      alert("Content copied to clipboard!");
                    })
                    .catch((err) => {
                      console.error("Failed to copy: ", err);
                      alert("Failed to copy content.");
                    });
                } else {
                  // Fallback for unsupported browsers
                  const tempInput = document.createElement("textarea");
                  tempInput.value = contentToCopy;
                  document.body.appendChild(tempInput);
                  tempInput.select();
                  try {
                    document.execCommand("copy");
                    alert("Content copied to clipboard!");
                    button.innerHTML = "Copied!"
                  } catch (err) {
                    console.error("Fallback copy failed: ", err);
                    alert("Copy failed. Please copy manually.");
                  }
                  document.body.removeChild(tempInput);
                }
              } else {
                console.error("No content to copy.");
                alert("Nothing to copy.");
              }
            }
          });

        </script>

        <script>
          const header = document.querySelector("header");
          const topOverlay = document.getElementById("topOverlay")
          const bottomOverlay = document.getElementById("bottomOverlay")
          const nextSection = document
            .querySelector("body")
            .querySelector("section:not(.active)");
          const logo = document.getElementById("logo");

          window.addEventListener("scroll", function () {
            const scrolled = window.scrollY > 0;
            if (scrolled) {
              let body = document.querySelector("body");
              body.style.overflowY = "scroll";
              header.classList.add("scrolled");
              topOverlay.style.opacity = 1;
            } else {
              topOverlay.style.opacity = 0;
              header.classList.remove("scrolled");
            }
          });

        </script>


        <script>
          document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.addEventListener('click', function (e) {
              e.preventDefault();
              showBrandLogo();

              setTimeout(() => {
                window.location.href = this.formAction;
              }, 2400); // give animation time to play
            });
          });

        </script>

        <script src="https://unpkg.com/lottie-web@5.10.0/build/player/lottie.min.js"></script>
        <!-- Load Day.js and the plugin via CDN -->
        <script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>
        <script>
          dayjs.extend(window.dayjs_plugin_relativeTime);

          document.querySelectorAll('.timestamp').forEach((timeElem) => {
            const rawTimestamp = timeElem.getAttribute('data-raw');
            if (rawTimestamp) {
              const formatted = dayjs(rawTimestamp).fromNow();
              timeElem.textContent = formatted;
            }
          });
        </script>

        <script src="/js/app.js"></script>
        <script src="/js/defaultTheme.js"></script>
        <script src="/js/tutorial.js"></script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.12.0/lottie.min.js"></script>

      </main>

  <aside class="right-sidebar">
    <div class="aside">
    <ul class="nav">
      <li class="nav-item">Moohe</li>
      <li class="nav-item">Homeem</li>
      <li class="nav-item">Homeem</li>
      <li class="nav-item">Homeem</li>
      <li class="nav-item">Homeem</li>
    </ul>
    </div>
    <div class="aside aside-2">
      <center><h4>Active Gossips</h4></center>
    <ul class="nav">
      <li class="nav-item">Moohe</li>
      <li class="nav-item">Homeem</li>
      <li class="nav-item">Homeem</li>
      <li class="nav-item">Homeem</li>
      <li class="nav-item">Homeem</li>
    </ul>
    
</div>
  </aside>
  
    </div>
  </body>