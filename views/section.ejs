<style>
  body {
    height: 100vh;
    width: 100vw;
    overflow-x: hidden;
    overflow-y: hidden;
    font-family: 'Inter', 'Roboto', 'Helvetica Neue', 'Segoe UI', sans-serif !important;
    font-family: 'Inter', sans-serif;
  }

  main {
      display: block !important;
  }


  section {
    height: 90vh;
    overflow: hidden;
  }


  .start-tutorial-btn {
    position: fixed;
    bottom: 6rem;
    right: 20px;
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: white;
    border: none;
    border-radius: 20px;
    padding: 10px 15px;
    font-size: 14px;
    cursor: pointer;
    z-index: 100;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    animation: pulse 2s infinite;
  }


  @keyframes pulse {
    0% {
      transform: scale(1);
      box-shadow: 0 0 0 0 rgba(127, 90, 240, 0.4);
    }

    70% {
      transform: scale(1.05);
      box-shadow: 0 0 0 10px rgba(127, 90, 240, 0);
    }

    100% {
      transform: scale(1);
    }
  }


  #gesture-demo {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    pointer-events: none;
    z-index: 9999;
  }

  #gesture-demo {
    position: fixed;
    bottom: 30px;
    left: 50%;
    transform: translateX(-50%);
    background: #333;
    color: white;
    padding: 10px 20px;
    border-radius: 10px;
    z-index: 100;
    opacity: 0.9;
  }


  .gesture-hand {
    font-size: 2.5rem;
    animation: swipe-left-right 2s ease-in-out infinite;
    opacity: 0.8;
  }



  @keyframes swipe-left-right {
    0% {
      transform: translateX(0) translateY(0);
    }

    30% {
      transform: translateX(-80px) translateY(-10px);
    }

    60% {
      transform: translateX(80px) translateY(10px);
    }

    100% {
      transform: translateX(0) translateY(0);
    }
  }




  #tutorial-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    z-index: 99;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    visibility: visible;
    opacity: 1;
    pointer-events: auto;
    margin: auto;
    /* Enable interactions */
  }


  /* Tutorial container: Show without opacity transitions */
  #tutorial-container {
    opacity: 1;
    /* Ensure it's visible immediately */
    pointer-events: auto;
    /* Allow interactions */
  }

  /* Remove the transition on tutorial step */
  .tutorial-step {
    font-family: "Gloria Hallelujah", cursive;
    opacity: 1;
    /* Make sure it's visible immediately */
    color: #fff;
  }

  /* Tutorial Step: No transition, just show it directly */
  .tutorial-step.hidden {
    opacity: 0;
  }

  .highlight {
    border: 3px solid #ffdd00;
    /* Yellow highlight */
    box-shadow: 0 0 10px rgba(255, 221, 0, 0.7);
    /* Glowing effect */
  }


  button.skip-btn {
    background: #ff4444;
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 10px 15px;
    cursor: pointer;
    margin-top: 10px;
  }

  button#next-step {
    padding: 10px 20px;
    font-size: 18px;
    background: linear-gradient(90deg, #ffcc00, #ff9900);
    border: none;
    border-radius: 10px;
    color: #222;
    cursor: pointer;
    margin: 10px;
    transition: transform 0.3s ease-in-out;
  }

  button.skip-btn:hover {
    background: #ff2222;
  }



  #tutorial-overlay.hidden {
    display: none;
  }

  #progress-bar-container {
    width: 100%;
    background-color: #e0e0e0;
    border-radius: 5px;
    margin: 10px auto;
  }

  #progress-bar {
    width: 0%;
    height: 5px;
    /* background-color: #76c7c0; */
    background: var(--primary-color);
    border-radius: 5px;
    transition: width 0.3s;
  }

  .highlight {
    border: 3px solid #ffdd00;
    /* Yellow highlight */
    box-shadow: 0 0 10px rgba(255, 221, 0, 0.7);
    /* Glowing effect */
  }

  .tooltip {
    position: absolute;
    /* bottom: 5rem; */
    /* z-index: 100; */
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 5px 10px;
    border-radius: 5px;
    font-size: 12px;
    visibility: hidden;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  /* Show Tooltip on Hover */
  .tooltip.show {
    visibility: visible;
    opacity: 1;
  }

  #dating-container {
    padding-top: 1%;
    display: flex;
    justify-content: center;
    /* align-items: center; */
    flex-direction: column;
    text-align: center;
    width: 100%;
    margin: .5rem auto !important;
  }

  .dating-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  #prev,
  #next {
    padding: 1rem 1.5rem;
    border: none;
    border-radius: 50%;
    font-size: 1.1rem;
    background: var(--secondary-color);
    color: var(--text-color);
    backdrop-filter: .1rem .1rem;
  }

  #dating-container h1 {
    text-align: center !important;
    padding-left: .5rem !important;
    font-size: 2rem !important;
  }

  .bottom-line {
    background: var(--secondary-color);
    width: 40px;
    height: 5px;
    margin: auto;
    border-radius: 30px;
  }

  #card-container {
    padding: 3% 0;
    position: relative;
    width: 500px !important;
    height: 60vh !important;
    perspective: 1000px !important;
    /* padding-left: 0 !important; */
  }

  @media (max-width: 768px) {
    #card-container {
    padding: 3% 0;
    position: relative;
    width: 400px !important;
    /* padding-left: 0 !important; */
  }
  }

  @media (max-width: 600px) {
    #card-container {
    padding: 3% 0;
    position: relative;
    width: 350px !important;
    /* padding-left: 0 !important; */
  }
}

  .card {
    width: 100% !important;
    height: 60vh !important;
    background: linear-gradient(135deg, #ff9a9e, #fad0c4);
    border-radius: 20px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    margin: auto;
    /* padding: 20px; */
    position: absolute;
    top: 0;
    /* left: 10%; */
    /* right: 10%; */
    transform-origin: center;
    transition: transform 0.5s ease-in-out;
    overflow-y: auto;
    z-index: 1;
    font-family: 'Quicksand', sans-serif;
  }

  .card:first-child {
    z-index: 2 !important;
    /* Top card gets a higher z-index */
  }

  .card:hover {
    transform: rotateY(15deg) rotateX(10deg) scale(1.05);
  }

  .section-actions {
    display: flex;
    gap: 10px;
  }

  .section-actions button {
    padding: 10px 20px;
    border: none;
    border-radius: 10px;
    cursor: pointer;
    transition: transform 0.2s ease-in-out;
  }

  .swipe-actions button {
   padding: .5rem .75rem;
   background: transparent;
   border: none;
  }

  .dislike {
    background-color: #ff4c4c;
    color: white;
  }

  .like {
    background-color: #4caf50;
    color: white;
  }

  .card-stack {
    position: relative;
    /* height: 60vh; */
    overflow: visible;
    perspective: 1000px;
  }

  .swipe-card {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    position: absolute;
    top: 2%;
    left: 0%;
    right: 0%;
    width: 100%;
    max-width: 500px;
    height: 60vh;
    transform: translateX(-50%);
    background: var(--container-bg);
    /* background: linear-gradient(135deg, #ff9a9e, #fad0c4); */
    color: var(--text-color);
    padding: 1.5rem;
    border-radius: 20px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.25);
    transition: transform 0.3s ease, opacity 0.3s ease;
    will-change: transform;
    font-family: 'Quicksand', sans-serif;
  }

  .swipe-card .card-content {
    max-height: 40vh;
    overflow-y: scroll;
  }

  .swipe-card.removed {
    opacity: 0;
    pointer-events: none;
  }

  .swipe-actions {
    display: flex;
    justify-content: space-between;
    margin-top: 1rem;
  }

  .gossipa-comment-form {
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid var(--border-color, #444);
    padding: 1rem;
    border-radius: 15px;
    margin-top: 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
  }

  .gossipa-comment-form textarea {
    background: transparent;
    border: none;
    resize: none;
    color: var(--text-color, #eee);
    font-size: 1rem;
    line-height: 1.5;
    min-height: 80px;
    font-family: 'Courier New', Courier, monospace;
    border-bottom: 1px solid #333;
    padding-bottom: 0.5rem;
    outline: none;
  }

  .gossipa-comment-form textarea::placeholder {
    color: var(--text-muted, #888);
    font-style: italic;
  }

  .comment-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .comment-footer .hint {
    font-size: 0.85rem;
    color: var(--text-muted, #888);
  }

  .gossipa-comment-form .submit-btn {
    background: linear-gradient(135deg, #7f5af0, #d13d87);
    color: #fff;
    border: none;
    padding: 0.4rem 1.2rem;
    font-weight: bold;
    font-size: 0.9rem;
    border-radius: 10px;
    cursor: pointer;
    transition: background 0.3s ease;
  }

  .gossipa-comment-form .submit-btn:hover {
    background: linear-gradient(135deg, #9f7fff, #ff67a6);
  }

  .comment-message {
    color: #f88;
    font-size: 0.85rem;
    text-align: right;
  }

  /* New Css */
   /* .swipe-card {
 position: absolute;
  width: 90%;
  max-width: 400px;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  transition: transform 0.3s ease;
} */

.highlight {
  box-shadow: 0 0 12px #7f5af0;
}

#tutorial-overlay {
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.85);
  color: #fff;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  z-index: 999;
}

#gesture-demo {
  position: absolute;
  bottom: 10%;
  font-size: 14px;
  background: rgba(191, 188, 188, 0.1);
  padding: 8px 12px;
  border-radius: 6px;
  color: #fff;
}

.hidden { display: none; }

</style>

<section>

  <div class=" container">



    <div id="tutorial-overlay" class="hidden">

      <div class="tutorial-step">
        <div class="tutorial-text">
          <h2> Welcome to Room of Advice and Learning</h2>
          <p>Feel free to share or read content in a judgment-free zone.</p>
        </div>

        <div id="progress-bar-container">
          <div id="progress-bar"></div>
        </div>
        <button id="next-step">Next</button>
        <button class="skip-btn">Skip</button>
      </div>
    </div>

    <button class="back"><i class="fas fa-arrow-left"></i> Back</button>

    <div id="dating-container">
      <h2>Dating & Relationship Advice</h2>
      <div class="bottom-line"></div>
      <div class="dating-container">

        <button id="prev"><i class="fas fa-chevron-left"></i></button>

        <div id="card-container" class="card-stack">

          <!-- inside #card-container (below the cards ideally) -->
          <div id="gesture-demo" class="">
            <div class="gesture-hand">👆</div>
            <p style="margin-top: 8px;">Swipe left or right</p>
          </div>

          <% section.forEach((secret, i)=> { %>
            <div class="swipe-card" data-id="<%= secret.id %>" style="z-index:'<%= section.length - i %>'">
              <div class="card-content">
                <div class="thumb">
                  <img oncontextmenu="return false;" src="../.<%= secret.profile_picture %>"
                                      alt="Profile Picture" class="profile-pic thumb">
                </div>
                <small><% if (secret.stealth_mode) {%>
                  <span class="user">@voice<%= secret.user_id %></span>
                  <% } else { %>
                    <span class="user">@<%= secret.username %></span>
                    <% } %> </small>
                <p>
                  <span class="content">
                    <% if (secret.secret.split(" ").length > 100) { %>
        <%= secret.secret.substring(0, 100) + " ..." %>
                      <% } else { %>
                        <%= secret.secret %>
                          <% } %>
                  </span>
                  <% if (secret.secret.split(" ").length > 100) { %>
    
            <button
              class=" read" data-full="<%= secret.secret %>"
                    data-truncated="<%= secret.secret.substring(0, 250) + '...' %>">
                    Read More
                    </button>


                    <% } %>
                </p>
              </div>

              <form action="/comment/text" method="POST" class="gossipa-comment-form">
                <input type="hidden" id="secretId" name="id" value="<%= secret.id %>" />
                <input type="hidden" name="secretUserId" value="<%= secret.user_id %>" />
                <input type="hidden" name="commentUserId" value="<%= userId %>" />

                <textarea name="comment" id="commentInput" placeholder="drop your thoughts anonymously..." maxlength="300"
                  required></textarea>

                <div class="comment-footer">
                  <span class="hint">🎭 Stay anonymous • no replies</span>
                  <!-- <button type="submit" class="submit-btn">Send</button> -->
                  <button type="submit" id="postCommentButton">
                    <!-- Post -->
                    <i class="fas fa-paper-plane"></i>
                  </button>
                </div>

                <% if (locals.message) { %>
                  <small class="comment-message">
                    <%= message %>
                  </small>
                  <% } %>
              </form>

            </div>
            <% }) %>


        </div>


        <button id="next"><i class="fas fa-chevron-right"></i></button>
      </div>
    </div>
</section>


<script>
  document.querySelector(".back").addEventListener("click", () => {
    // Check if there's a referrer (i.e., user navigated here from somewhere else)
    const from = document.referrer;

    // If previous page is from your own domain and is the Explore page
    if (from && from.includes("/explore")) {
      window.history.back(); // ⬅️ Go back to where they came from
    } else {
      window.location.href = "/explore"; // ⬅️ Fallback default
    }
  });
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    let currentIndex = 0;
    const cards = document.querySelectorAll(".swipe-card");
    const nextBtn = document.getElementById("next");
    const prevBtn = document.getElementById("prev");
    const tutorialOverlay = document.getElementById("tutorial-overlay");
    const tutorialStep = document.querySelector(".tutorial-step");
    const progressBar = document.getElementById("progress-bar");
    let step = 0;
    let currentStep = 1;
    const totalSteps = 2;
  
    // -------- CARD LOGIC -------- //
    function showCard(index) {
      cards.forEach((card, i) => {
        card.style.zIndex = cards.length - i;
        card.style.transform = i === index ? "translateX(0)" : "translateX(100vw)";
      });
    }
    showCard(currentIndex);
  
    // Buttons (desktop)
    nextBtn?.addEventListener("click", () => {
      if (currentIndex < cards.length - 1) {
        currentIndex++;
        showCard(currentIndex);
      }
    });
    prevBtn?.addEventListener("click", () => {
      if (currentIndex > 0) {
        currentIndex--;
        showCard(currentIndex);
      }
    });
  
    // Swipe (mobile)
    cards.forEach((card) => {
      let startX = 0;
      card.addEventListener("touchstart", (e) => {
        startX = e.touches[0].clientX;
      });
      card.addEventListener("touchend", (e) => {
        const diff = e.changedTouches[0].clientX - startX;
        if (Math.abs(diff) > 50) {
          if (diff > 0 && currentIndex > 0) currentIndex--;
          if (diff < 0 && currentIndex < cards.length - 1) currentIndex++;
          showCard(currentIndex);
        }
      });
    });
  
    // -------- TUTORIAL LOGIC -------- //
    function updateProgressBar() {
      const progress = (currentStep / totalSteps) * 100;
      progressBar.style.width = `${progress}%`;
    }
  
    function showGestureDemo() {
      const gesture = document.getElementById("gesture-demo");
      const firstCard = document.querySelector(".swipe-card");
      if (!firstCard) return;
  
      gesture.classList.remove("hidden");
      firstCard.classList.add("highlight");
  
      firstCard.style.transition = "transform 0.4s ease-in-out";
      firstCard.style.transform = "translateX(-40px)";
      setTimeout(() => firstCard.style.transform = "translateX(40px)", 400);
      setTimeout(() => firstCard.style.transform = "translateX(0)", 800);
  
      setTimeout(() => {
        gesture.classList.add("hidden");
        firstCard.classList.remove("highlight");
      }, 4000);
    }
  
    function startTutorial() {
      tutorialOverlay.classList.remove("hidden");
      step = 0;
      currentStep = 1;
      updateProgressBar();
  
      tutorialStep.innerHTML = `
        <h2>Welcome</h2>
        <p>Swipe through the cards or use buttons to explore.</p>
        <div id="progress-bar-container">
          <div id="progress-bar" style="width: 0%"></div>
        </div>
        <button id="next-step">Next</button>
        <button class="skip-btn">Skip</button>
      `;
  
      attachStepListeners();
    }
  
    function attachStepListeners() {
      const nextStepBtn = document.getElementById("next-step");
      const skipBtns = document.querySelectorAll(".skip-btn");
  
      skipBtns.forEach((btn) =>
        btn.addEventListener("click", () => {
          tutorialOverlay.classList.add("hidden");
          localStorage.setItem("tutorialCompleted", "true");
          showGestureDemo();
        })
      );
  
      if (nextStepBtn) {
        nextStepBtn.addEventListener("click", () => {
          step++;
          if (currentStep < totalSteps) {
            currentStep++;
            updateProgressBar();
  
            // Step 2 content
            tutorialStep.innerHTML = `
              <h2>Step 2</h2>
              <p>Swipe left/right on cards, or use the arrows below.</p>
              <div id="progress-bar-container">
                <div id="progress-bar" style="width:${(currentStep / totalSteps) * 100}%"></div>
              </div>
              <button class="skip-btn">Got it</button>
            `;
            attachStepListeners();
          } else {
            tutorialOverlay.classList.add("hidden");
            localStorage.setItem("tutorialCompleted", "true");
            showGestureDemo();
          }
        });
      }
    }
  
    // -------- INIT -------- //
    if (!localStorage.getItem("tutorialCompleted")) {
      startTutorial();
    }

    const gesture = document.getElementById("gesture-demo");
    gesture.classList.add("hidden");
  });
  </script>
  

<script>
document.addEventListener("DOMContentLoaded", () => {
          // Bubble for comment form submission
  const cardContainer= document.querySelector("#card-container")

          cardContainer.addEventListener("submit", async (e) => {
            if (e.target.closest(".gossipa-comment-form")) {
              e.preventDefault();
              const form = e.target;
              const section = form.closest(".comment-section");
              const postId = form.querySelector("#secretId")?.value;
              const postType = "text"

              const secretUserId = form.querySelector('[name="secretUserId"]').value;
              const commentUserId = form.querySelector('[name="commentUserId"]').value;
              const commentInput = form.querySelector("#commentInput").value;

              const notice = document.getElementById("notification")

              try {
                const res = await fetch(`/comment/${postType}`, {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    id: postId,
                    secretUserId,
                    commentUserId,
                    comment: commentInput
                  }),
                });

                const result = await res.json();

                if (result.success) {
                                   form.querySelector("#commentInput").value = "";

                                   if (notice) {
                    notice.innerHTML = `<div class="toast">${result.message}</div>`;
                    setTimeout(() => (notice.innerHTML = ""), 3000);
                  }

                } else {
                  if (notice) {
                    notice.innerHTML = `<div class="toast">${result.message}</div>`;
                    setTimeout(() => (notice.innerHTML = ""), 3000);
                  }
                }
              } catch (err) {
                console.error(err);
                if (notice) {
                  notice.innerHTML = `<div class="toast">Error posting comment</div>`;
                  setTimeout(() => (notice.innerHTML = ""), 3000);
                }
              }
            }
          });
        });


  document.querySelectorAll(".read").forEach((button) => {
    button.addEventListener("click", (e) => {
      const contentSpan = e.target.previousElementSibling;
      const isTruncated = e.target.textContent === "Read More";

      if (isTruncated) {
        // Show full content
        contentSpan.textContent = e.target.dataset.full;
        e.target.textContent = "See Less";
      } else {
        // Reapply truncated content
        contentSpan.textContent = e.target.dataset.truncated;
        e.target.textContent = "Read More";
      }
    });
  });

</script>

<script>
  document.querySelectorAll('.gossipa-comment-form textarea').forEach((textarea) => {
    textarea.addEventListener('input', () => {
      textarea.style.height = 'auto';
      textarea.style.height = `${textarea.scrollHeight}px`;
    });
  });

</script>


<script>
  const swipeCards = document.querySelectorAll(".swipe-card");

  swipeCards.forEach((card) => {
    let startX = 0;
    let currentX = 0;
    let isDragging = false;

    card.addEventListener("touchstart", (e) => {
      startX = e.touches[0].clientX;
      isDragging = true;
    });

    card.addEventListener("touchmove", (e) => {
      if (!isDragging) return;
      currentX = e.touches[0].clientX - startX;
      card.style.transform = `translateX(${currentX}px) rotate(${currentX / 10}deg)`;
    });

    card.addEventListener("touchend", () => {
      isDragging = false;
      if (currentX > 100) {
        swipe(card, "right");
      } else if (currentX < -100) {
        swipe(card, "left");
      } else {
        card.style.transform = "translateX(0) rotate(0)";
      }
      currentX = 0;
    });

  });

  function swipe(card, direction) {
    const offset = direction === "right" ? "100%" : "-100%";
    const rotate = direction === "right" ? 20 : -20;
    card.style.transform = `translateX(${offset}) rotate(${rotate}deg)`;
    card.classList.add("removed");
    setTimeout(() => card.remove(), 400);
  }
</script>


<script src="../js/app.js"></script>