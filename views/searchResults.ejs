
  <%- include("layout") %>
  
  <style>
    .search-result-box {
      max-width: 900px;
      margin: 30px auto 40px;
      padding: 20px;
      /* background: #1e1e1e; */
      background: var(--container-bg);
      border-radius: 12px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.3);
      color: var(--text-color);
    }

    .search-result-item {
      display: flex;
      align-items: flex-start;
      padding: 15px 0;
      border-bottom: 1px solid #333;
      gap: 15px;
    }

    .search-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid #ffd54f;
    }

    .search-content {
      flex: 1;
    }

    .search-meta {
      display: flex;
      align-items: center;
      font-size: 0.85rem;
      color: #aaa;
      gap: 8px;
      margin-bottom: 5px;
    }

    .search-meta .badge {
      background: #444;
      color: #ffd54f;
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 0.75rem;
      text-transform: capitalize;
    }

    .search-meta .timestamp {
      font-style: italic;
    }

    .search-text mark {
      background: #ffd54f;
      color: black;
      padding: 0 2px;
      border-radius: 2px;
    }

    .read-more {
      background: none;
      border: none;
      color: #ffd54f;
      font-weight: bold;
      cursor: pointer;
      margin-left: 10px;
      font-size: 0.9rem;
    }

    .read-more:hover {
      text-decoration: underline;
    }

    .no-result {
      text-align: center;
      padding: 10px;
      color: #888;
    }

    .reactions {
      font-size: 0.8rem;
      margin-top: 5px;
      color: #bbb;
    }

    .load-more {
      text-align: center;
      margin-top: 20px;
      cursor: pointer;
      color: #ffd54f;
      font-weight: bold;
    }
  </style>
<body>
  <div class="layout-container container">
    <aside class="left-sidebar">
      <div class="aside">
        <ul class="nav">
          <li class="nav-item current">
            <a href="/feeds">
              <i class="nav-icon fas fa-home"></i>
              <span class="nav-text">Home</span>
            </a>
          </li>
          <li class="nav-item">
            <a href="/chat">
              <div class="nav-main">
                <p>
                  <i class="nav-icon fas fa-message"></i>
                  <span class="nav-text">Chat</span>       
                </p>
                
              <span class="nav-tag">New</span>
            </div>
            </a>
          </li>
          <li class="nav-item mid-post-1">
            <button id="openSubmitForm" >
              <i class="nav-icon fas fa-plus-circle"></i>
            </button>
          </li>
         <li class="nav-item">
            <a href="/profile">
              <i class="nav-icon fas fa-circle-user"></i>
              <span class="nav-text">My Profile</span>
            </a>
          </li>
          <li class="nav-item mid-post-2">
            <a  href="/submit"class="nav-text">Compose Gist</a>
            <i  class="nav-icon fas fa-circle-plus"></i>
          </li>
        </ul>
      </div>
      </aside>
 
    <main>
      
  <div class="search-result-box" id="resultsBox">
    <% if (results.length === 0) { %>
      <div class="no-result">No results found for "<%= keyword %>"</div>
    <% } else { %>
      <% results.slice(0, 8).forEach((item, index) => { 
        const isLong = item.secret.length > 150;
        const shortText = isLong ? item.secret.slice(0, 150) + "..." : item.secret;
      %>
      <div class="search-result-item" data-index="<%= index %>">
        <img class="search-avatar" src="<%= item.profile_picture %>" alt="Avatar">
        <div class="search-content">
          <div class="search-meta">
            <span class="username">@gossipa<%= item.user_id %></span>
            <span class="badge"><%= item.category ? item.category : "random" %></span>
            <span class="timestamp" data-raw="<%= item.timestamp %>"></span>
          </div>
          <div class="search-text short-text" data-full="<%= item.secret.replace(/"/g, '&quot;') %>">
            <%- highlightMatch(shortText, keyword) %>
            <% if (isLong) { %>
              <button class="read-more" onclick="toggleRead(event, this, '<%= keyword %>')">Read More</button>
            <% } %>
          </div>
          <div class="reactions">‚ù§Ô∏è <%= Object.keys(item.reactions || {}).length %> reactions</div>
        </div>
      </div>
      <% }) %>
      <% if (results.length > 8) {%>
      <div id="loadMore" class="load-more">Load More</div>
      <% } %>
    <% } %>
  </div>
  
</main>

<aside class="right-sidebar">
    <div class="aside premium-aside">
        <div class="premium-card">
          <div class="crown-icon sparkle">üëë</div>
      
          <h3 class="premium-title">Become a Chief Gossipa</h3>
          <p class="premium-text">Stand out in the World of anonymity. Get Heard. Remain unknown.</p>
      
          <div class="trending-stats">
            <span>üî• Trending Now: <strong>152</strong> Gissipas</span>
          </div>
      
          <div class="avatar-hint">
            <img src="/img/avatars/thumbs/dog.jpg" alt="Anonymous" class="blur-avatar" />
            <p>You‚Äôre 1 step from <strong>trending</strong>‚Ä¶</p>
          </div>
      
          <a href="/subscribe" class="premium-btn">Unlock Premium</a>
        </div>
      </div>
        
      <div class="aside aside-2">
        <center>
          <h4 class="user-count">Active Gossipas: <span id="activeCount">0</span></h4>
        </center>
        <ul class="nav user-list">
        </ul>

      </div>

  </aside>

</div>


<!-- Load Day.js and the plugin via CDN -->
      <script src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js"></script>
<script>
    const connectedUsersMap = new Map();
    const userList = document.querySelector(".user-list");
    const userCountDisplay = document.getElementById("activeCount");

    function updateUserCount() {
      userCountDisplay.textContent = connectedUsersMap.size;
    }

    function userConnected(user) {
      if (connectedUsersMap.has(user.id)) return;

      const userBox = document.createElement("li");
      userBox.className = "connected-user nav-item enter";
      userBox.id = `user-${user.id}`;
      userBox.innerHTML = `
      <div class="user-card" style="display: flex; align-items: center; gap: 10px;">
        <img src="${user.profile_picture}" alt="Avatar" class="profile-pic" style="width: 32px; height: 32px; border-radius: 50%;">
        <p>@amebo${user.id}</p>
      </div>
    `;

      userList.appendChild(userBox);
      connectedUsersMap.set(user.id, userBox);
      updateUserCount();

      // Trigger reflow for entry animation
      requestAnimationFrame(() => {
        userBox.classList.add("enter");
      });
    }

    function userDisconnected(userId) {
      const userBox = connectedUsersMap.get(userId);
      if (userBox) {
        userBox.classList.add("exit");
        userBox.classList.remove("enter");
        setTimeout(() => {
          userBox.remove();
          connectedUsersMap.delete(userId);
          updateUserCount();
        }, 400); // CSS transition match
      }
    }

    socket.on("userJoined", async (userId) => {
      try {
        const res = await fetch(`/user/${userId}`);
        const user = await res.json();
        userConnected(user);
      } catch (err) {
        console.error("Failed to fetch user data:", err);
      }
    });

    socket.on("userLeft", (userId) => {
      userDisconnected(userId);
    });

    // Load current active users on first load
    fetch("/active-users")
      .then(res => res.json())
      .then(users => {
        users.forEach(user => userConnected(user));
      })
      .catch(console.error);
  </script>

    <script>
        const header = document.querySelector('header');
        const nextSection = document.querySelector('body').querySelector('section:not(.active)');
        const logo = document.getElementById('logo')

        window.addEventListener('scroll', function () {
            const scrolled = window.scrollY > 0;
            if (scrolled) {
                let body = document.querySelector('body');
                body.style.overflowY = 'scroll';
                header.classList.add('scrolled');
            } else {
                header.classList.remove('scrolled');
            }
        });

        window.onload = function () {
            const textArea = document.querySelector('textarea')
            textArea.blur();
        }


        function changeBg(event) {
            event.target.style.background = "var(--secondary-color)"
            event.target.style.border = "1px solid var(--primary-color)"
        }

    </script>

  </div>

  <script>
    function goToSecret(id) {
      window.location.href = `/secret/${id}`;
    }

    function highlightMatch(text, keyword) {
      const regex = new RegExp("(" + keyword + ")", "gi");
      return text.replace(regex, "<mark>$1</mark>");
    }

    function toggleRead(e, btn, keyword) {
      e.stopPropagation();
      const textEl = btn.parentElement;
      const raw = textEl.getAttribute("data-full");
      const expanded = textEl.classList.contains("expanded");

      if (!expanded) {
        textEl.innerHTML = highlightMatch(raw, keyword);
        const newBtn = document.createElement("button");
        newBtn.textContent = "Show Less";
        newBtn.className = "read-more";
        newBtn.onclick = ev => toggleRead(ev, newBtn, keyword);
        textEl.appendChild(newBtn);
        textEl.classList.add("expanded");
      } else {
        const short = raw.slice(0, 150) + "...";
        textEl.innerHTML = highlightMatch(short, keyword);
        const newBtn = document.createElement("button");
        newBtn.textContent = "Read More";
        newBtn.className = "read-more";
        newBtn.onclick = ev => toggleRead(ev, newBtn, keyword);
        textEl.appendChild(newBtn);
        textEl.classList.remove("expanded");
      }
    }

    // Lazy loading
    const results = <%- JSON.stringify(results) %>;
    let currentIndex = 10;

    document.getElementById("loadMore")?.addEventListener("click", () => {
      const box = document.getElementById("resultsBox");
      const keyword = "<%= keyword %>";

      const chunk = results.slice(currentIndex, currentIndex + 10);
      chunk.forEach(item => {
        const short = item.secret.length > 150 ? item.secret.slice(0, 150) + "..." : item.secret;
        const div = document.createElement("div");
        div.className = "search-result-item";
        div.innerHTML = `
          <img class="search-avatar" src="${item.profile_picture}" alt="Avatar">
          <div class="search-content">
            <div class="search-meta">
              <span class="username">@gossipa${item.user_id}</span>
              <span class="badge">${item.category || "random"}</span>
              <span class="timestamp">${item.timestamp}</span>
            </div>
            <div class="search-text short-text" data-full="${item.secret.replace(/"/g, '&quot;')}">
              ${highlightMatch(short, keyword)}
              ${item.secret.length > 150 ? '<button class="read-more" onclick="toggleRead(event, this, \'' + keyword + '\')">Read More</button>' : ''}
            </div>
            <div class="reactions">‚ù§Ô∏è ${Object.keys(item.reactions || {}).length} reactions</div>
          </div>`;
        box.insertBefore(div, document.getElementById("loadMore"));
      });

      currentIndex += 10;
      if (currentIndex >= results.length) {
        document.getElementById("loadMore").style.display = "none";
      }
    });
  </script>
  <script>
      dayjs.extend(window.dayjs_plugin_relativeTime);

      document.querySelectorAll('.timestamp').forEach((timeElem) => {
        const rawTimestamp = timeElem.getAttribute('data-raw');
        if (rawTimestamp) {
          const formatted = dayjs(rawTimestamp).fromNow();
          timeElem.textContent = formatted;
        }
      });
    </script>
   

  
<script src="/js/defaultTheme.js"></script>
    <script src="/js/app.js"></script>  
</body>
</html>
